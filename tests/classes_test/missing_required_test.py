'''This module contains Missing Required tests to be run with pytest.

The file was generated by methods of the `Tests` class in the `genedata.generate` module.

DO NOT MODIFY THIS FILE.
'''

import pytest   # noqa: I001
import re

import genedata.classes7 as gc
from genedata.build import Genealogy
from genedata.messages import Msg


g = Genealogy('test')
fam = g.family_xref('1')
indi = g.individual_xref('1')
obje = g.multimedia_xref('1')
repo = g.repository_xref('1')
snote = g.shared_note_xref('1', 'a note')
sour = g.source_xref('1')
subm = g.submitter_xref('1')


def test_missing_required_Asso() -> None:
    '''Validate the `Asso` structure with a single substructure that is repeated.'''
    m = gc.Asso(indi, gc.Note('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()


def test_missing_required_Chan() -> None:
    '''Validate the `Chan` structure with a single substructure that is repeated.'''
    m = gc.Chan(gc.Note('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()


def test_missing_required_FamEven() -> None:
    '''Validate the `FamEven` structure with a single substructure that is repeated.'''
    m = gc.FamEven('abc', gc.Addr('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()


def test_missing_required_FamFact() -> None:
    '''Validate the `FamFact` structure with a single substructure that is repeated.'''
    m = gc.FamFact('abc', gc.Addr('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()


def test_missing_required_File() -> None:
    '''Validate the `File` structure with a single substructure that is repeated.'''
    m = gc.File('dir/to/somewhere/', gc.FileTran('dir/to/somewhere/', gc.Form('text/html')))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()


def test_missing_required_Head() -> None:
    '''Validate the `Head` structure with a single substructure that is repeated.'''
    m = gc.Head(gc.Copr('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()


def test_missing_required_Idno() -> None:
    '''Validate the `Idno` structure with a single substructure that is repeated.'''
    m = gc.Idno('abc', gc.Addr('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()


def test_missing_required_IndiEven() -> None:
    '''Validate the `IndiEven` structure with a single substructure that is repeated.'''
    m = gc.IndiEven('abc', gc.Addr('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()


def test_missing_required_IndiFact() -> None:
    '''Validate the `IndiFact` structure with a single substructure that is repeated.'''
    m = gc.IndiFact('abc', gc.Addr('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()


def test_missing_required_NameTran() -> None:
    '''Validate the `NameTran` structure with a single substructure that is repeated.'''
    m = gc.NameTran('John /Doe/', gc.Givn('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()


def test_missing_required_RecordObje() -> None:
    '''Validate the `RecordObje` structure with a single substructure that is repeated.'''
    m = gc.RecordObje(obje, gc.Chan(gc.DateExact('1 JAN 2000')))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()


def test_missing_required_RecordRepo() -> None:
    '''Validate the `RecordRepo` structure with a single substructure that is repeated.'''
    m = gc.RecordRepo(repo, gc.Addr('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()


def test_missing_required_RecordSubm() -> None:
    '''Validate the `RecordSubm` structure with a single substructure that is repeated.'''
    m = gc.RecordSubm(subm, gc.Addr('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()


def test_missing_required_Slgc() -> None:
    '''Validate the `Slgc` structure with a single substructure that is repeated.'''
    m = gc.Slgc(gc.Date('1 JAN 2000'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.MISSING_REQUIRED.format(m.required, m.class_name))
    ):
        assert m.validate()
