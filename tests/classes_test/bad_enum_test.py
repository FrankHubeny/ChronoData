'''This module contains Bad Enum tests to be run with pytest.

The file was generated by methods of the `Tests` class in the `genedata.generate` module.

DO NOT MODIFY THIS FILE.
'''

import pytest   # noqa: I001
import re

import genedata.classes70 as gc
from genedata.build import Genealogy
from genedata.messages import Msg


g = Genealogy()
fam = g.family_xref('1')
indi = g.individual_xref('1')
obje = g.multimedia_xref('1')
repo = g.repository_xref('1')
snote = g.shared_note_xref('1', 'a note')
sour = g.source_xref('1')
subm = g.submitter_xref('1')


def test_bad_enum_DataEven() -> None:
    '''Validate the `DataEven` structure with a bad enumeration value and required substructures.'''
    m = gc.DataEven('XYZ1234567890')
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_VALID_ENUM.format('XYZ1234567890', m.enum_tags, m.class_name))
    ):
        assert m.validate()


def test_bad_enum_FamcAdop() -> None:
    '''Validate the `FamcAdop` structure with a bad enumeration value and required substructures.'''
    m = gc.FamcAdop('XYZ1234567890')
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_VALID_ENUM.format('XYZ1234567890', m.enum_tags, m.class_name))
    ):
        assert m.validate()


def test_bad_enum_FamcStat() -> None:
    '''Validate the `FamcStat` structure with a bad enumeration value and required substructures.'''
    m = gc.FamcStat('XYZ1234567890')
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_VALID_ENUM.format('XYZ1234567890', m.enum_tags, m.class_name))
    ):
        assert m.validate()


def test_bad_enum_Medi() -> None:
    '''Validate the `Medi` structure with a bad enumeration value and required substructures.'''
    m = gc.Medi('XYZ1234567890')
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_VALID_ENUM.format('XYZ1234567890', m.enum_tags, m.class_name))
    ):
        assert m.validate()


def test_bad_enum_NameType() -> None:
    '''Validate the `NameType` structure with a bad enumeration value and required substructures.'''
    m = gc.NameType('XYZ1234567890')
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_VALID_ENUM.format('XYZ1234567890', m.enum_tags, m.class_name))
    ):
        assert m.validate()


def test_bad_enum_No() -> None:
    '''Validate the `No` structure with a bad enumeration value and required substructures.'''
    m = gc.No('XYZ1234567890')
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_VALID_ENUM.format('XYZ1234567890', m.enum_tags, m.class_name))
    ):
        assert m.validate()


def test_bad_enum_OrdStat() -> None:
    '''Validate the `OrdStat` structure with a bad enumeration value and required substructures.'''
    m = gc.OrdStat('XYZ1234567890', gc.DateExact('1 JAN 2000'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_VALID_ENUM.format('XYZ1234567890', m.enum_tags, m.class_name))
    ):
        assert m.validate()


def test_bad_enum_Pedi() -> None:
    '''Validate the `Pedi` structure with a bad enumeration value and required substructures.'''
    m = gc.Pedi('XYZ1234567890')
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_VALID_ENUM.format('XYZ1234567890', m.enum_tags, m.class_name))
    ):
        assert m.validate()


def test_bad_enum_Quay() -> None:
    '''Validate the `Quay` structure with a bad enumeration value and required substructures.'''
    m = gc.Quay('XYZ1234567890')
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_VALID_ENUM.format('XYZ1234567890', m.enum_tags, m.class_name))
    ):
        assert m.validate()


def test_bad_enum_Resn() -> None:
    '''Validate the `Resn` structure with a bad enumeration value and required substructures.'''
    m = gc.Resn('XYZ1234567890')
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_VALID_ENUM.format('XYZ1234567890', m.enum_tags, m.class_name))
    ):
        assert m.validate()


def test_bad_enum_Role() -> None:
    '''Validate the `Role` structure with a bad enumeration value and required substructures.'''
    m = gc.Role('XYZ1234567890')
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_VALID_ENUM.format('XYZ1234567890', m.enum_tags, m.class_name))
    ):
        assert m.validate()


def test_bad_enum_Sex() -> None:
    '''Validate the `Sex` structure with a bad enumeration value and required substructures.'''
    m = gc.Sex('XYZ1234567890')
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_VALID_ENUM.format('XYZ1234567890', m.enum_tags, m.class_name))
    ):
        assert m.validate()


def test_bad_enum_SourEven() -> None:
    '''Validate the `SourEven` structure with a bad enumeration value and required substructures.'''
    m = gc.SourEven('XYZ1234567890')
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_VALID_ENUM.format('XYZ1234567890', m.enum_tags, m.class_name))
    ):
        assert m.validate()
