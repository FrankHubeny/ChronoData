# mypy: disable-error-code="arg-type, unused-ignore"
'''This module contains Bad Payload tests to be run with pytest.

The file was generated by methods of the `Tests` class in the `genedata.generate` module.

DO NOT MODIFY THIS FILE.
'''

import pytest   # noqa: I001
import re

import genedata.classes70 as gc
from genedata.build import Genealogy
from genedata.messages import Msg


g = Genealogy()
fam = g.family_xref('1')
indi = g.individual_xref('1')
obje = g.multimedia_xref('1')
repo = g.repository_xref('1')
snote = g.shared_note_xref('1', 'a note')
sour = g.source_xref('1')
subm = g.submitter_xref('1')


def test_bad_payload_Abbr() -> None:
    '''Validate that the `Abbr` structure rejects a value not in its payload datatype.'''
    m = gc.Abbr(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Addr() -> None:
    '''Validate that the `Addr` structure rejects a value not in its payload datatype.'''
    m = gc.Addr(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_AdopFamc() -> None:
    '''Validate that the `AdopFamc` structure rejects a value not in its payload datatype.'''
    m = gc.AdopFamc(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_FAMILY_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Adop() -> None:
    '''Validate that the `Adop` structure rejects a value not in its payload datatype.'''
    m = gc.Adop(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Adr1() -> None:
    '''Validate that the `Adr1` structure rejects a value not in its payload datatype.'''
    m = gc.Adr1(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Adr2() -> None:
    '''Validate that the `Adr2` structure rejects a value not in its payload datatype.'''
    m = gc.Adr2(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Adr3() -> None:
    '''Validate that the `Adr3` structure rejects a value not in its payload datatype.'''
    m = gc.Adr3(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Age() -> None:
    '''Validate that the `Age` structure rejects a value not in its payload datatype.'''
    m = gc.Age(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Agnc() -> None:
    '''Validate that the `Agnc` structure rejects a value not in its payload datatype.'''
    m = gc.Agnc(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Alia() -> None:
    '''Validate that the `Alia` structure rejects a value not in its payload datatype.'''
    m = gc.Alia(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_INDIVIDUAL_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Anci() -> None:
    '''Validate that the `Anci` structure rejects a value not in its payload datatype.'''
    m = gc.Anci(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_SUBMITTER_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Anul() -> None:
    '''Validate that the `Anul` structure rejects a value not in its payload datatype.'''
    m = gc.Anul(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Asso() -> None:
    '''Validate that the `Asso` structure rejects a value not in its payload datatype.'''
    m = gc.Asso(-1, gc.Role('CHIL'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_INDIVIDUAL_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Auth() -> None:
    '''Validate that the `Auth` structure rejects a value not in its payload datatype.'''
    m = gc.Auth(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Bapm() -> None:
    '''Validate that the `Bapm` structure rejects a value not in its payload datatype.'''
    m = gc.Bapm(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Barm() -> None:
    '''Validate that the `Barm` structure rejects a value not in its payload datatype.'''
    m = gc.Barm(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Basm() -> None:
    '''Validate that the `Basm` structure rejects a value not in its payload datatype.'''
    m = gc.Basm(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Birt() -> None:
    '''Validate that the `Birt` structure rejects a value not in its payload datatype.'''
    m = gc.Birt(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Bles() -> None:
    '''Validate that the `Bles` structure rejects a value not in its payload datatype.'''
    m = gc.Bles(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Buri() -> None:
    '''Validate that the `Buri` structure rejects a value not in its payload datatype.'''
    m = gc.Buri(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Caln() -> None:
    '''Validate that the `Caln` structure rejects a value not in its payload datatype.'''
    m = gc.Caln(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Cast() -> None:
    '''Validate that the `Cast` structure rejects a value not in its payload datatype.'''
    m = gc.Cast(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Caus() -> None:
    '''Validate that the `Caus` structure rejects a value not in its payload datatype.'''
    m = gc.Caus(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Chil() -> None:
    '''Validate that the `Chil` structure rejects a value not in its payload datatype.'''
    m = gc.Chil(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_INDIVIDUAL_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Chr() -> None:
    '''Validate that the `Chr` structure rejects a value not in its payload datatype.'''
    m = gc.Chr(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Chra() -> None:
    '''Validate that the `Chra` structure rejects a value not in its payload datatype.'''
    m = gc.Chra(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_City() -> None:
    '''Validate that the `City` structure rejects a value not in its payload datatype.'''
    m = gc.City(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Conf() -> None:
    '''Validate that the `Conf` structure rejects a value not in its payload datatype.'''
    m = gc.Conf(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Copr() -> None:
    '''Validate that the `Copr` structure rejects a value not in its payload datatype.'''
    m = gc.Copr(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Corp() -> None:
    '''Validate that the `Corp` structure rejects a value not in its payload datatype.'''
    m = gc.Corp(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Crem() -> None:
    '''Validate that the `Crem` structure rejects a value not in its payload datatype.'''
    m = gc.Crem(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Ctry() -> None:
    '''Validate that the `Ctry` structure rejects a value not in its payload datatype.'''
    m = gc.Ctry(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_DataEvenDate() -> None:
    '''Validate that the `DataEvenDate` structure rejects a value not in its payload datatype.'''
    m = gc.DataEvenDate(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_DataEven() -> None:
    '''Validate that the `DataEven` structure rejects a value not in its payload datatype.'''
    m = gc.DataEven(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_DateExact() -> None:
    '''Validate that the `DateExact` structure rejects a value not in its payload datatype.'''
    m = gc.DateExact(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Date() -> None:
    '''Validate that the `Date` structure rejects a value not in its payload datatype.'''
    m = gc.Date(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Deat() -> None:
    '''Validate that the `Deat` structure rejects a value not in its payload datatype.'''
    m = gc.Deat(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Desi() -> None:
    '''Validate that the `Desi` structure rejects a value not in its payload datatype.'''
    m = gc.Desi(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_SUBMITTER_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Dest() -> None:
    '''Validate that the `Dest` structure rejects a value not in its payload datatype.'''
    m = gc.Dest(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Div() -> None:
    '''Validate that the `Div` structure rejects a value not in its payload datatype.'''
    m = gc.Div(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Divf() -> None:
    '''Validate that the `Divf` structure rejects a value not in its payload datatype.'''
    m = gc.Divf(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Dscr() -> None:
    '''Validate that the `Dscr` structure rejects a value not in its payload datatype.'''
    m = gc.Dscr(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Educ() -> None:
    '''Validate that the `Educ` structure rejects a value not in its payload datatype.'''
    m = gc.Educ(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Email() -> None:
    '''Validate that the `Email` structure rejects a value not in its payload datatype.'''
    m = gc.Email(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Emig() -> None:
    '''Validate that the `Emig` structure rejects a value not in its payload datatype.'''
    m = gc.Emig(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Enga() -> None:
    '''Validate that the `Enga` structure rejects a value not in its payload datatype.'''
    m = gc.Enga(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_ExidType() -> None:
    '''Validate that the `ExidType` structure rejects a value not in its payload datatype.'''
    m = gc.ExidType(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Exid() -> None:
    '''Validate that the `Exid` structure rejects a value not in its payload datatype.'''
    m = gc.Exid(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_FamCens() -> None:
    '''Validate that the `FamCens` structure rejects a value not in its payload datatype.'''
    m = gc.FamCens(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_FamEven() -> None:
    '''Validate that the `FamEven` structure rejects a value not in its payload datatype.'''
    m = gc.FamEven(-1, gc.Type('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_FamFact() -> None:
    '''Validate that the `FamFact` structure rejects a value not in its payload datatype.'''
    m = gc.FamFact(-1, gc.Type('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_FamHusb() -> None:
    '''Validate that the `FamHusb` structure rejects a value not in its payload datatype.'''
    m = gc.FamHusb(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_INDIVIDUAL_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_FamNchi() -> None:
    '''Validate that the `FamNchi` structure rejects a value not in its payload datatype.'''
    m = gc.FamNchi(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_INTEGER.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_FamResi() -> None:
    '''Validate that the `FamResi` structure rejects a value not in its payload datatype.'''
    m = gc.FamResi(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_FamWife() -> None:
    '''Validate that the `FamWife` structure rejects a value not in its payload datatype.'''
    m = gc.FamWife(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_INDIVIDUAL_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_FamcAdop() -> None:
    '''Validate that the `FamcAdop` structure rejects a value not in its payload datatype.'''
    m = gc.FamcAdop(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_FamcStat() -> None:
    '''Validate that the `FamcStat` structure rejects a value not in its payload datatype.'''
    m = gc.FamcStat(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Famc() -> None:
    '''Validate that the `Famc` structure rejects a value not in its payload datatype.'''
    m = gc.Famc(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_FAMILY_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Fams() -> None:
    '''Validate that the `Fams` structure rejects a value not in its payload datatype.'''
    m = gc.Fams(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_FAMILY_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Fax() -> None:
    '''Validate that the `Fax` structure rejects a value not in its payload datatype.'''
    m = gc.Fax(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Fcom() -> None:
    '''Validate that the `Fcom` structure rejects a value not in its payload datatype.'''
    m = gc.Fcom(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_FileTran() -> None:
    '''Validate that the `FileTran` structure rejects a value not in its payload datatype.'''
    m = gc.FileTran(-1, gc.Form('text/html'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_File() -> None:
    '''Validate that the `File` structure rejects a value not in its payload datatype.'''
    m = gc.File(-1, gc.Form('text/html'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Form() -> None:
    '''Validate that the `Form` structure rejects a value not in its payload datatype.'''
    m = gc.Form(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_GedcVers() -> None:
    '''Validate that the `GedcVers` structure rejects a value not in its payload datatype.'''
    m = gc.GedcVers(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Givn() -> None:
    '''Validate that the `Givn` structure rejects a value not in its payload datatype.'''
    m = gc.Givn(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Grad() -> None:
    '''Validate that the `Grad` structure rejects a value not in its payload datatype.'''
    m = gc.Grad(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_HeadDate() -> None:
    '''Validate that the `HeadDate` structure rejects a value not in its payload datatype.'''
    m = gc.HeadDate(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_HeadLang() -> None:
    '''Validate that the `HeadLang` structure rejects a value not in its payload datatype.'''
    m = gc.HeadLang(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_HeadPlacForm() -> None:
    '''Validate that the `HeadPlacForm` structure rejects a value not in its payload datatype.'''
    m = gc.HeadPlacForm(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_HeadSourData() -> None:
    '''Validate that the `HeadSourData` structure rejects a value not in its payload datatype.'''
    m = gc.HeadSourData(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_HeadSour() -> None:
    '''Validate that the `HeadSour` structure rejects a value not in its payload datatype.'''
    m = gc.HeadSour(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Height() -> None:
    '''Validate that the `Height` structure rejects a value not in its payload datatype.'''
    m = gc.Height(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_INTEGER.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Idno() -> None:
    '''Validate that the `Idno` structure rejects a value not in its payload datatype.'''
    m = gc.Idno(-1, gc.Type('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Immi() -> None:
    '''Validate that the `Immi` structure rejects a value not in its payload datatype.'''
    m = gc.Immi(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_IndiCens() -> None:
    '''Validate that the `IndiCens` structure rejects a value not in its payload datatype.'''
    m = gc.IndiCens(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_IndiEven() -> None:
    '''Validate that the `IndiEven` structure rejects a value not in its payload datatype.'''
    m = gc.IndiEven(-1, gc.Type('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_IndiFact() -> None:
    '''Validate that the `IndiFact` structure rejects a value not in its payload datatype.'''
    m = gc.IndiFact(-1, gc.Type('abc'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_IndiFamc() -> None:
    '''Validate that the `IndiFamc` structure rejects a value not in its payload datatype.'''
    m = gc.IndiFamc(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_FAMILY_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_IndiName() -> None:
    '''Validate that the `IndiName` structure rejects a value not in its payload datatype.'''
    m = gc.IndiName(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_IndiNchi() -> None:
    '''Validate that the `IndiNchi` structure rejects a value not in its payload datatype.'''
    m = gc.IndiNchi(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_INTEGER.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_IndiReli() -> None:
    '''Validate that the `IndiReli` structure rejects a value not in its payload datatype.'''
    m = gc.IndiReli(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_IndiResi() -> None:
    '''Validate that the `IndiResi` structure rejects a value not in its payload datatype.'''
    m = gc.IndiResi(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_IndiTitl() -> None:
    '''Validate that the `IndiTitl` structure rejects a value not in its payload datatype.'''
    m = gc.IndiTitl(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Lang() -> None:
    '''Validate that the `Lang` structure rejects a value not in its payload datatype.'''
    m = gc.Lang(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Lati() -> None:
    '''Validate that the `Lati` structure rejects a value not in its payload datatype.'''
    m = gc.Lati(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Left() -> None:
    '''Validate that the `Left` structure rejects a value not in its payload datatype.'''
    m = gc.Left(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_INTEGER.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Long() -> None:
    '''Validate that the `Long` structure rejects a value not in its payload datatype.'''
    m = gc.Long(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Marb() -> None:
    '''Validate that the `Marb` structure rejects a value not in its payload datatype.'''
    m = gc.Marb(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Marc() -> None:
    '''Validate that the `Marc` structure rejects a value not in its payload datatype.'''
    m = gc.Marc(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Marl() -> None:
    '''Validate that the `Marl` structure rejects a value not in its payload datatype.'''
    m = gc.Marl(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Marr() -> None:
    '''Validate that the `Marr` structure rejects a value not in its payload datatype.'''
    m = gc.Marr(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Mars() -> None:
    '''Validate that the `Mars` structure rejects a value not in its payload datatype.'''
    m = gc.Mars(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Medi() -> None:
    '''Validate that the `Medi` structure rejects a value not in its payload datatype.'''
    m = gc.Medi(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Mime() -> None:
    '''Validate that the `Mime` structure rejects a value not in its payload datatype.'''
    m = gc.Mime(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_NameTran() -> None:
    '''Validate that the `NameTran` structure rejects a value not in its payload datatype.'''
    m = gc.NameTran(-1, gc.Lang('en-US'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_NameType() -> None:
    '''Validate that the `NameType` structure rejects a value not in its payload datatype.'''
    m = gc.NameType(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Name() -> None:
    '''Validate that the `Name` structure rejects a value not in its payload datatype.'''
    m = gc.Name(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Nati() -> None:
    '''Validate that the `Nati` structure rejects a value not in its payload datatype.'''
    m = gc.Nati(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Natu() -> None:
    '''Validate that the `Natu` structure rejects a value not in its payload datatype.'''
    m = gc.Natu(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Nick() -> None:
    '''Validate that the `Nick` structure rejects a value not in its payload datatype.'''
    m = gc.Nick(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Nmr() -> None:
    '''Validate that the `Nmr` structure rejects a value not in its payload datatype.'''
    m = gc.Nmr(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_INTEGER.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_NoDate() -> None:
    '''Validate that the `NoDate` structure rejects a value not in its payload datatype.'''
    m = gc.NoDate(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_No() -> None:
    '''Validate that the `No` structure rejects a value not in its payload datatype.'''
    m = gc.No(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_NoteTran() -> None:
    '''Validate that the `NoteTran` structure rejects a value not in its payload datatype.'''
    m = gc.NoteTran(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Note() -> None:
    '''Validate that the `Note` structure rejects a value not in its payload datatype.'''
    m = gc.Note(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Npfx() -> None:
    '''Validate that the `Npfx` structure rejects a value not in its payload datatype.'''
    m = gc.Npfx(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Nsfx() -> None:
    '''Validate that the `Nsfx` structure rejects a value not in its payload datatype.'''
    m = gc.Nsfx(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Obje() -> None:
    '''Validate that the `Obje` structure rejects a value not in its payload datatype.'''
    m = gc.Obje(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_MULTIMEDIA_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Occu() -> None:
    '''Validate that the `Occu` structure rejects a value not in its payload datatype.'''
    m = gc.Occu(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_OrdStat() -> None:
    '''Validate that the `OrdStat` structure rejects a value not in its payload datatype.'''
    m = gc.OrdStat(-1, gc.DateExact('1 JAN 2000'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Ordn() -> None:
    '''Validate that the `Ordn` structure rejects a value not in its payload datatype.'''
    m = gc.Ordn(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Page() -> None:
    '''Validate that the `Page` structure rejects a value not in its payload datatype.'''
    m = gc.Page(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Pedi() -> None:
    '''Validate that the `Pedi` structure rejects a value not in its payload datatype.'''
    m = gc.Pedi(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Phon() -> None:
    '''Validate that the `Phon` structure rejects a value not in its payload datatype.'''
    m = gc.Phon(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Phrase() -> None:
    '''Validate that the `Phrase` structure rejects a value not in its payload datatype.'''
    m = gc.Phrase(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_PlacForm() -> None:
    '''Validate that the `PlacForm` structure rejects a value not in its payload datatype.'''
    m = gc.PlacForm(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_PlacTran() -> None:
    '''Validate that the `PlacTran` structure rejects a value not in its payload datatype.'''
    m = gc.PlacTran(-1, gc.Lang('en-US'))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Plac() -> None:
    '''Validate that the `Plac` structure rejects a value not in its payload datatype.'''
    m = gc.Plac(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Post() -> None:
    '''Validate that the `Post` structure rejects a value not in its payload datatype.'''
    m = gc.Post(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Prob() -> None:
    '''Validate that the `Prob` structure rejects a value not in its payload datatype.'''
    m = gc.Prob(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Prop() -> None:
    '''Validate that the `Prop` structure rejects a value not in its payload datatype.'''
    m = gc.Prop(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Publ() -> None:
    '''Validate that the `Publ` structure rejects a value not in its payload datatype.'''
    m = gc.Publ(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Quay() -> None:
    '''Validate that the `Quay` structure rejects a value not in its payload datatype.'''
    m = gc.Quay(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_RecordSnote() -> None:
    '''Validate that the `RecordSnote` structure rejects a value not in its payload datatype.'''
    m = gc.RecordSnote(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_SHARED_NOTE_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Refn() -> None:
    '''Validate that the `Refn` structure rejects a value not in its payload datatype.'''
    m = gc.Refn(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Reli() -> None:
    '''Validate that the `Reli` structure rejects a value not in its payload datatype.'''
    m = gc.Reli(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Repo() -> None:
    '''Validate that the `Repo` structure rejects a value not in its payload datatype.'''
    m = gc.Repo(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_REPOSITORY_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Resn() -> None:
    '''Validate that the `Resn` structure rejects a value not in its payload datatype.'''
    m = gc.Resn(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Reti() -> None:
    '''Validate that the `Reti` structure rejects a value not in its payload datatype.'''
    m = gc.Reti(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Role() -> None:
    '''Validate that the `Role` structure rejects a value not in its payload datatype.'''
    m = gc.Role(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Sdate() -> None:
    '''Validate that the `Sdate` structure rejects a value not in its payload datatype.'''
    m = gc.Sdate(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Sex() -> None:
    '''Validate that the `Sex` structure rejects a value not in its payload datatype.'''
    m = gc.Sex(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Snote() -> None:
    '''Validate that the `Snote` structure rejects a value not in its payload datatype.'''
    m = gc.Snote(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_SHARED_NOTE_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_SourEven() -> None:
    '''Validate that the `SourEven` structure rejects a value not in its payload datatype.'''
    m = gc.SourEven(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Sour() -> None:
    '''Validate that the `Sour` structure rejects a value not in its payload datatype.'''
    m = gc.Sour(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_SOURCE_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Spfx() -> None:
    '''Validate that the `Spfx` structure rejects a value not in its payload datatype.'''
    m = gc.Spfx(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Ssn() -> None:
    '''Validate that the `Ssn` structure rejects a value not in its payload datatype.'''
    m = gc.Ssn(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Stae() -> None:
    '''Validate that the `Stae` structure rejects a value not in its payload datatype.'''
    m = gc.Stae(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_SubmLang() -> None:
    '''Validate that the `SubmLang` structure rejects a value not in its payload datatype.'''
    m = gc.SubmLang(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Subm() -> None:
    '''Validate that the `Subm` structure rejects a value not in its payload datatype.'''
    m = gc.Subm(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_SUBMITTER_XREF.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Surn() -> None:
    '''Validate that the `Surn` structure rejects a value not in its payload datatype.'''
    m = gc.Surn(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Tag() -> None:
    '''Validate that the `Tag` structure rejects a value not in its payload datatype.'''
    m = gc.Tag(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Temp() -> None:
    '''Validate that the `Temp` structure rejects a value not in its payload datatype.'''
    m = gc.Temp(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Text() -> None:
    '''Validate that the `Text` structure rejects a value not in its payload datatype.'''
    m = gc.Text(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Time() -> None:
    '''Validate that the `Time` structure rejects a value not in its payload datatype.'''
    m = gc.Time(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Titl() -> None:
    '''Validate that the `Titl` structure rejects a value not in its payload datatype.'''
    m = gc.Titl(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Top() -> None:
    '''Validate that the `Top` structure rejects a value not in its payload datatype.'''
    m = gc.Top(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_INTEGER.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Type() -> None:
    '''Validate that the `Type` structure rejects a value not in its payload datatype.'''
    m = gc.Type(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Uid() -> None:
    '''Validate that the `Uid` structure rejects a value not in its payload datatype.'''
    m = gc.Uid(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Vers() -> None:
    '''Validate that the `Vers` structure rejects a value not in its payload datatype.'''
    m = gc.Vers(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Width() -> None:
    '''Validate that the `Width` structure rejects a value not in its payload datatype.'''
    m = gc.Width(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_INTEGER.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Will() -> None:
    '''Validate that the `Will` structure rejects a value not in its payload datatype.'''
    m = gc.Will(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()


def test_bad_payload_Www() -> None:
    '''Validate that the `Www` structure rejects a value not in its payload datatype.'''
    m = gc.Www(-1)
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_STRING.format('-1', m.class_name))
    ):
        assert m.validate()
