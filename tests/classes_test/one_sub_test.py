'''This module contains One Substructure tests to be run with pytest.

The file was generated by methods of the `Tests` class in the `genedata.generate` module.

DO NOT MODIFY THIS FILE.
'''

from genedata.build import Genealogy   # noqa: I001
import genedata.classes7 as gc


g = Genealogy('test')
fam = g.family_xref('1')
indi = g.individual_xref('1')
obje = g.multimedia_xref('1')
repo = g.repository_xref('1')
snote = g.shared_note_xref('1', 'a note')
sour = g.source_xref('1')
subm = g.submitter_xref('1')


def test_one_substructure_Adop() -> None:
    '''Validate the `Adop` structure with a value and one substructure.'''
    m = gc.Adop('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Age() -> None:
    '''Validate the `Age` structure with a value and one substructure.'''
    m = gc.Age('> 10y 2m 1d', gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_Alia() -> None:
    '''Validate the `Alia` structure with a value and one substructure.'''
    m = gc.Alia(indi, gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_Anul() -> None:
    '''Validate the `Anul` structure with a value and one substructure.'''
    m = gc.Anul('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Bapm() -> None:
    '''Validate the `Bapm` structure with a value and one substructure.'''
    m = gc.Bapm('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Barm() -> None:
    '''Validate the `Barm` structure with a value and one substructure.'''
    m = gc.Barm('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Basm() -> None:
    '''Validate the `Basm` structure with a value and one substructure.'''
    m = gc.Basm('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Birt() -> None:
    '''Validate the `Birt` structure with a value and one substructure.'''
    m = gc.Birt('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Bles() -> None:
    '''Validate the `Bles` structure with a value and one substructure.'''
    m = gc.Bles('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Buri() -> None:
    '''Validate the `Buri` structure with a value and one substructure.'''
    m = gc.Buri('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Cast() -> None:
    '''Validate the `Cast` structure with a value and one substructure.'''
    m = gc.Cast('abc', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Chil() -> None:
    '''Validate the `Chil` structure with a value and one substructure.'''
    m = gc.Chil(indi, gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_Chr() -> None:
    '''Validate the `Chr` structure with a value and one substructure.'''
    m = gc.Chr('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Chra() -> None:
    '''Validate the `Chra` structure with a value and one substructure.'''
    m = gc.Chra('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Conf() -> None:
    '''Validate the `Conf` structure with a value and one substructure.'''
    m = gc.Conf('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Corp() -> None:
    '''Validate the `Corp` structure with a value and one substructure.'''
    m = gc.Corp('abc', gc.Phon('+1 123 4567 8901'))
    assert m.validate()


def test_one_substructure_Crem() -> None:
    '''Validate the `Crem` structure with a value and one substructure.'''
    m = gc.Crem('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_DataEvenDate() -> None:
    '''Validate the `DataEvenDate` structure with a value and one substructure.'''
    m = gc.DataEvenDate('FROM 1 JAN 2000 TO 1 JAN 2001', gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_Date() -> None:
    '''Validate the `Date` structure with a value and one substructure.'''
    m = gc.Date('1 JAN 2000', gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_Deat() -> None:
    '''Validate the `Deat` structure with a value and one substructure.'''
    m = gc.Deat('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Div() -> None:
    '''Validate the `Div` structure with a value and one substructure.'''
    m = gc.Div('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Divf() -> None:
    '''Validate the `Divf` structure with a value and one substructure.'''
    m = gc.Divf('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Dscr() -> None:
    '''Validate the `Dscr` structure with a value and one substructure.'''
    m = gc.Dscr('abc', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Educ() -> None:
    '''Validate the `Educ` structure with a value and one substructure.'''
    m = gc.Educ('abc', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Emig() -> None:
    '''Validate the `Emig` structure with a value and one substructure.'''
    m = gc.Emig('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Enga() -> None:
    '''Validate the `Enga` structure with a value and one substructure.'''
    m = gc.Enga('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_FamCens() -> None:
    '''Validate the `FamCens` structure with a value and one substructure.'''
    m = gc.FamCens('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_FamHusb() -> None:
    '''Validate the `FamHusb` structure with a value and one substructure.'''
    m = gc.FamHusb(indi, gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_FamNchi() -> None:
    '''Validate the `FamNchi` structure with a value and one substructure.'''
    m = gc.FamNchi(1, gc.Note('hello'))
    assert m.validate()


def test_one_substructure_FamResi() -> None:
    '''Validate the `FamResi` structure with a value and one substructure.'''
    m = gc.FamResi('abc', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_FamWife() -> None:
    '''Validate the `FamWife` structure with a value and one substructure.'''
    m = gc.FamWife(indi, gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_FamcAdop() -> None:
    '''Validate the `FamcAdop` structure with a value and one substructure.'''
    m = gc.FamcAdop('HUSB', gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_FamcStat() -> None:
    '''Validate the `FamcStat` structure with a value and one substructure.'''
    m = gc.FamcStat('CHALLENGED', gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_Fams() -> None:
    '''Validate the `Fams` structure with a value and one substructure.'''
    m = gc.Fams(fam, gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Fcom() -> None:
    '''Validate the `Fcom` structure with a value and one substructure.'''
    m = gc.Fcom('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Grad() -> None:
    '''Validate the `Grad` structure with a value and one substructure.'''
    m = gc.Grad('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_HeadSourData() -> None:
    '''Validate the `HeadSourData` structure with a value and one substructure.'''
    m = gc.HeadSourData('abc', gc.DateExact('1 JAN 2000'))
    assert m.validate()


def test_one_substructure_Immi() -> None:
    '''Validate the `Immi` structure with a value and one substructure.'''
    m = gc.Immi('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_IndiCens() -> None:
    '''Validate the `IndiCens` structure with a value and one substructure.'''
    m = gc.IndiCens('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_IndiFamc() -> None:
    '''Validate the `IndiFamc` structure with a value and one substructure.'''
    m = gc.IndiFamc(fam, gc.Note('hello'))
    assert m.validate()


def test_one_substructure_IndiName() -> None:
    '''Validate the `IndiName` structure with a value and one substructure.'''
    m = gc.IndiName('John /Doe/', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_IndiNchi() -> None:
    '''Validate the `IndiNchi` structure with a value and one substructure.'''
    m = gc.IndiNchi(1, gc.Note('hello'))
    assert m.validate()


def test_one_substructure_IndiReli() -> None:
    '''Validate the `IndiReli` structure with a value and one substructure.'''
    m = gc.IndiReli('abc', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_IndiResi() -> None:
    '''Validate the `IndiResi` structure with a value and one substructure.'''
    m = gc.IndiResi('abc', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_IndiTitl() -> None:
    '''Validate the `IndiTitl` structure with a value and one substructure.'''
    m = gc.IndiTitl('abc', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Marb() -> None:
    '''Validate the `Marb` structure with a value and one substructure.'''
    m = gc.Marb('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Marc() -> None:
    '''Validate the `Marc` structure with a value and one substructure.'''
    m = gc.Marc('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Marl() -> None:
    '''Validate the `Marl` structure with a value and one substructure.'''
    m = gc.Marl('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Marr() -> None:
    '''Validate the `Marr` structure with a value and one substructure.'''
    m = gc.Marr('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Mars() -> None:
    '''Validate the `Mars` structure with a value and one substructure.'''
    m = gc.Mars('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Medi() -> None:
    '''Validate the `Medi` structure with a value and one substructure.'''
    m = gc.Medi('AUDIO', gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_NameType() -> None:
    '''Validate the `NameType` structure with a value and one substructure.'''
    m = gc.NameType('AKA', gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_Nati() -> None:
    '''Validate the `Nati` structure with a value and one substructure.'''
    m = gc.Nati('abc', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Natu() -> None:
    '''Validate the `Natu` structure with a value and one substructure.'''
    m = gc.Natu('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Nmr() -> None:
    '''Validate the `Nmr` structure with a value and one substructure.'''
    m = gc.Nmr(1, gc.Note('hello'))
    assert m.validate()


def test_one_substructure_NoDate() -> None:
    '''Validate the `NoDate` structure with a value and one substructure.'''
    m = gc.NoDate('FROM 1 JAN 2000 TO 1 JAN 2001', gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_No() -> None:
    '''Validate the `No` structure with a value and one substructure.'''
    m = gc.No('CENS', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_NoteTran() -> None:
    '''Validate the `NoteTran` structure with a value and one substructure.'''
    m = gc.NoteTran('abc', gc.Lang('en-US'))
    assert m.validate()


def test_one_substructure_Note() -> None:
    '''Validate the `Note` structure with a value and one substructure.'''
    m = gc.Note('abc', gc.Lang('en-US'))
    assert m.validate()


def test_one_substructure_Occu() -> None:
    '''Validate the `Occu` structure with a value and one substructure.'''
    m = gc.Occu('abc', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Ordn() -> None:
    '''Validate the `Ordn` structure with a value and one substructure.'''
    m = gc.Ordn('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Pedi() -> None:
    '''Validate the `Pedi` structure with a value and one substructure.'''
    m = gc.Pedi('ADOPTED', gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_Plac() -> None:
    '''Validate the `Plac` structure with a value and one substructure.'''
    m = gc.Plac('text', gc.Lang('en-US'))
    assert m.validate()


def test_one_substructure_Prob() -> None:
    '''Validate the `Prob` structure with a value and one substructure.'''
    m = gc.Prob('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Prop() -> None:
    '''Validate the `Prop` structure with a value and one substructure.'''
    m = gc.Prop('abc', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_RecordSnote() -> None:
    '''Validate the `RecordSnote` structure with a value and one substructure.'''
    m = gc.RecordSnote(snote, gc.Lang('en-US'))
    assert m.validate()


def test_one_substructure_Repo() -> None:
    '''Validate the `Repo` structure with a value and one substructure.'''
    m = gc.Repo(repo, gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Reti() -> None:
    '''Validate the `Reti` structure with a value and one substructure.'''
    m = gc.Reti('Y', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Role() -> None:
    '''Validate the `Role` structure with a value and one substructure.'''
    m = gc.Role('CHIL', gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_Sdate() -> None:
    '''Validate the `Sdate` structure with a value and one substructure.'''
    m = gc.Sdate('1 JAN 2000', gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_SourEven() -> None:
    '''Validate the `SourEven` structure with a value and one substructure.'''
    m = gc.SourEven('CENS', gc.Phrase('hi'))
    assert m.validate()


def test_one_substructure_Sour() -> None:
    '''Validate the `Sour` structure with a value and one substructure.'''
    m = gc.Sour(sour, gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Ssn() -> None:
    '''Validate the `Ssn` structure with a value and one substructure.'''
    m = gc.Ssn('abc', gc.Note('hello'))
    assert m.validate()


def test_one_substructure_Text() -> None:
    '''Validate the `Text` structure with a value and one substructure.'''
    m = gc.Text('abc', gc.Lang('en-US'))
    assert m.validate()


def test_one_substructure_Will() -> None:
    '''Validate the `Will` structure with a value and one substructure.'''
    m = gc.Will('Y', gc.Note('hello'))
    assert m.validate()
