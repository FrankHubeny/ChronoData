'''This module contains Not Permitted tests to be run with pytest.

The file was generated by methods of the `Tests` class in the `genedata.generate` module.

DO NOT MODIFY THIS FILE.
'''

import pytest   # noqa: I001
import re

import genedata.classes7 as gc
from genedata.build import Genealogy
from genedata.messages import Msg


g = Genealogy('test')
fam = g.family_xref('1')
indi = g.individual_xref('1')
obje = g.multimedia_xref('1')
repo = g.repository_xref('1')
snote = g.shared_note_xref('1', 'a note')
sour = g.source_xref('1')
subm = g.submitter_xref('1')


def test_not_permitted_Abbr() -> None:
    '''Validate the `Abbr` structure with a value and required substructures.'''
    m = gc.Abbr('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Addr() -> None:
    '''Validate the `Addr` structure with a value and required substructures.'''
    m = gc.Addr('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_AdopFamc() -> None:
    '''Validate the `AdopFamc` structure with a value and required substructures.'''
    m = gc.AdopFamc(fam, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Adop() -> None:
    '''Validate the `Adop` structure with a value and required substructures.'''
    m = gc.Adop('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Adr1() -> None:
    '''Validate the `Adr1` structure with a value and required substructures.'''
    m = gc.Adr1('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Adr2() -> None:
    '''Validate the `Adr2` structure with a value and required substructures.'''
    m = gc.Adr2('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Adr3() -> None:
    '''Validate the `Adr3` structure with a value and required substructures.'''
    m = gc.Adr3('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Age() -> None:
    '''Validate the `Age` structure with a value and required substructures.'''
    m = gc.Age('> 10y 2m 1d', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Agnc() -> None:
    '''Validate the `Agnc` structure with a value and required substructures.'''
    m = gc.Agnc('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Alia() -> None:
    '''Validate the `Alia` structure with a value and required substructures.'''
    m = gc.Alia(indi, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Anci() -> None:
    '''Validate the `Anci` structure with a value and required substructures.'''
    m = gc.Anci(subm, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Anul() -> None:
    '''Validate the `Anul` structure with a value and required substructures.'''
    m = gc.Anul('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Asso() -> None:
    '''Validate the `Asso` structure with a value and required substructures.'''
    m = gc.Asso(indi, [gc.RecordIndi(indi), gc.Role('CHIL')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Auth() -> None:
    '''Validate the `Auth` structure with a value and required substructures.'''
    m = gc.Auth('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Bapl() -> None:
    '''Validate the `Bapl` structure with a value and required substructures.'''
    m = gc.Bapl(gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Bapm() -> None:
    '''Validate the `Bapm` structure with a value and required substructures.'''
    m = gc.Bapm('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Barm() -> None:
    '''Validate the `Barm` structure with a value and required substructures.'''
    m = gc.Barm('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Basm() -> None:
    '''Validate the `Basm` structure with a value and required substructures.'''
    m = gc.Basm('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Birt() -> None:
    '''Validate the `Birt` structure with a value and required substructures.'''
    m = gc.Birt('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Bles() -> None:
    '''Validate the `Bles` structure with a value and required substructures.'''
    m = gc.Bles('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Buri() -> None:
    '''Validate the `Buri` structure with a value and required substructures.'''
    m = gc.Buri('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Caln() -> None:
    '''Validate the `Caln` structure with a value and required substructures.'''
    m = gc.Caln('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Cast() -> None:
    '''Validate the `Cast` structure with a value and required substructures.'''
    m = gc.Cast('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Caus() -> None:
    '''Validate the `Caus` structure with a value and required substructures.'''
    m = gc.Caus('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Chan() -> None:
    '''Validate the `Chan` structure with a value and required substructures.'''
    m = gc.Chan([gc.RecordIndi(indi), gc.DateExact('1 JAN 2000')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Chil() -> None:
    '''Validate the `Chil` structure with a value and required substructures.'''
    m = gc.Chil(indi, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Chr() -> None:
    '''Validate the `Chr` structure with a value and required substructures.'''
    m = gc.Chr('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Chra() -> None:
    '''Validate the `Chra` structure with a value and required substructures.'''
    m = gc.Chra('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_City() -> None:
    '''Validate the `City` structure with a value and required substructures.'''
    m = gc.City('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Conf() -> None:
    '''Validate the `Conf` structure with a value and required substructures.'''
    m = gc.Conf('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Conl() -> None:
    '''Validate the `Conl` structure with a value and required substructures.'''
    m = gc.Conl(gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Copr() -> None:
    '''Validate the `Copr` structure with a value and required substructures.'''
    m = gc.Copr('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Corp() -> None:
    '''Validate the `Corp` structure with a value and required substructures.'''
    m = gc.Corp('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Crea() -> None:
    '''Validate the `Crea` structure with a value and required substructures.'''
    m = gc.Crea([gc.RecordIndi(indi), gc.DateExact('1 JAN 2000')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Crem() -> None:
    '''Validate the `Crem` structure with a value and required substructures.'''
    m = gc.Crem('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Crop() -> None:
    '''Validate the `Crop` structure with a value and required substructures.'''
    m = gc.Crop(gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Ctry() -> None:
    '''Validate the `Ctry` structure with a value and required substructures.'''
    m = gc.Ctry('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_DataEvenDate() -> None:
    '''Validate the `DataEvenDate` structure with a value and required substructures.'''
    m = gc.DataEvenDate('FROM 1 JAN 2000 TO 1 JAN 2001', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_DataEven() -> None:
    '''Validate the `DataEven` structure with a value and required substructures.'''
    m = gc.DataEven('CENS', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Data() -> None:
    '''Validate the `Data` structure with a value and required substructures.'''
    m = gc.Data(gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_DateExact() -> None:
    '''Validate the `DateExact` structure with a value and required substructures.'''
    m = gc.DateExact('1 JAN 2000', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Date() -> None:
    '''Validate the `Date` structure with a value and required substructures.'''
    m = gc.Date('1 JAN 2000', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Deat() -> None:
    '''Validate the `Deat` structure with a value and required substructures.'''
    m = gc.Deat('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Desi() -> None:
    '''Validate the `Desi` structure with a value and required substructures.'''
    m = gc.Desi(subm, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Dest() -> None:
    '''Validate the `Dest` structure with a value and required substructures.'''
    m = gc.Dest('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Div() -> None:
    '''Validate the `Div` structure with a value and required substructures.'''
    m = gc.Div('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Divf() -> None:
    '''Validate the `Divf` structure with a value and required substructures.'''
    m = gc.Divf('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Dscr() -> None:
    '''Validate the `Dscr` structure with a value and required substructures.'''
    m = gc.Dscr('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Educ() -> None:
    '''Validate the `Educ` structure with a value and required substructures.'''
    m = gc.Educ('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Email() -> None:
    '''Validate the `Email` structure with a value and required substructures.'''
    m = gc.Email('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Emig() -> None:
    '''Validate the `Emig` structure with a value and required substructures.'''
    m = gc.Emig('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Endl() -> None:
    '''Validate the `Endl` structure with a value and required substructures.'''
    m = gc.Endl(gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Enga() -> None:
    '''Validate the `Enga` structure with a value and required substructures.'''
    m = gc.Enga('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_ExidType() -> None:
    '''Validate the `ExidType` structure with a value and required substructures.'''
    m = gc.ExidType('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Exid() -> None:
    '''Validate the `Exid` structure with a value and required substructures.'''
    m = gc.Exid('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_FamCens() -> None:
    '''Validate the `FamCens` structure with a value and required substructures.'''
    m = gc.FamCens('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_FamEven() -> None:
    '''Validate the `FamEven` structure with a value and required substructures.'''
    m = gc.FamEven('abc', [gc.RecordIndi(indi), gc.Type('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_FamFact() -> None:
    '''Validate the `FamFact` structure with a value and required substructures.'''
    m = gc.FamFact('abc', [gc.RecordIndi(indi), gc.Type('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_FamHusb() -> None:
    '''Validate the `FamHusb` structure with a value and required substructures.'''
    m = gc.FamHusb(indi, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_FamNchi() -> None:
    '''Validate the `FamNchi` structure with a value and required substructures.'''
    m = gc.FamNchi(1, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_FamResi() -> None:
    '''Validate the `FamResi` structure with a value and required substructures.'''
    m = gc.FamResi('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_FamWife() -> None:
    '''Validate the `FamWife` structure with a value and required substructures.'''
    m = gc.FamWife(indi, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_FamcAdop() -> None:
    '''Validate the `FamcAdop` structure with a value and required substructures.'''
    m = gc.FamcAdop('HUSB', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_FamcStat() -> None:
    '''Validate the `FamcStat` structure with a value and required substructures.'''
    m = gc.FamcStat('CHALLENGED', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Famc() -> None:
    '''Validate the `Famc` structure with a value and required substructures.'''
    m = gc.Famc(fam, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Fams() -> None:
    '''Validate the `Fams` structure with a value and required substructures.'''
    m = gc.Fams(fam, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Fax() -> None:
    '''Validate the `Fax` structure with a value and required substructures.'''
    m = gc.Fax('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Fcom() -> None:
    '''Validate the `Fcom` structure with a value and required substructures.'''
    m = gc.Fcom('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_FileTran() -> None:
    '''Validate the `FileTran` structure with a value and required substructures.'''
    m = gc.FileTran('dir/to/somewhere/', [gc.RecordIndi(indi), gc.Form('text/html')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_File() -> None:
    '''Validate the `File` structure with a value and required substructures.'''
    m = gc.File('dir/to/somewhere/', [gc.RecordIndi(indi), gc.Form('text/html')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Form() -> None:
    '''Validate the `Form` structure with a value and required substructures.'''
    m = gc.Form('text/html', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_GedcVers() -> None:
    '''Validate the `GedcVers` structure with a value and required substructures.'''
    m = gc.GedcVers('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Gedc() -> None:
    '''Validate the `Gedc` structure with a value and required substructures.'''
    m = gc.Gedc([gc.RecordIndi(indi), gc.GedcVers('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Givn() -> None:
    '''Validate the `Givn` structure with a value and required substructures.'''
    m = gc.Givn('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Grad() -> None:
    '''Validate the `Grad` structure with a value and required substructures.'''
    m = gc.Grad('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_HeadDate() -> None:
    '''Validate the `HeadDate` structure with a value and required substructures.'''
    m = gc.HeadDate('1 JAN 2000', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_HeadLang() -> None:
    '''Validate the `HeadLang` structure with a value and required substructures.'''
    m = gc.HeadLang('en-US', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_HeadPlacForm() -> None:
    '''Validate the `HeadPlacForm` structure with a value and required substructures.'''
    m = gc.HeadPlacForm('text', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_HeadPlac() -> None:
    '''Validate the `HeadPlac` structure with a value and required substructures.'''
    m = gc.HeadPlac([gc.RecordIndi(indi), gc.HeadPlacForm('text')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_HeadSourData() -> None:
    '''Validate the `HeadSourData` structure with a value and required substructures.'''
    m = gc.HeadSourData('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_HeadSour() -> None:
    '''Validate the `HeadSour` structure with a value and required substructures.'''
    m = gc.HeadSour('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Head() -> None:
    '''Validate the `Head` structure with a value and required substructures.'''
    m = gc.Head([gc.RecordIndi(indi), gc.Gedc(gc.GedcVers('abc'))])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Height() -> None:
    '''Validate the `Height` structure with a value and required substructures.'''
    m = gc.Height(1, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Husb() -> None:
    '''Validate the `Husb` structure with a value and required substructures.'''
    m = gc.Husb([gc.RecordIndi(indi), gc.Age('> 10y 2m 1d')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Idno() -> None:
    '''Validate the `Idno` structure with a value and required substructures.'''
    m = gc.Idno('abc', [gc.RecordIndi(indi), gc.Type('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Immi() -> None:
    '''Validate the `Immi` structure with a value and required substructures.'''
    m = gc.Immi('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_IndiCens() -> None:
    '''Validate the `IndiCens` structure with a value and required substructures.'''
    m = gc.IndiCens('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_IndiEven() -> None:
    '''Validate the `IndiEven` structure with a value and required substructures.'''
    m = gc.IndiEven('abc', [gc.RecordIndi(indi), gc.Type('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_IndiFact() -> None:
    '''Validate the `IndiFact` structure with a value and required substructures.'''
    m = gc.IndiFact('abc', [gc.RecordIndi(indi), gc.Type('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_IndiFamc() -> None:
    '''Validate the `IndiFamc` structure with a value and required substructures.'''
    m = gc.IndiFamc(fam, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_IndiName() -> None:
    '''Validate the `IndiName` structure with a value and required substructures.'''
    m = gc.IndiName('John /Doe/', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_IndiNchi() -> None:
    '''Validate the `IndiNchi` structure with a value and required substructures.'''
    m = gc.IndiNchi(1, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_IndiReli() -> None:
    '''Validate the `IndiReli` structure with a value and required substructures.'''
    m = gc.IndiReli('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_IndiResi() -> None:
    '''Validate the `IndiResi` structure with a value and required substructures.'''
    m = gc.IndiResi('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_IndiTitl() -> None:
    '''Validate the `IndiTitl` structure with a value and required substructures.'''
    m = gc.IndiTitl('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Inil() -> None:
    '''Validate the `Inil` structure with a value and required substructures.'''
    m = gc.Inil(gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Lang() -> None:
    '''Validate the `Lang` structure with a value and required substructures.'''
    m = gc.Lang('en-US', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Lati() -> None:
    '''Validate the `Lati` structure with a value and required substructures.'''
    m = gc.Lati('N10.1', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Left() -> None:
    '''Validate the `Left` structure with a value and required substructures.'''
    m = gc.Left(1, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Long() -> None:
    '''Validate the `Long` structure with a value and required substructures.'''
    m = gc.Long('E10.1', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Map() -> None:
    '''Validate the `Map` structure with a value and required substructures.'''
    m = gc.Map([gc.RecordIndi(indi), gc.Lati('N10.1'), gc.Long('E10.1')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Marb() -> None:
    '''Validate the `Marb` structure with a value and required substructures.'''
    m = gc.Marb('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Marc() -> None:
    '''Validate the `Marc` structure with a value and required substructures.'''
    m = gc.Marc('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Marl() -> None:
    '''Validate the `Marl` structure with a value and required substructures.'''
    m = gc.Marl('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Marr() -> None:
    '''Validate the `Marr` structure with a value and required substructures.'''
    m = gc.Marr('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Mars() -> None:
    '''Validate the `Mars` structure with a value and required substructures.'''
    m = gc.Mars('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Medi() -> None:
    '''Validate the `Medi` structure with a value and required substructures.'''
    m = gc.Medi('AUDIO', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Mime() -> None:
    '''Validate the `Mime` structure with a value and required substructures.'''
    m = gc.Mime('text/html', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_NameTran() -> None:
    '''Validate the `NameTran` structure with a value and required substructures.'''
    m = gc.NameTran('John /Doe/', [gc.RecordIndi(indi), gc.Lang('en-US')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_NameType() -> None:
    '''Validate the `NameType` structure with a value and required substructures.'''
    m = gc.NameType('AKA', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Name() -> None:
    '''Validate the `Name` structure with a value and required substructures.'''
    m = gc.Name('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Nati() -> None:
    '''Validate the `Nati` structure with a value and required substructures.'''
    m = gc.Nati('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Natu() -> None:
    '''Validate the `Natu` structure with a value and required substructures.'''
    m = gc.Natu('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Nick() -> None:
    '''Validate the `Nick` structure with a value and required substructures.'''
    m = gc.Nick('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Nmr() -> None:
    '''Validate the `Nmr` structure with a value and required substructures.'''
    m = gc.Nmr(1, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_NoDate() -> None:
    '''Validate the `NoDate` structure with a value and required substructures.'''
    m = gc.NoDate('FROM 1 JAN 2000 TO 1 JAN 2001', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_No() -> None:
    '''Validate the `No` structure with a value and required substructures.'''
    m = gc.No('CENS', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_NoteTran() -> None:
    '''Validate the `NoteTran` structure with a value and required substructures.'''
    m = gc.NoteTran('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Note() -> None:
    '''Validate the `Note` structure with a value and required substructures.'''
    m = gc.Note('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Npfx() -> None:
    '''Validate the `Npfx` structure with a value and required substructures.'''
    m = gc.Npfx('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Nsfx() -> None:
    '''Validate the `Nsfx` structure with a value and required substructures.'''
    m = gc.Nsfx('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Obje() -> None:
    '''Validate the `Obje` structure with a value and required substructures.'''
    m = gc.Obje(obje, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Occu() -> None:
    '''Validate the `Occu` structure with a value and required substructures.'''
    m = gc.Occu('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_OrdStat() -> None:
    '''Validate the `OrdStat` structure with a value and required substructures.'''
    m = gc.OrdStat('BIC', [gc.RecordIndi(indi), gc.DateExact('1 JAN 2000')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Ordn() -> None:
    '''Validate the `Ordn` structure with a value and required substructures.'''
    m = gc.Ordn('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Page() -> None:
    '''Validate the `Page` structure with a value and required substructures.'''
    m = gc.Page('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Pedi() -> None:
    '''Validate the `Pedi` structure with a value and required substructures.'''
    m = gc.Pedi('ADOPTED', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Phon() -> None:
    '''Validate the `Phon` structure with a value and required substructures.'''
    m = gc.Phon('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Phrase() -> None:
    '''Validate the `Phrase` structure with a value and required substructures.'''
    m = gc.Phrase('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_PlacForm() -> None:
    '''Validate the `PlacForm` structure with a value and required substructures.'''
    m = gc.PlacForm('text', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_PlacTran() -> None:
    '''Validate the `PlacTran` structure with a value and required substructures.'''
    m = gc.PlacTran('text', [gc.RecordIndi(indi), gc.Lang('en-US')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Plac() -> None:
    '''Validate the `Plac` structure with a value and required substructures.'''
    m = gc.Plac('text', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Post() -> None:
    '''Validate the `Post` structure with a value and required substructures.'''
    m = gc.Post('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Prob() -> None:
    '''Validate the `Prob` structure with a value and required substructures.'''
    m = gc.Prob('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Prop() -> None:
    '''Validate the `Prop` structure with a value and required substructures.'''
    m = gc.Prop('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Publ() -> None:
    '''Validate the `Publ` structure with a value and required substructures.'''
    m = gc.Publ('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Quay() -> None:
    '''Validate the `Quay` structure with a value and required substructures.'''
    m = gc.Quay('0', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_RecordFam() -> None:
    '''Validate the `RecordFam` structure with a value and required substructures.'''
    m = gc.RecordFam(fam, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_RecordIndi() -> None:
    '''Validate the `RecordIndi` structure with a value and required substructures.'''
    m = gc.RecordIndi(indi, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_RecordObje() -> None:
    '''Validate the `RecordObje` structure with a value and required substructures.'''
    m = gc.RecordObje(obje, [gc.RecordIndi(indi), gc.File('dir/to/somewhere/', gc.Form('text/html'))])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_RecordRepo() -> None:
    '''Validate the `RecordRepo` structure with a value and required substructures.'''
    m = gc.RecordRepo(repo, [gc.RecordIndi(indi), gc.Name('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_RecordSnote() -> None:
    '''Validate the `RecordSnote` structure with a value and required substructures.'''
    m = gc.RecordSnote(snote, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_RecordSour() -> None:
    '''Validate the `RecordSour` structure with a value and required substructures.'''
    m = gc.RecordSour(sour, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_RecordSubm() -> None:
    '''Validate the `RecordSubm` structure with a value and required substructures.'''
    m = gc.RecordSubm(subm, [gc.RecordIndi(indi), gc.Name('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Refn() -> None:
    '''Validate the `Refn` structure with a value and required substructures.'''
    m = gc.Refn('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Reli() -> None:
    '''Validate the `Reli` structure with a value and required substructures.'''
    m = gc.Reli('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Repo() -> None:
    '''Validate the `Repo` structure with a value and required substructures.'''
    m = gc.Repo(repo, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Resn() -> None:
    '''Validate the `Resn` structure with a value and required substructures.'''
    m = gc.Resn('CONFIDENTIAL', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Reti() -> None:
    '''Validate the `Reti` structure with a value and required substructures.'''
    m = gc.Reti('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Role() -> None:
    '''Validate the `Role` structure with a value and required substructures.'''
    m = gc.Role('CHIL', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Schma() -> None:
    '''Validate the `Schma` structure with a value and required substructures.'''
    m = gc.Schma(gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Sdate() -> None:
    '''Validate the `Sdate` structure with a value and required substructures.'''
    m = gc.Sdate('1 JAN 2000', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Sex() -> None:
    '''Validate the `Sex` structure with a value and required substructures.'''
    m = gc.Sex('M', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Slgc() -> None:
    '''Validate the `Slgc` structure with a value and required substructures.'''
    m = gc.Slgc([gc.RecordIndi(indi), gc.Famc(fam)])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Slgs() -> None:
    '''Validate the `Slgs` structure with a value and required substructures.'''
    m = gc.Slgs(gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Snote() -> None:
    '''Validate the `Snote` structure with a value and required substructures.'''
    m = gc.Snote(snote, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_SourData() -> None:
    '''Validate the `SourData` structure with a value and required substructures.'''
    m = gc.SourData(gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_SourEven() -> None:
    '''Validate the `SourEven` structure with a value and required substructures.'''
    m = gc.SourEven('CENS', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Sour() -> None:
    '''Validate the `Sour` structure with a value and required substructures.'''
    m = gc.Sour(sour, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Spfx() -> None:
    '''Validate the `Spfx` structure with a value and required substructures.'''
    m = gc.Spfx('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Ssn() -> None:
    '''Validate the `Ssn` structure with a value and required substructures.'''
    m = gc.Ssn('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Stae() -> None:
    '''Validate the `Stae` structure with a value and required substructures.'''
    m = gc.Stae('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_SubmLang() -> None:
    '''Validate the `SubmLang` structure with a value and required substructures.'''
    m = gc.SubmLang('en-US', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Subm() -> None:
    '''Validate the `Subm` structure with a value and required substructures.'''
    m = gc.Subm(subm, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Surn() -> None:
    '''Validate the `Surn` structure with a value and required substructures.'''
    m = gc.Surn('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Tag() -> None:
    '''Validate the `Tag` structure with a value and required substructures.'''
    m = gc.Tag('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Temp() -> None:
    '''Validate the `Temp` structure with a value and required substructures.'''
    m = gc.Temp('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Text() -> None:
    '''Validate the `Text` structure with a value and required substructures.'''
    m = gc.Text('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Time() -> None:
    '''Validate the `Time` structure with a value and required substructures.'''
    m = gc.Time('12:12:12', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Titl() -> None:
    '''Validate the `Titl` structure with a value and required substructures.'''
    m = gc.Titl('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Top() -> None:
    '''Validate the `Top` structure with a value and required substructures.'''
    m = gc.Top(1, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Type() -> None:
    '''Validate the `Type` structure with a value and required substructures.'''
    m = gc.Type('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Uid() -> None:
    '''Validate the `Uid` structure with a value and required substructures.'''
    m = gc.Uid('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Vers() -> None:
    '''Validate the `Vers` structure with a value and required substructures.'''
    m = gc.Vers('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Width() -> None:
    '''Validate the `Width` structure with a value and required substructures.'''
    m = gc.Width(1, gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Wife() -> None:
    '''Validate the `Wife` structure with a value and required substructures.'''
    m = gc.Wife([gc.RecordIndi(indi), gc.Age('> 10y 2m 1d')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Will() -> None:
    '''Validate the `Will` structure with a value and required substructures.'''
    m = gc.Will('Y', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()


def test_not_permitted_Www() -> None:
    '''Validate the `Www` structure with a value and required substructures.'''
    m = gc.Www('abc', gc.RecordIndi(indi))
    with pytest.raises(
        ValueError, match=re.escape(Msg.NOT_PERMITTED.format('RecordIndi', m.permitted, m.class_name))
    ):
        assert m.validate()
