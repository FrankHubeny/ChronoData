'''This module contains All tests to be run with pytest.

The file was generated by methods of the `Tests` class in the `genedata.generate` module.

DO NOT MODIFY THIS FILE.
'''

from genedata.build import Genealogy   # noqa: I001
import genedata.classes70 as gc


g = Genealogy()
fam = g.family_xref('1')
indi = g.individual_xref('2')
obje = g.multimedia_xref('3')
repo = g.repository_xref('4')
snote = g.shared_note_xref('5', 'a note')
sour = g.source_xref('6')
subm = g.submitter_xref('7')


def test_all_Abbr() -> None:
    '''Validate the `Abbr` structure with a value and required substructures.'''
    m = gc.Abbr('abc')
    assert m.validate()


def test_all_Addr() -> None:
    '''Validate the `Addr` structure with a value and required substructures.'''
    m = gc.Addr('abc')
    assert m.validate()


def test_all_AdopFamc() -> None:
    '''Validate the `AdopFamc` structure with a value and required substructures.'''
    m = gc.AdopFamc(fam)
    assert m.validate()


def test_all_Adop() -> None:
    '''Validate the `Adop` structure with a value and required substructures.'''
    m = gc.Adop('')
    assert m.validate()


def test_all_Adr1() -> None:
    '''Validate the `Adr1` structure with a value and required substructures.'''
    m = gc.Adr1('abc')
    assert m.validate()


def test_all_Adr2() -> None:
    '''Validate the `Adr2` structure with a value and required substructures.'''
    m = gc.Adr2('abc')
    assert m.validate()


def test_all_Adr3() -> None:
    '''Validate the `Adr3` structure with a value and required substructures.'''
    m = gc.Adr3('abc')
    assert m.validate()


def test_all_Age() -> None:
    '''Validate the `Age` structure with a value and required substructures.'''
    m = gc.Age('> 10y 2m 1d')
    assert m.validate()


def test_all_Agnc() -> None:
    '''Validate the `Agnc` structure with a value and required substructures.'''
    m = gc.Agnc('abc')
    assert m.validate()


def test_all_Alia() -> None:
    '''Validate the `Alia` structure with a value and required substructures.'''
    m = gc.Alia(indi)
    assert m.validate()


def test_all_Anci() -> None:
    '''Validate the `Anci` structure with a value and required substructures.'''
    m = gc.Anci(subm)
    assert m.validate()


def test_all_Anul() -> None:
    '''Validate the `Anul` structure with a value and required substructures.'''
    m = gc.Anul('')
    assert m.validate()


def test_all_Asso() -> None:
    '''Validate the `Asso` structure with a value and required substructures.'''
    m = gc.Asso(indi, gc.Role('CHIL'))
    assert m.validate()


def test_all_Auth() -> None:
    '''Validate the `Auth` structure with a value and required substructures.'''
    m = gc.Auth('abc')
    assert m.validate()


def test_all_Bapl() -> None:
    '''Validate the `Bapl` structure with a value and required substructures.'''
    m = gc.Bapl()
    assert m.validate()


def test_all_Bapm() -> None:
    '''Validate the `Bapm` structure with a value and required substructures.'''
    m = gc.Bapm('')
    assert m.validate()


def test_all_Barm() -> None:
    '''Validate the `Barm` structure with a value and required substructures.'''
    m = gc.Barm('Y')
    assert m.validate()


def test_all_Basm() -> None:
    '''Validate the `Basm` structure with a value and required substructures.'''
    m = gc.Basm('')
    assert m.validate()


def test_all_Birt() -> None:
    '''Validate the `Birt` structure with a value and required substructures.'''
    m = gc.Birt('Y')
    assert m.validate()


def test_all_Bles() -> None:
    '''Validate the `Bles` structure with a value and required substructures.'''
    m = gc.Bles('')
    assert m.validate()


def test_all_Buri() -> None:
    '''Validate the `Buri` structure with a value and required substructures.'''
    m = gc.Buri('Y')
    assert m.validate()


def test_all_Caln() -> None:
    '''Validate the `Caln` structure with a value and required substructures.'''
    m = gc.Caln('abc')
    assert m.validate()


def test_all_Cast() -> None:
    '''Validate the `Cast` structure with a value and required substructures.'''
    m = gc.Cast('abc')
    assert m.validate()


def test_all_Caus() -> None:
    '''Validate the `Caus` structure with a value and required substructures.'''
    m = gc.Caus('abc')
    assert m.validate()


def test_all_Chan() -> None:
    '''Validate the `Chan` structure with a value and required substructures.'''
    m = gc.Chan(gc.DateExact('1 JAN 2000'))
    assert m.validate()


def test_all_Chil() -> None:
    '''Validate the `Chil` structure with a value and required substructures.'''
    m = gc.Chil(indi)
    assert m.validate()


def test_all_Chr() -> None:
    '''Validate the `Chr` structure with a value and required substructures.'''
    m = gc.Chr('Y')
    assert m.validate()


def test_all_Chra() -> None:
    '''Validate the `Chra` structure with a value and required substructures.'''
    m = gc.Chra('')
    assert m.validate()


def test_all_City() -> None:
    '''Validate the `City` structure with a value and required substructures.'''
    m = gc.City('abc')
    assert m.validate()


def test_all_Conf() -> None:
    '''Validate the `Conf` structure with a value and required substructures.'''
    m = gc.Conf('')
    assert m.validate()


def test_all_Conl() -> None:
    '''Validate the `Conl` structure with a value and required substructures.'''
    m = gc.Conl()
    assert m.validate()


def test_all_Copr() -> None:
    '''Validate the `Copr` structure with a value and required substructures.'''
    m = gc.Copr('abc')
    assert m.validate()


def test_all_Corp() -> None:
    '''Validate the `Corp` structure with a value and required substructures.'''
    m = gc.Corp('abc')
    assert m.validate()


def test_all_Crea() -> None:
    '''Validate the `Crea` structure with a value and required substructures.'''
    m = gc.Crea(gc.DateExact('1 JAN 2000'))
    assert m.validate()


def test_all_Crem() -> None:
    '''Validate the `Crem` structure with a value and required substructures.'''
    m = gc.Crem('Y')
    assert m.validate()


def test_all_Crop() -> None:
    '''Validate the `Crop` structure with a value and required substructures.'''
    m = gc.Crop()
    assert m.validate()


def test_all_Ctry() -> None:
    '''Validate the `Ctry` structure with a value and required substructures.'''
    m = gc.Ctry('abc')
    assert m.validate()


def test_all_DataEvenDate() -> None:
    '''Validate the `DataEvenDate` structure with a value and required substructures.'''
    m = gc.DataEvenDate('FROM 1 JAN 2000 TO 1 JAN 2001')
    assert m.validate()


def test_all_DataEven() -> None:
    '''Validate the `DataEven` structure with a value and required substructures.'''
    m = gc.DataEven('CENS')
    assert m.validate()


def test_all_Data() -> None:
    '''Validate the `Data` structure with a value and required substructures.'''
    m = gc.Data()
    assert m.validate()


def test_all_DateExact() -> None:
    '''Validate the `DateExact` structure with a value and required substructures.'''
    m = gc.DateExact('1 JAN 2000')
    assert m.validate()


def test_all_Date() -> None:
    '''Validate the `Date` structure with a value and required substructures.'''
    m = gc.Date('1 JAN 2000')
    assert m.validate()


def test_all_Deat() -> None:
    '''Validate the `Deat` structure with a value and required substructures.'''
    m = gc.Deat('Y')
    assert m.validate()


def test_all_Desi() -> None:
    '''Validate the `Desi` structure with a value and required substructures.'''
    m = gc.Desi(subm)
    assert m.validate()


def test_all_Dest() -> None:
    '''Validate the `Dest` structure with a value and required substructures.'''
    m = gc.Dest('abc')
    assert m.validate()


def test_all_Div() -> None:
    '''Validate the `Div` structure with a value and required substructures.'''
    m = gc.Div('')
    assert m.validate()


def test_all_Divf() -> None:
    '''Validate the `Divf` structure with a value and required substructures.'''
    m = gc.Divf('Y')
    assert m.validate()


def test_all_Dscr() -> None:
    '''Validate the `Dscr` structure with a value and required substructures.'''
    m = gc.Dscr('abc')
    assert m.validate()


def test_all_Educ() -> None:
    '''Validate the `Educ` structure with a value and required substructures.'''
    m = gc.Educ('abc')
    assert m.validate()


def test_all_Email() -> None:
    '''Validate the `Email` structure with a value and required substructures.'''
    m = gc.Email('abc')
    assert m.validate()


def test_all_Emig() -> None:
    '''Validate the `Emig` structure with a value and required substructures.'''
    m = gc.Emig('Y')
    assert m.validate()


def test_all_Endl() -> None:
    '''Validate the `Endl` structure with a value and required substructures.'''
    m = gc.Endl()
    assert m.validate()


def test_all_Enga() -> None:
    '''Validate the `Enga` structure with a value and required substructures.'''
    m = gc.Enga('Y')
    assert m.validate()


def test_all_ExidType() -> None:
    '''Validate the `ExidType` structure with a value and required substructures.'''
    m = gc.ExidType('abc')
    assert m.validate()


def test_all_Exid() -> None:
    '''Validate the `Exid` structure with a value and required substructures.'''
    m = gc.Exid('abc')
    assert m.validate()


def test_all_FamCens() -> None:
    '''Validate the `FamCens` structure with a value and required substructures.'''
    m = gc.FamCens('')
    assert m.validate()


def test_all_FamEven() -> None:
    '''Validate the `FamEven` structure with a value and required substructures.'''
    m = gc.FamEven('abc', gc.Type('abc'))
    assert m.validate()


def test_all_FamFact() -> None:
    '''Validate the `FamFact` structure with a value and required substructures.'''
    m = gc.FamFact('abc', gc.Type('abc'))
    assert m.validate()


def test_all_FamHusb() -> None:
    '''Validate the `FamHusb` structure with a value and required substructures.'''
    m = gc.FamHusb(indi)
    assert m.validate()


def test_all_FamNchi() -> None:
    '''Validate the `FamNchi` structure with a value and required substructures.'''
    m = gc.FamNchi(1)
    assert m.validate()


def test_all_FamResi() -> None:
    '''Validate the `FamResi` structure with a value and required substructures.'''
    m = gc.FamResi('abc')
    assert m.validate()


def test_all_FamWife() -> None:
    '''Validate the `FamWife` structure with a value and required substructures.'''
    m = gc.FamWife(indi)
    assert m.validate()


def test_all_FamcAdop() -> None:
    '''Validate the `FamcAdop` structure with a value and required substructures.'''
    m = gc.FamcAdop('HUSB')
    assert m.validate()


def test_all_FamcStat() -> None:
    '''Validate the `FamcStat` structure with a value and required substructures.'''
    m = gc.FamcStat('CHALLENGED')
    assert m.validate()


def test_all_Famc() -> None:
    '''Validate the `Famc` structure with a value and required substructures.'''
    m = gc.Famc(fam)
    assert m.validate()


def test_all_Fams() -> None:
    '''Validate the `Fams` structure with a value and required substructures.'''
    m = gc.Fams(fam)
    assert m.validate()


def test_all_Fax() -> None:
    '''Validate the `Fax` structure with a value and required substructures.'''
    m = gc.Fax('abc')
    assert m.validate()


def test_all_Fcom() -> None:
    '''Validate the `Fcom` structure with a value and required substructures.'''
    m = gc.Fcom('')
    assert m.validate()


def test_all_FileTran() -> None:
    '''Validate the `FileTran` structure with a value and required substructures.'''
    m = gc.FileTran('dir/to/somewhere/', gc.Form('text/html'))
    assert m.validate()


def test_all_File() -> None:
    '''Validate the `File` structure with a value and required substructures.'''
    m = gc.File('dir/to/somewhere/', gc.Form('text/html'))
    assert m.validate()


def test_all_Form() -> None:
    '''Validate the `Form` structure with a value and required substructures.'''
    m = gc.Form('text/html')
    assert m.validate()


def test_all_GedcVers() -> None:
    '''Validate the `GedcVers` structure with a value and required substructures.'''
    m = gc.GedcVers('abc')
    assert m.validate()


def test_all_Gedc() -> None:
    '''Validate the `Gedc` structure with a value and required substructures.'''
    m = gc.Gedc(gc.GedcVers('abc'))
    assert m.validate()


def test_all_Givn() -> None:
    '''Validate the `Givn` structure with a value and required substructures.'''
    m = gc.Givn('abc')
    assert m.validate()


def test_all_Grad() -> None:
    '''Validate the `Grad` structure with a value and required substructures.'''
    m = gc.Grad('Y')
    assert m.validate()


def test_all_HeadDate() -> None:
    '''Validate the `HeadDate` structure with a value and required substructures.'''
    m = gc.HeadDate('1 JAN 2000')
    assert m.validate()


def test_all_HeadLang() -> None:
    '''Validate the `HeadLang` structure with a value and required substructures.'''
    m = gc.HeadLang('en-US')
    assert m.validate()


def test_all_HeadPlacForm() -> None:
    '''Validate the `HeadPlacForm` structure with a value and required substructures.'''
    m = gc.HeadPlacForm('text')
    assert m.validate()


def test_all_HeadPlac() -> None:
    '''Validate the `HeadPlac` structure with a value and required substructures.'''
    m = gc.HeadPlac(gc.HeadPlacForm('text'))
    assert m.validate()


def test_all_HeadSourData() -> None:
    '''Validate the `HeadSourData` structure with a value and required substructures.'''
    m = gc.HeadSourData('abc')
    assert m.validate()


def test_all_HeadSour() -> None:
    '''Validate the `HeadSour` structure with a value and required substructures.'''
    m = gc.HeadSour('abc')
    assert m.validate()


def test_all_Head() -> None:
    '''Validate the `Head` structure with a value and required substructures.'''
    m = gc.Head(gc.Gedc(gc.GedcVers('abc')))
    assert m.validate()


def test_all_Height() -> None:
    '''Validate the `Height` structure with a value and required substructures.'''
    m = gc.Height(1)
    assert m.validate()


def test_all_Husb() -> None:
    '''Validate the `Husb` structure with a value and required substructures.'''
    m = gc.Husb(gc.Age('> 10y 2m 1d'))
    assert m.validate()


def test_all_Idno() -> None:
    '''Validate the `Idno` structure with a value and required substructures.'''
    m = gc.Idno('abc', gc.Type('abc'))
    assert m.validate()


def test_all_Immi() -> None:
    '''Validate the `Immi` structure with a value and required substructures.'''
    m = gc.Immi('')
    assert m.validate()


def test_all_IndiCens() -> None:
    '''Validate the `IndiCens` structure with a value and required substructures.'''
    m = gc.IndiCens('Y')
    assert m.validate()


def test_all_IndiEven() -> None:
    '''Validate the `IndiEven` structure with a value and required substructures.'''
    m = gc.IndiEven('abc', gc.Type('abc'))
    assert m.validate()


def test_all_IndiFact() -> None:
    '''Validate the `IndiFact` structure with a value and required substructures.'''
    m = gc.IndiFact('abc', gc.Type('abc'))
    assert m.validate()


def test_all_IndiFamc() -> None:
    '''Validate the `IndiFamc` structure with a value and required substructures.'''
    m = gc.IndiFamc(fam)
    assert m.validate()


def test_all_IndiName() -> None:
    '''Validate the `IndiName` structure with a value and required substructures.'''
    m = gc.IndiName('John /Doe/')
    assert m.validate()


def test_all_IndiNchi() -> None:
    '''Validate the `IndiNchi` structure with a value and required substructures.'''
    m = gc.IndiNchi(1)
    assert m.validate()


def test_all_IndiReli() -> None:
    '''Validate the `IndiReli` structure with a value and required substructures.'''
    m = gc.IndiReli('abc')
    assert m.validate()


def test_all_IndiResi() -> None:
    '''Validate the `IndiResi` structure with a value and required substructures.'''
    m = gc.IndiResi('abc')
    assert m.validate()


def test_all_IndiTitl() -> None:
    '''Validate the `IndiTitl` structure with a value and required substructures.'''
    m = gc.IndiTitl('abc')
    assert m.validate()


def test_all_Inil() -> None:
    '''Validate the `Inil` structure with a value and required substructures.'''
    m = gc.Inil()
    assert m.validate()


def test_all_Lang() -> None:
    '''Validate the `Lang` structure with a value and required substructures.'''
    m = gc.Lang('en-US')
    assert m.validate()


def test_all_Lati() -> None:
    '''Validate the `Lati` structure with a value and required substructures.'''
    m = gc.Lati('N10.1')
    assert m.validate()


def test_all_Left() -> None:
    '''Validate the `Left` structure with a value and required substructures.'''
    m = gc.Left(1)
    assert m.validate()


def test_all_Long() -> None:
    '''Validate the `Long` structure with a value and required substructures.'''
    m = gc.Long('E10.1')
    assert m.validate()


def test_all_Map() -> None:
    '''Validate the `Map` structure with a value and required substructures.'''
    m = gc.Map([gc.Lati('N10.1'), gc.Long('E10.1')])
    assert m.validate()


def test_all_Marb() -> None:
    '''Validate the `Marb` structure with a value and required substructures.'''
    m = gc.Marb('')
    assert m.validate()


def test_all_Marc() -> None:
    '''Validate the `Marc` structure with a value and required substructures.'''
    m = gc.Marc('Y')
    assert m.validate()


def test_all_Marl() -> None:
    '''Validate the `Marl` structure with a value and required substructures.'''
    m = gc.Marl('')
    assert m.validate()


def test_all_Marr() -> None:
    '''Validate the `Marr` structure with a value and required substructures.'''
    m = gc.Marr('Y')
    assert m.validate()


def test_all_Mars() -> None:
    '''Validate the `Mars` structure with a value and required substructures.'''
    m = gc.Mars('')
    assert m.validate()


def test_all_Medi() -> None:
    '''Validate the `Medi` structure with a value and required substructures.'''
    m = gc.Medi('AUDIO')
    assert m.validate()


def test_all_Mime() -> None:
    '''Validate the `Mime` structure with a value and required substructures.'''
    m = gc.Mime('text/html')
    assert m.validate()


def test_all_NameTran() -> None:
    '''Validate the `NameTran` structure with a value and required substructures.'''
    m = gc.NameTran('John /Doe/', gc.Lang('en-US'))
    assert m.validate()


def test_all_NameType() -> None:
    '''Validate the `NameType` structure with a value and required substructures.'''
    m = gc.NameType('AKA')
    assert m.validate()


def test_all_Name() -> None:
    '''Validate the `Name` structure with a value and required substructures.'''
    m = gc.Name('abc')
    assert m.validate()


def test_all_Nati() -> None:
    '''Validate the `Nati` structure with a value and required substructures.'''
    m = gc.Nati('abc')
    assert m.validate()


def test_all_Natu() -> None:
    '''Validate the `Natu` structure with a value and required substructures.'''
    m = gc.Natu('Y')
    assert m.validate()


def test_all_Nick() -> None:
    '''Validate the `Nick` structure with a value and required substructures.'''
    m = gc.Nick('abc')
    assert m.validate()


def test_all_Nmr() -> None:
    '''Validate the `Nmr` structure with a value and required substructures.'''
    m = gc.Nmr(1)
    assert m.validate()


def test_all_NoDate() -> None:
    '''Validate the `NoDate` structure with a value and required substructures.'''
    m = gc.NoDate('FROM 1 JAN 2000 TO 1 JAN 2001')
    assert m.validate()


def test_all_No() -> None:
    '''Validate the `No` structure with a value and required substructures.'''
    m = gc.No('CENS')
    assert m.validate()


def test_all_NoteTran() -> None:
    '''Validate the `NoteTran` structure with a value and required substructures.'''
    m = gc.NoteTran('abc')
    assert m.validate()


def test_all_Note() -> None:
    '''Validate the `Note` structure with a value and required substructures.'''
    m = gc.Note('abc')
    assert m.validate()


def test_all_Npfx() -> None:
    '''Validate the `Npfx` structure with a value and required substructures.'''
    m = gc.Npfx('abc')
    assert m.validate()


def test_all_Nsfx() -> None:
    '''Validate the `Nsfx` structure with a value and required substructures.'''
    m = gc.Nsfx('abc')
    assert m.validate()


def test_all_Obje() -> None:
    '''Validate the `Obje` structure with a value and required substructures.'''
    m = gc.Obje(obje)
    assert m.validate()


def test_all_Occu() -> None:
    '''Validate the `Occu` structure with a value and required substructures.'''
    m = gc.Occu('abc')
    assert m.validate()


def test_all_OrdStat() -> None:
    '''Validate the `OrdStat` structure with a value and required substructures.'''
    m = gc.OrdStat('BIC', gc.DateExact('1 JAN 2000'))
    assert m.validate()


def test_all_Ordn() -> None:
    '''Validate the `Ordn` structure with a value and required substructures.'''
    m = gc.Ordn('Y')
    assert m.validate()


def test_all_Page() -> None:
    '''Validate the `Page` structure with a value and required substructures.'''
    m = gc.Page('abc')
    assert m.validate()


def test_all_Pedi() -> None:
    '''Validate the `Pedi` structure with a value and required substructures.'''
    m = gc.Pedi('ADOPTED')
    assert m.validate()


def test_all_Phon() -> None:
    '''Validate the `Phon` structure with a value and required substructures.'''
    m = gc.Phon('abc')
    assert m.validate()


def test_all_Phrase() -> None:
    '''Validate the `Phrase` structure with a value and required substructures.'''
    m = gc.Phrase('abc')
    assert m.validate()


def test_all_PlacForm() -> None:
    '''Validate the `PlacForm` structure with a value and required substructures.'''
    m = gc.PlacForm('text')
    assert m.validate()


def test_all_PlacTran() -> None:
    '''Validate the `PlacTran` structure with a value and required substructures.'''
    m = gc.PlacTran('text', gc.Lang('en-US'))
    assert m.validate()


def test_all_Plac() -> None:
    '''Validate the `Plac` structure with a value and required substructures.'''
    m = gc.Plac('text')
    assert m.validate()


def test_all_Post() -> None:
    '''Validate the `Post` structure with a value and required substructures.'''
    m = gc.Post('abc')
    assert m.validate()


def test_all_Prob() -> None:
    '''Validate the `Prob` structure with a value and required substructures.'''
    m = gc.Prob('')
    assert m.validate()


def test_all_Prop() -> None:
    '''Validate the `Prop` structure with a value and required substructures.'''
    m = gc.Prop('abc')
    assert m.validate()


def test_all_Publ() -> None:
    '''Validate the `Publ` structure with a value and required substructures.'''
    m = gc.Publ('abc')
    assert m.validate()


def test_all_Quay() -> None:
    '''Validate the `Quay` structure with a value and required substructures.'''
    m = gc.Quay('0')
    assert m.validate()


def test_all_RecordFam() -> None:
    '''Validate the `RecordFam` structure with a value and required substructures.'''
    m = gc.RecordFam(fam)
    assert m.validate()


def test_all_RecordIndi() -> None:
    '''Validate the `RecordIndi` structure with a value and required substructures.'''
    m = gc.RecordIndi(indi)
    assert m.validate()


def test_all_RecordObje() -> None:
    '''Validate the `RecordObje` structure with a value and required substructures.'''
    m = gc.RecordObje(obje, gc.File('dir/to/somewhere/', gc.Form('text/html')))
    assert m.validate()


def test_all_RecordRepo() -> None:
    '''Validate the `RecordRepo` structure with a value and required substructures.'''
    m = gc.RecordRepo(repo, gc.Name('abc'))
    assert m.validate()


def test_all_RecordSnote() -> None:
    '''Validate the `RecordSnote` structure with a value and required substructures.'''
    m = gc.RecordSnote(snote)
    assert m.validate()


def test_all_RecordSour() -> None:
    '''Validate the `RecordSour` structure with a value and required substructures.'''
    m = gc.RecordSour(sour)
    assert m.validate()


def test_all_RecordSubm() -> None:
    '''Validate the `RecordSubm` structure with a value and required substructures.'''
    m = gc.RecordSubm(subm, gc.Name('abc'))
    assert m.validate()


def test_all_Refn() -> None:
    '''Validate the `Refn` structure with a value and required substructures.'''
    m = gc.Refn('abc')
    assert m.validate()


def test_all_Reli() -> None:
    '''Validate the `Reli` structure with a value and required substructures.'''
    m = gc.Reli('abc')
    assert m.validate()


def test_all_Repo() -> None:
    '''Validate the `Repo` structure with a value and required substructures.'''
    m = gc.Repo(repo)
    assert m.validate()


def test_all_Resn() -> None:
    '''Validate the `Resn` structure with a value and required substructures.'''
    m = gc.Resn('CONFIDENTIAL')
    assert m.validate()


def test_all_Reti() -> None:
    '''Validate the `Reti` structure with a value and required substructures.'''
    m = gc.Reti('Y')
    assert m.validate()


def test_all_Role() -> None:
    '''Validate the `Role` structure with a value and required substructures.'''
    m = gc.Role('CHIL')
    assert m.validate()


def test_all_Schma() -> None:
    '''Validate the `Schma` structure with a value and required substructures.'''
    m = gc.Schma()
    assert m.validate()


def test_all_Sdate() -> None:
    '''Validate the `Sdate` structure with a value and required substructures.'''
    m = gc.Sdate('1 JAN 2000')
    assert m.validate()


def test_all_Sex() -> None:
    '''Validate the `Sex` structure with a value and required substructures.'''
    m = gc.Sex('M')
    assert m.validate()


def test_all_Slgc() -> None:
    '''Validate the `Slgc` structure with a value and required substructures.'''
    m = gc.Slgc(gc.Famc(fam))
    assert m.validate()


def test_all_Slgs() -> None:
    '''Validate the `Slgs` structure with a value and required substructures.'''
    m = gc.Slgs()
    assert m.validate()


def test_all_Snote() -> None:
    '''Validate the `Snote` structure with a value and required substructures.'''
    m = gc.Snote(snote)
    assert m.validate()


def test_all_SourData() -> None:
    '''Validate the `SourData` structure with a value and required substructures.'''
    m = gc.SourData()
    assert m.validate()


def test_all_SourEven() -> None:
    '''Validate the `SourEven` structure with a value and required substructures.'''
    m = gc.SourEven('CENS')
    assert m.validate()


def test_all_Sour() -> None:
    '''Validate the `Sour` structure with a value and required substructures.'''
    m = gc.Sour(sour)
    assert m.validate()


def test_all_Spfx() -> None:
    '''Validate the `Spfx` structure with a value and required substructures.'''
    m = gc.Spfx('abc')
    assert m.validate()


def test_all_Ssn() -> None:
    '''Validate the `Ssn` structure with a value and required substructures.'''
    m = gc.Ssn('abc')
    assert m.validate()


def test_all_Stae() -> None:
    '''Validate the `Stae` structure with a value and required substructures.'''
    m = gc.Stae('abc')
    assert m.validate()


def test_all_SubmLang() -> None:
    '''Validate the `SubmLang` structure with a value and required substructures.'''
    m = gc.SubmLang('en-US')
    assert m.validate()


def test_all_Subm() -> None:
    '''Validate the `Subm` structure with a value and required substructures.'''
    m = gc.Subm(subm)
    assert m.validate()


def test_all_Surn() -> None:
    '''Validate the `Surn` structure with a value and required substructures.'''
    m = gc.Surn('abc')
    assert m.validate()


def test_all_Tag() -> None:
    '''Validate the `Tag` structure with a value and required substructures.'''
    m = gc.Tag('tag uri')
    assert m.validate()


def test_all_Temp() -> None:
    '''Validate the `Temp` structure with a value and required substructures.'''
    m = gc.Temp('abc')
    assert m.validate()


def test_all_Text() -> None:
    '''Validate the `Text` structure with a value and required substructures.'''
    m = gc.Text('abc')
    assert m.validate()


def test_all_Time() -> None:
    '''Validate the `Time` structure with a value and required substructures.'''
    m = gc.Time('12:12:12')
    assert m.validate()


def test_all_Titl() -> None:
    '''Validate the `Titl` structure with a value and required substructures.'''
    m = gc.Titl('abc')
    assert m.validate()


def test_all_Top() -> None:
    '''Validate the `Top` structure with a value and required substructures.'''
    m = gc.Top(1)
    assert m.validate()


def test_all_Type() -> None:
    '''Validate the `Type` structure with a value and required substructures.'''
    m = gc.Type('abc')
    assert m.validate()


def test_all_Uid() -> None:
    '''Validate the `Uid` structure with a value and required substructures.'''
    m = gc.Uid('abc')
    assert m.validate()


def test_all_Vers() -> None:
    '''Validate the `Vers` structure with a value and required substructures.'''
    m = gc.Vers('abc')
    assert m.validate()


def test_all_Width() -> None:
    '''Validate the `Width` structure with a value and required substructures.'''
    m = gc.Width(1)
    assert m.validate()


def test_all_Wife() -> None:
    '''Validate the `Wife` structure with a value and required substructures.'''
    m = gc.Wife(gc.Age('> 10y 2m 1d'))
    assert m.validate()


def test_all_Will() -> None:
    '''Validate the `Will` structure with a value and required substructures.'''
    m = gc.Will('Y')
    assert m.validate()


def test_all_Www() -> None:
    '''Validate the `Www` structure with a value and required substructures.'''
    m = gc.Www('abc')
    assert m.validate()
