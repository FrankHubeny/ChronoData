'''This module contains Empty Subs tests to be run with pytest.

The file was generated by methods of the `Tests` class in the `genedata.generate` module.

DO NOT MODIFY THIS FILE.
'''

import pytest   # noqa: I001
import re

import genedata.classes7 as gc
from genedata.build import Genealogy


g = Genealogy('test')
fam = g.family_xref('1')
indi = g.individual_xref('1')
obje = g.multimedia_xref('1')
repo = g.repository_xref('1')
snote = g.shared_note_xref('1', 'a note')
sour = g.source_xref('1')
subm = g.submitter_xref('1')


def test_empty_subs_Abbr() -> None:
    '''Validate the `Abbr` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Abbr.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Abbr('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Adr1() -> None:
    '''Validate the `Adr1` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Adr1.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Adr1('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Adr2() -> None:
    '''Validate the `Adr2` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Adr2.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Adr2('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Adr3() -> None:
    '''Validate the `Adr3` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Adr3.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Adr3('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Agnc() -> None:
    '''Validate the `Agnc` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Agnc.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Agnc('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Anci() -> None:
    '''Validate the `Anci` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Anci.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Anci(subm, gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Auth() -> None:
    '''Validate the `Auth` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Auth.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Auth('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Caus() -> None:
    '''Validate the `Caus` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Caus.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Caus('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_City() -> None:
    '''Validate the `City` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("City.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.City('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Copr() -> None:
    '''Validate the `Copr` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Copr.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Copr('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Ctry() -> None:
    '''Validate the `Ctry` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Ctry.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Ctry('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Desi() -> None:
    '''Validate the `Desi` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Desi.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Desi(subm, gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Dest() -> None:
    '''Validate the `Dest` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Dest.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Dest('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Email() -> None:
    '''Validate the `Email` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Email.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Email('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_ExidType() -> None:
    '''Validate the `ExidType` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("ExidType.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.ExidType('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Famc() -> None:
    '''Validate the `Famc` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Famc.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Famc(fam, gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Fax() -> None:
    '''Validate the `Fax` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Fax.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Fax('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_GedcVers() -> None:
    '''Validate the `GedcVers` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("GedcVers.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.GedcVers('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Givn() -> None:
    '''Validate the `Givn` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Givn.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Givn('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_HeadLang() -> None:
    '''Validate the `HeadLang` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("HeadLang.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.HeadLang('en-US', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_HeadPlacForm() -> None:
    '''Validate the `HeadPlacForm` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("HeadPlacForm.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.HeadPlacForm('text', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Height() -> None:
    '''Validate the `Height` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Height.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Height(1, gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Lang() -> None:
    '''Validate the `Lang` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Lang.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Lang('en-US', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Lati() -> None:
    '''Validate the `Lati` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Lati.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Lati('N10.1', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Left() -> None:
    '''Validate the `Left` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Left.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Left(1, gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Long() -> None:
    '''Validate the `Long` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Long.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Long('E10.1', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Mime() -> None:
    '''Validate the `Mime` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Mime.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Mime('text/html', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Name() -> None:
    '''Validate the `Name` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Name.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Name('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Nick() -> None:
    '''Validate the `Nick` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Nick.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Nick('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Npfx() -> None:
    '''Validate the `Npfx` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Npfx.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Npfx('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Nsfx() -> None:
    '''Validate the `Nsfx` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Nsfx.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Nsfx('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Page() -> None:
    '''Validate the `Page` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Page.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Page('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Phon() -> None:
    '''Validate the `Phon` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Phon.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Phon('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Phrase() -> None:
    '''Validate the `Phrase` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Phrase.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Phrase('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_PlacForm() -> None:
    '''Validate the `PlacForm` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("PlacForm.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.PlacForm('text', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Post() -> None:
    '''Validate the `Post` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Post.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Post('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Publ() -> None:
    '''Validate the `Publ` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Publ.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Publ('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Quay() -> None:
    '''Validate the `Quay` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Quay.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Quay('0', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Reli() -> None:
    '''Validate the `Reli` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Reli.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Reli('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Resn() -> None:
    '''Validate the `Resn` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Resn.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Resn('CONFIDENTIAL', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Sex() -> None:
    '''Validate the `Sex` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Sex.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Sex('M', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Snote() -> None:
    '''Validate the `Snote` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Snote.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Snote(snote, gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Spfx() -> None:
    '''Validate the `Spfx` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Spfx.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Spfx('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Stae() -> None:
    '''Validate the `Stae` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Stae.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Stae('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_SubmLang() -> None:
    '''Validate the `SubmLang` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("SubmLang.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.SubmLang('en-US', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Subm() -> None:
    '''Validate the `Subm` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Subm.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Subm(subm, gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Surn() -> None:
    '''Validate the `Surn` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Surn.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Surn('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Tag() -> None:
    '''Validate the `Tag` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Tag.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Tag('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Temp() -> None:
    '''Validate the `Temp` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Temp.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Temp('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Time() -> None:
    '''Validate the `Time` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Time.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Time('12:12:12', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Titl() -> None:
    '''Validate the `Titl` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Titl.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Titl('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Top() -> None:
    '''Validate the `Top` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Top.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Top(1, gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Type() -> None:
    '''Validate the `Type` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Type.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Type('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Uid() -> None:
    '''Validate the `Uid` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Uid.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Uid('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Vers() -> None:
    '''Validate the `Vers` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Vers.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Vers('abc', gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Width() -> None:
    '''Validate the `Width` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Width.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Width(1, gc.Phrase("hi"))  # type: ignore[call-arg]


def test_empty_subs_Www() -> None:
    '''Validate the `Www` without substructures cannot receive a substructure.'''
    with pytest.raises(
        TypeError, match=re.escape("Www.__init__() takes 2 positional arguments but 3 were given")
    ):
        gc.Www('abc', gc.Phrase("hi"))  # type: ignore[call-arg]
