'''This module contains Bad Singular tests to be run with pytest.

The file was generated by methods of the `Tests` class in the `genedata.generate` module.

DO NOT MODIFY THIS FILE.
'''

import pytest   # noqa: I001
import re

import genedata.classes70 as gc
from genedata.build import Genealogy
from genedata.messages import Msg


g = Genealogy()
fam = g.family_xref('1')
indi = g.individual_xref('2')
obje = g.multimedia_xref('3')
repo = g.repository_xref('4')
snote = g.shared_note_xref('5', 'a note')
sour = g.source_xref('6')
subm = g.submitter_xref('7')


def test_bad_singular_Addr() -> None:
    '''Validate the `Addr` structure with a single substructure that is repeated.'''
    m = gc.Addr('abc', [gc.Adr1('abc'), gc.Adr1('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Adr1', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_AdopFamc() -> None:
    '''Validate the `AdopFamc` structure with a single substructure that is repeated.'''
    m = gc.AdopFamc(fam, [gc.FamcAdop('HUSB'), gc.FamcAdop('HUSB')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('FamcAdop', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Adop() -> None:
    '''Validate the `Adop` structure with a single substructure that is repeated.'''
    m = gc.Adop('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Age() -> None:
    '''Validate the `Age` structure with a single substructure that is repeated.'''
    m = gc.Age('> 10y 2m 1d', [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Alia() -> None:
    '''Validate the `Alia` structure with a single substructure that is repeated.'''
    m = gc.Alia(indi, [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Anul() -> None:
    '''Validate the `Anul` structure with a single substructure that is repeated.'''
    m = gc.Anul('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Asso() -> None:
    '''Validate the `Asso` structure with a single substructure that is repeated.'''
    m = gc.Asso(indi, [gc.Phrase('abc'), gc.Phrase('abc'), gc.Role('CHIL')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Bapl() -> None:
    '''Validate the `Bapl` structure with a single substructure that is repeated.'''
    m = gc.Bapl([gc.Date('1 JAN 2000'), gc.Date('1 JAN 2000')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Date', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Bapm() -> None:
    '''Validate the `Bapm` structure with a single substructure that is repeated.'''
    m = gc.Bapm('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Barm() -> None:
    '''Validate the `Barm` structure with a single substructure that is repeated.'''
    m = gc.Barm('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Basm() -> None:
    '''Validate the `Basm` structure with a single substructure that is repeated.'''
    m = gc.Basm('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Birt() -> None:
    '''Validate the `Birt` structure with a single substructure that is repeated.'''
    m = gc.Birt('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Bles() -> None:
    '''Validate the `Bles` structure with a single substructure that is repeated.'''
    m = gc.Bles('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Buri() -> None:
    '''Validate the `Buri` structure with a single substructure that is repeated.'''
    m = gc.Buri('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Caln() -> None:
    '''Validate the `Caln` structure with a single substructure that is repeated.'''
    m = gc.Caln('abc', [gc.Medi('AUDIO'), gc.Medi('AUDIO')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Medi', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Cast() -> None:
    '''Validate the `Cast` structure with a single substructure that is repeated.'''
    m = gc.Cast('abc', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Chan() -> None:
    '''Validate the `Chan` structure with a single substructure that is repeated.'''
    m = gc.Chan([gc.DateExact('1 JAN 2000'), gc.DateExact('1 JAN 2000'), gc.DateExact('1 JAN 2000')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('DateExact', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Chil() -> None:
    '''Validate the `Chil` structure with a single substructure that is repeated.'''
    m = gc.Chil(indi, [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Chr() -> None:
    '''Validate the `Chr` structure with a single substructure that is repeated.'''
    m = gc.Chr('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Chra() -> None:
    '''Validate the `Chra` structure with a single substructure that is repeated.'''
    m = gc.Chra('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Conf() -> None:
    '''Validate the `Conf` structure with a single substructure that is repeated.'''
    m = gc.Conf('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Conl() -> None:
    '''Validate the `Conl` structure with a single substructure that is repeated.'''
    m = gc.Conl([gc.Date('1 JAN 2000'), gc.Date('1 JAN 2000')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Date', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Corp() -> None:
    '''Validate the `Corp` structure with a single substructure that is repeated.'''
    m = gc.Corp('abc', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Crea() -> None:
    '''Validate the `Crea` structure with a single substructure that is repeated.'''
    m = gc.Crea([gc.DateExact('1 JAN 2000'), gc.DateExact('1 JAN 2000'), gc.DateExact('1 JAN 2000')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('DateExact', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Crem() -> None:
    '''Validate the `Crem` structure with a single substructure that is repeated.'''
    m = gc.Crem('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Crop() -> None:
    '''Validate the `Crop` structure with a single substructure that is repeated.'''
    m = gc.Crop([gc.Height(1), gc.Height(1)])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Height', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_DataEvenDate() -> None:
    '''Validate the `DataEvenDate` structure with a single substructure that is repeated.'''
    m = gc.DataEvenDate('FROM 1 JAN 2000 TO 1 JAN 2001', [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_DataEven() -> None:
    '''Validate the `DataEven` structure with a single substructure that is repeated.'''
    m = gc.DataEven('CENS', [gc.DataEvenDate('FROM 1 JAN 2000 TO 1 JAN 2001'), gc.DataEvenDate('FROM 1 JAN 2000 TO 1 JAN 2001')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('DataEvenDate', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Data() -> None:
    '''Validate the `Data` structure with a single substructure that is repeated.'''
    m = gc.Data([gc.Agnc('abc'), gc.Agnc('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Agnc', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_DateExact() -> None:
    '''Validate the `DateExact` structure with a single substructure that is repeated.'''
    m = gc.DateExact('1 JAN 2000', [gc.Time('12:12:12'), gc.Time('12:12:12')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Time', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Date() -> None:
    '''Validate the `Date` structure with a single substructure that is repeated.'''
    m = gc.Date('1 JAN 2000', [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Deat() -> None:
    '''Validate the `Deat` structure with a single substructure that is repeated.'''
    m = gc.Deat('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Div() -> None:
    '''Validate the `Div` structure with a single substructure that is repeated.'''
    m = gc.Div('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Divf() -> None:
    '''Validate the `Divf` structure with a single substructure that is repeated.'''
    m = gc.Divf('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Dscr() -> None:
    '''Validate the `Dscr` structure with a single substructure that is repeated.'''
    m = gc.Dscr('abc', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Educ() -> None:
    '''Validate the `Educ` structure with a single substructure that is repeated.'''
    m = gc.Educ('abc', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Emig() -> None:
    '''Validate the `Emig` structure with a single substructure that is repeated.'''
    m = gc.Emig('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Endl() -> None:
    '''Validate the `Endl` structure with a single substructure that is repeated.'''
    m = gc.Endl([gc.Date('1 JAN 2000'), gc.Date('1 JAN 2000')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Date', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Enga() -> None:
    '''Validate the `Enga` structure with a single substructure that is repeated.'''
    m = gc.Enga('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Exid() -> None:
    '''Validate the `Exid` structure with a single substructure that is repeated.'''
    m = gc.Exid('abc', [gc.ExidType('abc'), gc.ExidType('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('ExidType', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_FamCens() -> None:
    '''Validate the `FamCens` structure with a single substructure that is repeated.'''
    m = gc.FamCens('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_FamEven() -> None:
    '''Validate the `FamEven` structure with a single substructure that is repeated.'''
    m = gc.FamEven('abc', [gc.Addr('abc'), gc.Addr('abc'), gc.Type('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_FamFact() -> None:
    '''Validate the `FamFact` structure with a single substructure that is repeated.'''
    m = gc.FamFact('abc', [gc.Addr('abc'), gc.Addr('abc'), gc.Type('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_FamHusb() -> None:
    '''Validate the `FamHusb` structure with a single substructure that is repeated.'''
    m = gc.FamHusb(indi, [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_FamNchi() -> None:
    '''Validate the `FamNchi` structure with a single substructure that is repeated.'''
    m = gc.FamNchi(1, [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_FamResi() -> None:
    '''Validate the `FamResi` structure with a single substructure that is repeated.'''
    m = gc.FamResi('abc', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_FamWife() -> None:
    '''Validate the `FamWife` structure with a single substructure that is repeated.'''
    m = gc.FamWife(indi, [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_FamcAdop() -> None:
    '''Validate the `FamcAdop` structure with a single substructure that is repeated.'''
    m = gc.FamcAdop('HUSB', [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_FamcStat() -> None:
    '''Validate the `FamcStat` structure with a single substructure that is repeated.'''
    m = gc.FamcStat('CHALLENGED', [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Fcom() -> None:
    '''Validate the `Fcom` structure with a single substructure that is repeated.'''
    m = gc.Fcom('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_FileTran() -> None:
    '''Validate the `FileTran` structure with a single substructure that is repeated.'''
    m = gc.FileTran('dir/to/somewhere/', [gc.Form('text/html'), gc.Form('text/html'), gc.Form('text/html')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Form', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_File() -> None:
    '''Validate the `File` structure with a single substructure that is repeated.'''
    m = gc.File('dir/to/somewhere/', [gc.Form('text/html'), gc.Form('text/html'), gc.Form('text/html')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Form', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Form() -> None:
    '''Validate the `Form` structure with a single substructure that is repeated.'''
    m = gc.Form('text/html', [gc.Medi('AUDIO'), gc.Medi('AUDIO')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Medi', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Gedc() -> None:
    '''Validate the `Gedc` structure with a single substructure that is repeated.'''
    m = gc.Gedc([gc.GedcVers('abc'), gc.GedcVers('abc'), gc.GedcVers('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('GedcVers', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Grad() -> None:
    '''Validate the `Grad` structure with a single substructure that is repeated.'''
    m = gc.Grad('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_HeadDate() -> None:
    '''Validate the `HeadDate` structure with a single substructure that is repeated.'''
    m = gc.HeadDate('1 JAN 2000', [gc.Time('12:12:12'), gc.Time('12:12:12')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Time', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_HeadPlac() -> None:
    '''Validate the `HeadPlac` structure with a single substructure that is repeated.'''
    m = gc.HeadPlac([gc.HeadPlacForm('text'), gc.HeadPlacForm('text'), gc.HeadPlacForm('text')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('HeadPlacForm', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_HeadSourData() -> None:
    '''Validate the `HeadSourData` structure with a single substructure that is repeated.'''
    m = gc.HeadSourData('abc', [gc.Copr('abc'), gc.Copr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Copr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_HeadSour() -> None:
    '''Validate the `HeadSour` structure with a single substructure that is repeated.'''
    m = gc.HeadSour('abc', [gc.Corp('abc'), gc.Corp('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Corp', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Head() -> None:
    '''Validate the `Head` structure with a single substructure that is repeated.'''
    m = gc.Head([gc.Copr('abc'), gc.Copr('abc'), gc.Gedc(gc.GedcVers('abc'))])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Copr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Husb() -> None:
    '''Validate the `Husb` structure with a single substructure that is repeated.'''
    m = gc.Husb([gc.Age('> 10y 2m 1d'), gc.Age('> 10y 2m 1d'), gc.Age('> 10y 2m 1d')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Age', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Idno() -> None:
    '''Validate the `Idno` structure with a single substructure that is repeated.'''
    m = gc.Idno('abc', [gc.Addr('abc'), gc.Addr('abc'), gc.Type('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Immi() -> None:
    '''Validate the `Immi` structure with a single substructure that is repeated.'''
    m = gc.Immi('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_IndiCens() -> None:
    '''Validate the `IndiCens` structure with a single substructure that is repeated.'''
    m = gc.IndiCens('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_IndiEven() -> None:
    '''Validate the `IndiEven` structure with a single substructure that is repeated.'''
    m = gc.IndiEven('abc', [gc.Addr('abc'), gc.Addr('abc'), gc.Type('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_IndiFact() -> None:
    '''Validate the `IndiFact` structure with a single substructure that is repeated.'''
    m = gc.IndiFact('abc', [gc.Addr('abc'), gc.Addr('abc'), gc.Type('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_IndiFamc() -> None:
    '''Validate the `IndiFamc` structure with a single substructure that is repeated.'''
    m = gc.IndiFamc(fam, [gc.FamcStat('CHALLENGED'), gc.FamcStat('CHALLENGED')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('FamcStat', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_IndiName() -> None:
    '''Validate the `IndiName` structure with a single substructure that is repeated.'''
    m = gc.IndiName('John /Doe/', [gc.NameType('AKA'), gc.NameType('AKA')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('NameType', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_IndiNchi() -> None:
    '''Validate the `IndiNchi` structure with a single substructure that is repeated.'''
    m = gc.IndiNchi(1, [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_IndiReli() -> None:
    '''Validate the `IndiReli` structure with a single substructure that is repeated.'''
    m = gc.IndiReli('abc', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_IndiResi() -> None:
    '''Validate the `IndiResi` structure with a single substructure that is repeated.'''
    m = gc.IndiResi('abc', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_IndiTitl() -> None:
    '''Validate the `IndiTitl` structure with a single substructure that is repeated.'''
    m = gc.IndiTitl('abc', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Inil() -> None:
    '''Validate the `Inil` structure with a single substructure that is repeated.'''
    m = gc.Inil([gc.Date('1 JAN 2000'), gc.Date('1 JAN 2000')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Date', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Map() -> None:
    '''Validate the `Map` structure with a single substructure that is repeated.'''
    m = gc.Map([gc.Lati('N10.1'), gc.Lati('N10.1'), gc.Lati('N10.1'), gc.Long('E10.1')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Lati', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Marb() -> None:
    '''Validate the `Marb` structure with a single substructure that is repeated.'''
    m = gc.Marb('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Marc() -> None:
    '''Validate the `Marc` structure with a single substructure that is repeated.'''
    m = gc.Marc('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Marl() -> None:
    '''Validate the `Marl` structure with a single substructure that is repeated.'''
    m = gc.Marl('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Marr() -> None:
    '''Validate the `Marr` structure with a single substructure that is repeated.'''
    m = gc.Marr('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Mars() -> None:
    '''Validate the `Mars` structure with a single substructure that is repeated.'''
    m = gc.Mars('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Medi() -> None:
    '''Validate the `Medi` structure with a single substructure that is repeated.'''
    m = gc.Medi('AUDIO', [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_NameTran() -> None:
    '''Validate the `NameTran` structure with a single substructure that is repeated.'''
    m = gc.NameTran('John /Doe/', [gc.Lang('en-US'), gc.Lang('en-US'), gc.Lang('en-US')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Lang', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_NameType() -> None:
    '''Validate the `NameType` structure with a single substructure that is repeated.'''
    m = gc.NameType('AKA', [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Nati() -> None:
    '''Validate the `Nati` structure with a single substructure that is repeated.'''
    m = gc.Nati('abc', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Natu() -> None:
    '''Validate the `Natu` structure with a single substructure that is repeated.'''
    m = gc.Natu('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Nmr() -> None:
    '''Validate the `Nmr` structure with a single substructure that is repeated.'''
    m = gc.Nmr(1, [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_NoDate() -> None:
    '''Validate the `NoDate` structure with a single substructure that is repeated.'''
    m = gc.NoDate('FROM 1 JAN 2000 TO 1 JAN 2001', [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_No() -> None:
    '''Validate the `No` structure with a single substructure that is repeated.'''
    m = gc.No('CENS', [gc.NoDate('FROM 1 JAN 2000 TO 1 JAN 2001'), gc.NoDate('FROM 1 JAN 2000 TO 1 JAN 2001')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('NoDate', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_NoteTran() -> None:
    '''Validate the `NoteTran` structure with a single substructure that is repeated.'''
    m = gc.NoteTran('abc', [gc.Lang('en-US'), gc.Lang('en-US')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Lang', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Note() -> None:
    '''Validate the `Note` structure with a single substructure that is repeated.'''
    m = gc.Note('abc', [gc.Lang('en-US'), gc.Lang('en-US')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Lang', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Obje() -> None:
    '''Validate the `Obje` structure with a single substructure that is repeated.'''
    m = gc.Obje(obje, [gc.Crop(), gc.Crop()])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Crop', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Occu() -> None:
    '''Validate the `Occu` structure with a single substructure that is repeated.'''
    m = gc.Occu('abc', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_OrdStat() -> None:
    '''Validate the `OrdStat` structure with a single substructure that is repeated.'''
    m = gc.OrdStat('BIC', [gc.DateExact('1 JAN 2000'), gc.DateExact('1 JAN 2000'), gc.DateExact('1 JAN 2000')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('DateExact', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Ordn() -> None:
    '''Validate the `Ordn` structure with a single substructure that is repeated.'''
    m = gc.Ordn('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Pedi() -> None:
    '''Validate the `Pedi` structure with a single substructure that is repeated.'''
    m = gc.Pedi('ADOPTED', [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_PlacTran() -> None:
    '''Validate the `PlacTran` structure with a single substructure that is repeated.'''
    m = gc.PlacTran('text', [gc.Lang('en-US'), gc.Lang('en-US'), gc.Lang('en-US')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Lang', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Plac() -> None:
    '''Validate the `Plac` structure with a single substructure that is repeated.'''
    m = gc.Plac('text', [gc.Lang('en-US'), gc.Lang('en-US')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Lang', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Prob() -> None:
    '''Validate the `Prob` structure with a single substructure that is repeated.'''
    m = gc.Prob('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Prop() -> None:
    '''Validate the `Prop` structure with a single substructure that is repeated.'''
    m = gc.Prop('abc', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_RecordFam() -> None:
    '''Validate the `RecordFam` structure with a single substructure that is repeated.'''
    m = gc.RecordFam(fam, [gc.Chan(gc.DateExact('1 JAN 2000')), gc.Chan(gc.DateExact('1 JAN 2000'))])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Chan', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_RecordIndi() -> None:
    '''Validate the `RecordIndi` structure with a single substructure that is repeated.'''
    m = gc.RecordIndi(indi, [gc.Chan(gc.DateExact('1 JAN 2000')), gc.Chan(gc.DateExact('1 JAN 2000'))])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Chan', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_RecordObje() -> None:
    '''Validate the `RecordObje` structure with a single substructure that is repeated.'''
    m = gc.RecordObje(obje, [gc.Chan(gc.DateExact('1 JAN 2000')), gc.Chan(gc.DateExact('1 JAN 2000')), gc.File('dir/to/somewhere/', gc.Form('text/html'))])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Chan', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_RecordRepo() -> None:
    '''Validate the `RecordRepo` structure with a single substructure that is repeated.'''
    m = gc.RecordRepo(repo, [gc.Addr('abc'), gc.Addr('abc'), gc.Name('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_RecordSnote() -> None:
    '''Validate the `RecordSnote` structure with a single substructure that is repeated.'''
    m = gc.RecordSnote(snote, [gc.Chan(gc.DateExact('1 JAN 2000')), gc.Chan(gc.DateExact('1 JAN 2000'))])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Chan', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_RecordSour() -> None:
    '''Validate the `RecordSour` structure with a single substructure that is repeated.'''
    m = gc.RecordSour(sour, [gc.Abbr('abc'), gc.Abbr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Abbr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_RecordSubm() -> None:
    '''Validate the `RecordSubm` structure with a single substructure that is repeated.'''
    m = gc.RecordSubm(subm, [gc.Addr('abc'), gc.Addr('abc'), gc.Name('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Refn() -> None:
    '''Validate the `Refn` structure with a single substructure that is repeated.'''
    m = gc.Refn('abc', [gc.Type('abc'), gc.Type('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Type', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Reti() -> None:
    '''Validate the `Reti` structure with a single substructure that is repeated.'''
    m = gc.Reti('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Role() -> None:
    '''Validate the `Role` structure with a single substructure that is repeated.'''
    m = gc.Role('CHIL', [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Sdate() -> None:
    '''Validate the `Sdate` structure with a single substructure that is repeated.'''
    m = gc.Sdate('1 JAN 2000', [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Slgc() -> None:
    '''Validate the `Slgc` structure with a single substructure that is repeated.'''
    m = gc.Slgc([gc.Date('1 JAN 2000'), gc.Date('1 JAN 2000'), gc.Famc(fam)])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Date', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Slgs() -> None:
    '''Validate the `Slgs` structure with a single substructure that is repeated.'''
    m = gc.Slgs([gc.Date('1 JAN 2000'), gc.Date('1 JAN 2000')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Date', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_SourData() -> None:
    '''Validate the `SourData` structure with a single substructure that is repeated.'''
    m = gc.SourData([gc.Date('1 JAN 2000'), gc.Date('1 JAN 2000')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Date', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_SourEven() -> None:
    '''Validate the `SourEven` structure with a single substructure that is repeated.'''
    m = gc.SourEven('CENS', [gc.Phrase('abc'), gc.Phrase('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Phrase', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Sour() -> None:
    '''Validate the `Sour` structure with a single substructure that is repeated.'''
    m = gc.Sour(sour, [gc.Page('abc'), gc.Page('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Page', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Ssn() -> None:
    '''Validate the `Ssn` structure with a single substructure that is repeated.'''
    m = gc.Ssn('abc', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Text() -> None:
    '''Validate the `Text` structure with a single substructure that is repeated.'''
    m = gc.Text('abc', [gc.Lang('en-US'), gc.Lang('en-US')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Lang', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Wife() -> None:
    '''Validate the `Wife` structure with a single substructure that is repeated.'''
    m = gc.Wife([gc.Age('> 10y 2m 1d'), gc.Age('> 10y 2m 1d'), gc.Age('> 10y 2m 1d')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Age', m.class_name))
    ):
        assert m.validate()


def test_bad_singular_Will() -> None:
    '''Validate the `Will` structure with a single substructure that is repeated.'''
    m = gc.Will('Y', [gc.Addr('abc'), gc.Addr('abc')])
    with pytest.raises(
        ValueError, match=re.escape(Msg.ONLY_ONE_PERMITTED.format('Addr', m.class_name))
    ):
        assert m.validate()
