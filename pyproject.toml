[build-system]
requires = ["setuptools", "versioneer[toml]"]
build-backend = "setuptools.build_meta"

[project]
name = "ChronoData"
dynamic = ["version"]
dependencies = [
]
requires-python = ">=3.12"
authors = [
  {name = "Frank Hubeny", email = "frankhubeny@protonmail.com"},
]
maintainers = [
  {name = "Frank Hubeny", email = "frankhubeny@protonmail.com"}
]
description = "Tools to help one construct, display and assess competing chronologies"
readme = {file = "README.md", content-type = "text/markdown"}
license = {file = "LICENSE.md"}
keywords = ["chronology", ]
classifiers = [
  "Development Status :: 3 - Beta",
  "Intended Audience :: Historians",
  "Topic :: Chronology :: History",
  "Topic :: Genealogy :: History",
  "License :: OSI Approved :: BSD 3-Clause License",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python",
  "Typing :: Typed",
]

#[project.optional-dependencies]
#gui = ["Jupyter Lab"],
#]

#https://docs.astral.sh/ruff/linter/#disabling-fixes
#[tool.ruff.lint] 
#fixable = ["ALL"]
#unfixable = ["F401"]

[project.urls]
Homepage = "https://github.com/FrankHubeny/ChronoData"
Documentation = "https://readthedocs.org"
Repository = "https://github.com/FrankHubeny/ChronoData"
"Bug Tracker" = "https://github.com/FrankHubeny/ChronoData/issues"
Changelog = "https://github.com/FrankHubeny/ChronoData/CHANGELOG.md"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra", 
    "--showlocals", 
    "--strict-markers", 
    "--strict-config",
    "--import-mode=importlib"	
    "--cov=chronodata",
]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "INFO"
testpaths = ["tests"]

[tool.mypy]
mypy_path = ["chronodata"]
files = ["chronodata", "tests"]
python_version = "3.12"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = true

[tool.ruff]
line-length = 80
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "TID251",      # flake8-tidy-imports.banned-api
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
]
ignore = [
  "ISC001",  # May collide with formatter
  "PT004",   # Incorrect check, usefixtures is the correct way to do this
  "PLR09",   # Too many X
  "PLR2004", # Magic value in comparison
]

[tool.ruff.format]
quote-style = "single"
#indent-style = "tab"
docstring-code-format = true
# Like Black, use double quotes for strings.
# quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
#indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
#line-ending = "auto"

