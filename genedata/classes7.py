'''The classes were generated by methods in the `Construct` class.  
They should not be manually altered.

The specifications are from the [GEDCOM files]https://github.com/FamilySearch/GEDCOM-registries for version 7.0.
'''

__all__ = [
    'Abbr',
    'Addr',
    'Adop',
    'AdopFamc',
    'Adr1',
    'Adr2',
    'Adr3',
    'Age',
    'Agnc',
    'Alia',
    'Anci',
    'Anul',
    'Asso',
    'Auth',
    'Bapl',
    'Bapm',
    'Barm',
    'Basm',
    'Birt',
    'Bles',
    'Buri',
    'Caln',
    'Cast',
    'Caus',
    'Chan',
    'Chil',
    'Chr',
    'Chra',
    'City',
    'Conf',
    'Conl',
    'Copr',
    'Corp',
    'Crea',
    'Crem',
    'Crop',
    'Ctry',
    'Data',
    'DataEven',
    'DataEvenDate',
    'Date',
    'DateExact',
    'Deat',
    'Desi',
    'Dest',
    'Div',
    'Divf',
    'Dscr',
    'Educ',
    'Email',
    'Emig',
    'Endl',
    'Enga',
    'Exid',
    'ExidType',
    'FamCens',
    'FamEven',
    'FamFact',
    'FamHusb',
    'FamNchi',
    'FamResi',
    'FamWife',
    'Famc',
    'FamcAdop',
    'FamcStat',
    'Fams',
    'Fax',
    'Fcom',
    'File',
    'FileTran',
    'Form',
    'Gedc',
    'GedcVers',
    'Givn',
    'Grad',
    'Head',
    'HeadDate',
    'HeadLang',
    'HeadPlac',
    'HeadPlacForm',
    'HeadSourData',
    'Height',
    'Husb',
    'Idno',
    'Immi',
    'IndiCens',
    'IndiEven',
    'IndiFact',
    'IndiFamc',
    'IndiName',
    'IndiNchi',
    'IndiReli',
    'IndiTitl',
    'Inil',
    'Lang',
    'Lati',
    'Left',
    'Long',
    'Map',
    'Marb',
    'Marc',
    'Marl',
    'Marr',
    'Mars',
    'Medi',
    'Mime',
    'Name',
    'NameTran',
    'NameType',
    'Nati',
    'Natu',
    'Nick',
    'Nmr',
    'NoDate',
    'Note',
    'NoteTran',
    'Npfx',
    'Nsfx',
    'Obje',
    'Occu',
    'OrdStat',
    'Ordn',
    'Page',
    'Pedi',
    'Phon',
    'Phrase',
    'Plac',
    'PlacForm',
    'PlacTran',
    'Post',
    'Prob',
    'Publ',
    'Quay',
    'RecordFam',
    'RecordIndi',
    'RecordObje',
    'RecordRepo',
    'RecordSnote',
    'RecordSour',
    'RecordSubm',
    'Refn',
    'Reli',
    'Repo',
    'Resn',
    'Reti',
    'Role',
    'Schma',
    'Sdate',
    'Sex',
    'Slgc',
    'Slgs',
    'Snote',
    'Sour',
    'SourData',
    'SourEven',
    'Spfx',
    'Ssn',
    'Stae',
    'Subm',
    'SubmLang',
    'Surn',
    'Tag',
    'Temp',
    'Text',
    'Time',
    'Titl',
    'Top',
    'Trlr',
    'Type',
    'Uid',
    'Vers',
    'Width',
    'Wife',
    'Will',
    'Www',
]

import logging
from typing import Any

from genedata.constants import Default
from genedata.messages import Msg
from genedata.structure import (
    BaseStructure,
    FamilyXref,
    IndividualXref,
    MultimediaXref,
    RepositoryXref,
    SharedNoteXref,
    SourceXref,
    SubmitterXref,
)


class Abbr(BaseStructure):
    '''Store, validate and format the ABBR structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Abbreviation
    > A short name of a title, description, or name used for sorting, filing, and
    > retrieving records.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ABBR Structure](https://gedcom.io/terms/v7/ABBR)
    '''
    
    key: str = 'ABBR'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Addr(BaseStructure):
    '''Store, validate and format the ADDR structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Address
    > The location of, or most relevant to, the subject of the superstructure.
    > See `ADDRESS_STRUCTURE` for more details.
    > A specific building, plot, or location. The payload is the full formatted
    > address as it would appear on a mailing label, including appropriate line
    > breaks (encoded using `CONT` tags). The expected order of address components
    > varies by region; the address should be organized as expected by the addressed
    > region.
    > 
    > Optionally, additional substructures such as `STAE` and `CTRY` are provided to
    > be used by systems that have structured their addresses for indexing and
    > sorting. If the substructures and `ADDR` payload disagree, the `ADDR` payload
    > shall be taken as correct. Because the regionally-correct order and formatting
    > of address components cannot be determined from the substructures alone, the
    > `ADDR` payload is required, even if its content appears to be redundant with
    > the substructures.
    > 
    > <div class="deprecation">
    > 
    > `ADR1` and `ADR2` were introduced in version 5.5 (1996) and `ADR3` in version
    > 5.5.1 (1999), defined as "The first/second/third line of an address." Some
    > applications interpreted ADR1 as "the first line of the *street* address", but
    > most took the spec as-written and treated it as a straight copy of a line of
    > text already available in the `ADDR` payload.
    > 
    > Duplicating information bloats files and introduces the potential for
    > self-contradiction. `ADR1`, `ADR2`, and `ADR3` should not be added to new
    > files.
    > 
    > </div>
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADR1            | Many     | No       |
    | https://gedcom.io/terms/v7/ADR2            | Many     | No       |
    | https://gedcom.io/terms/v7/ADR3            | Many     | No       |
    | https://gedcom.io/terms/v7/CITY            | Many     | No       |
    | https://gedcom.io/terms/v7/CTRY            | Many     | No       |
    | https://gedcom.io/terms/v7/POST            | Many     | No       |
    | https://gedcom.io/terms/v7/STAE            | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ADDR Structure](https://gedcom.io/terms/v7/ADDR)
    '''
    
    key: str = 'ADDR'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Adop(BaseStructure):
    '''Store, validate and format the ADOP structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Adoption
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > adoption
    > Creation of a legally approved child-parent relationship that does not
    > exist biologically.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/ADOP-FAMC       | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ADOP Structure](https://gedcom.io/terms/v7/ADOP)
    '''
    
    key: str = 'ADOP'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class AdopFamc(BaseStructure):
    '''Store, validate and format the FAMC structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Family child
    > The individual or couple that adopted this individual.
    > 
    > Adoption by an individual, rather than a couple, may be represented either by
    > pointing to a `FAM` where that individual is a `HUSB` or `WIFE` and using a
    > `https://gedcom.io/terms/v7/FAMC-ADOP` substructure to indicate which 1
    > performed the adoption; or by using a `FAM` where the adopting individual is
    > the only `HUSB`/`WIFE`.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/FAMC-ADOP       | Many     | No       |
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-FAM>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM FAMC Structure](https://gedcom.io/terms/v7/ADOP-FAMC)
    '''
    
    key: str = 'ADOP-FAMC'
        
    def __init__(self, value: FamilyXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Adr1(BaseStructure):
    '''Store, validate and format the ADR1 structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Address Line 1
    > The first line of the address, used for indexing. This structure's payload
    > should be a single line of text equal to the first line of the corresponding
    > `ADDR`. See `ADDRESS_STRUCTURE` for more details.
    > 
    > <div class="deprecation">
    > 
    > `ADR1` should not be added to new files; see `ADDRESS_STRUCTURE` for more
    > details.
    > 
    > </div>
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ADR1 Structure](https://gedcom.io/terms/v7/ADR1)
    '''
    
    key: str = 'ADR1'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
        logging.info(Msg.DEPRECATION_WARNING.format(self.class_name))
    

class Adr2(BaseStructure):
    '''Store, validate and format the ADR2 structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Address Line 2
    > The second line of the address, used for indexing. This structure's payload
    > should be a single line of text equal to the second line of the corresponding
    > `ADDR`. See `ADDRESS_STRUCTURE` for more details.
    > 
    > <div class="deprecation">
    > 
    > `ADR2` should not be added to new files; see `ADDRESS_STRUCTURE` for more
    > details.
    > 
    > </div>
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ADR2 Structure](https://gedcom.io/terms/v7/ADR2)
    '''
    
    key: str = 'ADR2'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
        logging.info(Msg.DEPRECATION_WARNING.format(self.class_name))
    

class Adr3(BaseStructure):
    '''Store, validate and format the ADR3 structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Address Line 3
    > The third line of the address, used for indexing. This structure's payload
    > should be a single line of text equal to the third line of the corresponding
    > `ADDR`. See `ADDRESS_STRUCTURE` for more details.
    > 
    > <div class="deprecation">
    > 
    > `ADR3` should not be added to new files; see `ADDRESS_STRUCTURE` for more
    > details.
    > 
    > </div>
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ADR3 Structure](https://gedcom.io/terms/v7/ADR3)
    '''
    
    key: str = 'ADR3'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
        logging.info(Msg.DEPRECATION_WARNING.format(self.class_name))
    

class Age(BaseStructure):
    '''Store, validate and format the AGE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Age at event
    > The age of the individual at the time an event occurred, or the age listed
    > in the document.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Age
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM AGE Structure](https://gedcom.io/terms/v7/AGE)
    '''
    
    key: str = 'AGE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Agnc(BaseStructure):
    '''Store, validate and format the AGNC structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Responsible agency
    > The organization, institution, corporation, person, or other entity that
    > has responsibility for the associated context. Examples are an employer of
    > a person of an associated occupation, or a church that administered rites
    > or events, or an organization responsible for creating or archiving
    > records.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM AGNC Structure](https://gedcom.io/terms/v7/AGNC)
    '''
    
    key: str = 'AGNC'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Alia(BaseStructure):
    '''Store, validate and format the ALIA structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Alias
    > A single individual may have facts distributed across multiple individual
    > records, connected by `ALIA` pointers (named after "alias" in the computing
    > sense, not the pseudonym sense).
    > 
    > <div class="note">
    > 
    > This specification does not define how to connect `INDI` records with `ALIA`.
    > Some systems organize `ALIA` pointers to create a tree structure, with the root
    > `INDI` record containing the composite view of all facts in the leaf `INDI`
    > records. Others distribute events and attributes between `INDI` records
    > mutually linked by symmetric pairs of `ALIA` pointers. A future version of this
    > specification may adjust the definition of `ALIA`.
    > 
    > </div>
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-INDI>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ALIA Structure](https://gedcom.io/terms/v7/ALIA)
    '''
    
    key: str = 'ALIA'
        
    def __init__(self, value: IndividualXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Anci(BaseStructure):
    '''Store, validate and format the ANCI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Ancestor interest
    > Indicates an interest in additional research for ancestors of this
    > individual. (See also `DESI`).
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-SUBM>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ANCI Structure](https://gedcom.io/terms/v7/ANCI)
    '''
    
    key: str = 'ANCI'
        
    def __init__(self, value: SubmitterXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Anul(BaseStructure):
    '''Store, validate and format the ANUL structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Annulment
    > A [Family Event]. See also `FAMILY_EVENT_STRUCTURE`.
    > annulment
    > Declaring a marriage void from the beginning (never existed).
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ANUL Structure](https://gedcom.io/terms/v7/ANUL)
    '''
    
    key: str = 'ANUL'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Asso(BaseStructure):
    '''Store, validate and format the ASSO structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Associates
    > A pointer to an associated individual. See `ASSOCIATION_STRUCTURE` for more
    > details.
    > An individual associated with the subject of the superstructure. The nature of
    > the association is indicated in the `ROLE` substructure.
    > 
    > A `voidPtr` and `PHRASE` can be used to describe associations to people not
    > referenced by any `INDI` record.
    > 
    > <div class="example">
    > 
    > The following indicates that "Mr Stockdale" was the individual's teacher and
    > that individual `@I2@` was the clergy officiating at their baptism.
    > 
    > ```gedcom
    > 0 @I1@ INDI
    > 1 ASSO @VOID@
    > 2 PHRASE Mr Stockdale
    > 2 ROLE OTHER
    > 3 PHRASE Teacher
    > 1 BAPM
    > 2 DATE 1930
    > 2 ASSO @I2@
    > 3 ROLE CLERGY
    > ```
    > 
    > </div>
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
    | https://gedcom.io/terms/v7/ROLE            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-INDI>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ASSO Structure](https://gedcom.io/terms/v7/ASSO)
    '''
    
    key: str = 'ASSO'
        
    def __init__(self, value: IndividualXref, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class Auth(BaseStructure):
    '''Store, validate and format the AUTH structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Author
    > The person, agency, or entity who created the record. For a published work,
    > this could be the author, compiler, transcriber, abstractor, or editor. For
    > an unpublished source, this may be an individual, a government agency,
    > church organization, or private organization.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM AUTH Structure](https://gedcom.io/terms/v7/AUTH)
    '''
    
    key: str = 'AUTH'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Bapl(BaseStructure):
    '''Store, validate and format the BAPL structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Baptism, Latter-Day Saint
    > A [Latter-Day Saint Ordinance]. See also `LDS_INDIVIDUAL_ORDINANCE`.
    > baptism
    > The event of baptism performed at age 8 or later by priesthood authority of
    > The Church of Jesus Christ of Latter-day Saints. (See also [`BAPM`])
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TEMP            | Many     | No       |
    | https://gedcom.io/terms/v7/ord-STAT        | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM BAPL Structure](https://gedcom.io/terms/v7/BAPL)
    '''
    
    key: str = 'BAPL'
        
    def __init__(self, subs: Any = None) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Bapm(BaseStructure):
    '''Store, validate and format the BAPM structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Baptism
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > baptism
    > Baptism, performed in infancy or later. (See also [`BAPL`] and `CHR`.)
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM BAPM Structure](https://gedcom.io/terms/v7/BAPM)
    '''
    
    key: str = 'BAPM'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Barm(BaseStructure):
    '''Store, validate and format the BARM structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Bar Mitzvah
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > Bar Mitzvah
    > The ceremonial event held when a Jewish boy reaches age 13.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM BARM Structure](https://gedcom.io/terms/v7/BARM)
    '''
    
    key: str = 'BARM'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Basm(BaseStructure):
    '''Store, validate and format the BASM structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Bas Mitzvah
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > Bas Mitzvah
    > The ceremonial event held when a Jewish girl reaches age 13, also known as
    > "Bat Mitzvah."
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM BASM Structure](https://gedcom.io/terms/v7/BASM)
    '''
    
    key: str = 'BASM'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Birt(BaseStructure):
    '''Store, validate and format the BIRT structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Birth
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > birth
    > Entering into life.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAMC            | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM BIRT Structure](https://gedcom.io/terms/v7/BIRT)
    '''
    
    key: str = 'BIRT'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Bles(BaseStructure):
    '''Store, validate and format the BLES structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Blessing
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > blessing
    > Bestowing divine care or intercession. Sometimes given in connection with a
    > naming ceremony.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM BLES Structure](https://gedcom.io/terms/v7/BLES)
    '''
    
    key: str = 'BLES'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Buri(BaseStructure):
    '''Store, validate and format the BURI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Depositing remains
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > 
    > Although defined as any depositing of remains since it was introduced in the
    > first version of GEDCOM, this tag is a shortened form of the English word
    > "burial" and has been interpreted to mean "depositing of remains by burial" by
    > some applications and users. In the absence of a clarifying `TYPE` substructure
    > it is likely, but not guaranteed, that a `BURI` structure refers to a burial
    > rather than another form of depositing remains.
    > 
    > depositing remains
    > Depositing the mortal remains of a deceased person.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM BURI Structure](https://gedcom.io/terms/v7/BURI)
    '''
    
    key: str = 'BURI'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Caln(BaseStructure):
    '''Store, validate and format the CALN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Call number
    > An identification or reference description used to file and retrieve items
    > from the holdings of a repository. Despite the word "number" in the name,
    > may contain any character, not just digits.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/MEDI            | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CALN Structure](https://gedcom.io/terms/v7/CALN)
    '''
    
    key: str = 'CALN'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Cast(BaseStructure):
    '''Store, validate and format the CAST structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Caste
    > An [Individual Attribute]. See also `INDIVIDUAL_ATTRIBUTE_STRUCTURE`.
    > caste
    > The name of an individual's rank or status in society which is sometimes
    > based on racial or religious differences, or differences in wealth,
    > inherited rank, profession, or occupation.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CAST Structure](https://gedcom.io/terms/v7/CAST)
    '''
    
    key: str = 'CAST'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Caus(BaseStructure):
    '''Store, validate and format the CAUS structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Cause
    > The reasons which precipitated an event. It is often used subordinate to a
    > death event to show cause of death, such as might be listed on a death
    > certificate.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CAUS Structure](https://gedcom.io/terms/v7/CAUS)
    '''
    
    key: str = 'CAUS'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Chan(BaseStructure):
    '''Store, validate and format the CHAN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Change
    > The most recent change to the superstructure. This is metadata about the
    > structure itself, not data about its subject. See `CHANGE_DATE` for more
    > details.
    > The date of the most recent modification of the superstructure, optionally with
    > notes about that modification.
    > 
    > The `NOTE` substructure may describe previous changes as well as the most
    > recent, although only the most recent change is described by the `DATE`
    > substructure.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/DATE-exact      | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CHAN Structure](https://gedcom.io/terms/v7/CHAN)
    '''
    
    key: str = 'CHAN'
        
    def __init__(self, subs: Any) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Chil(BaseStructure):
    '''Store, validate and format the CHIL structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Child
    > The child in a family, whether biological, adopted, foster, sealed, or
    > other relationship.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-INDI>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CHIL Structure](https://gedcom.io/terms/v7/CHIL)
    '''
    
    key: str = 'CHIL'
        
    def __init__(self, value: IndividualXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Chr(BaseStructure):
    '''Store, validate and format the CHR structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Christening
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > christening
    > Baptism or naming events for a child.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAMC            | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CHR Structure](https://gedcom.io/terms/v7/CHR)
    '''
    
    key: str = 'CHR'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Chra(BaseStructure):
    '''Store, validate and format the CHRA structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Christening, adult
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > adult christening
    > Baptism or naming events for an adult person.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CHRA Structure](https://gedcom.io/terms/v7/CHRA)
    '''
    
    key: str = 'CHRA'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class City(BaseStructure):
    '''Store, validate and format the CITY structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > City
    > The name of the city used in the address. See `ADDRESS_STRUCTURE` for more
    > details.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CITY Structure](https://gedcom.io/terms/v7/CITY)
    '''
    
    key: str = 'CITY'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Conf(BaseStructure):
    '''Store, validate and format the CONF structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Confirmation
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > confirmation
    > Conferring full church membership.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CONF Structure](https://gedcom.io/terms/v7/CONF)
    '''
    
    key: str = 'CONF'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Conl(BaseStructure):
    '''Store, validate and format the CONL structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Confirmation, Latter-Day Saint
    > A [Latter-Day Saint Ordinance]. See also `LDS_INDIVIDUAL_ORDINANCE`.
    > confirmation
    > The religious event by which a person receives membership in The Church of
    > Jesus Christ of Latter-day Saints. (See also [`CONF`])
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TEMP            | Many     | No       |
    | https://gedcom.io/terms/v7/ord-STAT        | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CONL Structure](https://gedcom.io/terms/v7/CONL)
    '''
    
    key: str = 'CONL'
        
    def __init__(self, subs: Any = None) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Copr(BaseStructure):
    '''Store, validate and format the COPR structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Copyright
    > A copyright statement, as appropriate for the copyright laws applicable to
    > this data.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM COPR Structure](https://gedcom.io/terms/v7/COPR)
    '''
    
    key: str = 'COPR'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Corp(BaseStructure):
    '''Store, validate and format the CORP structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Corporate name
    > The name of the business, corporation, or person that produced or
    > commissioned the product.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CORP Structure](https://gedcom.io/terms/v7/CORP)
    '''
    
    key: str = 'CORP'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Crea(BaseStructure):
    '''Store, validate and format the CREA structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Creation
    > The initial creation of the superstructure. This is metadata about the
    > structure itself, not data about its subject. See `CREATION_DATE` for more
    > details.
    > The date of the initial creation of the superstructure. Because this refers
    > to the initial creation, it should not be modified after the structure is
    > created.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/DATE-exact      | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CREA Structure](https://gedcom.io/terms/v7/CREA)
    '''
    
    key: str = 'CREA'
        
    def __init__(self, subs: Any) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Crem(BaseStructure):
    '''Store, validate and format the CREM structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Cremation
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > cremation
    > The act of reducing a dead body to ashes by fire.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CREM Structure](https://gedcom.io/terms/v7/CREM)
    '''
    
    key: str = 'CREM'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Crop(BaseStructure):
    '''Store, validate and format the CROP structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Crop
    > A subregion of an image to display. It is only valid when the superstructure
    > links to a `MULTIMEDIA_RECORD` with at least 1 `FILE` substructure that refers
    > to an external file with a defined pixel unit.
    > 
    > `LEFT` and `TOP` indicate the top-left corner of the region to display. `WIDTH`
    > and `HEIGHT` indicate how many pixels wide and tall the region to display is.
    > If omitted, `LEFT` and `TOP` each default to 0; `WIDTH` defaults to the image
    > width minus `LEFT`; and `HEIGHT` defaults to the image height minus `TOP`.
    > 
    > If the superstructure links to a `MULTIMEDIA_RECORD` that includes multiple
    > `FILE` substructures, the `CROP` applies to the first `FILE` to which it can
    > apply, namely the first external file with a defined pixel unit.
    > 
    > It is recommended that `CROP` be used only with a single-FILE
    > `MULTIMEDIA_RECORD`.
    > 
    > The following are errors:
    > 
    > - `LEFT` or `LEFT` + `WIDTH` exceed the image width.
    > - `TOP` or `TOP` + `HEIGHT` exceed the image height.
    > - `CROP` applied to a non-image or image without a defined pixel unit.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/HEIGHT          | Many     | No       |
    | https://gedcom.io/terms/v7/LEFT            | Many     | No       |
    | https://gedcom.io/terms/v7/TOP             | Many     | No       |
    | https://gedcom.io/terms/v7/WIDTH           | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CROP Structure](https://gedcom.io/terms/v7/CROP)
    '''
    
    key: str = 'CROP'
        
    def __init__(self, subs: Any = None) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Ctry(BaseStructure):
    '''Store, validate and format the CTRY structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Country
    > The name of the country that pertains to the associated address. See
    > `ADDRESS_STRUCTURE` for more details.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CTRY Structure](https://gedcom.io/terms/v7/CTRY)
    '''
    
    key: str = 'CTRY'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Data(BaseStructure):
    '''Store, validate and format the DATA structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Data
    > A structure with no payload used to distinguish a description of something
    > from metadata about it. For example, `SOUR` and its other substructures
    > describe a source itself, while `SOUR`.`DATA` describes the content of the
    > source.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/DATA-EVEN       | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DATA Structure](https://gedcom.io/terms/v7/DATA)
    '''
    
    key: str = 'DATA'
        
    def __init__(self, subs: Any = None) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class DataEven(BaseStructure):
    '''Store, validate and format the EVEN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Event
    > A list of enumerated values from set `https://gedcom.io/terms/v7/enumset-
    > EVENATTR` indicating the types of events that were recorded in a particular
    > source. Each event type is separated by a comma and space. For example, a
    > parish register of births, deaths, and marriages would be `BIRT, DEAT,
    > MARR`.
        
    Enumerations:
    - 'CENS': https://gedcom.io/terms/v7/enum-CENS
        > A census event; either `https://gedcom.io/terms/v7/INDI-CENS` or
        > `https://gedcom.io/terms/v7/FAM-CENS`
    - 'EVEN': https://gedcom.io/terms/v7/enum-EVEN
        > A generic event; either `https://gedcom.io/terms/v7/INDI-EVEN` or
        > `https://gedcom.io/terms/v7/FAM-EVEN`
    - 'FACT': https://gedcom.io/terms/v7/enum-FACT
        > A generic attribute; either `https://gedcom.io/terms/v7/INDI-FACT` or
        > `https://gedcom.io/terms/v7/FAM-FACT`
    - 'NCHI': https://gedcom.io/terms/v7/enum-NCHI
        > A count of children; either `https://gedcom.io/terms/v7/INDI-NCHI` or
        > `https://gedcom.io/terms/v7/FAM-NCHI`
    - 'RESI': https://gedcom.io/terms/v7/enum-RESI
        > A residence attribute; either `https://gedcom.io/terms/v7/INDI-RESI` or
        > `https://gedcom.io/terms/v7/FAM-RESI`
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/DATA-EVEN-DATE  | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-List#Enum
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM EVEN Structure](https://gedcom.io/terms/v7/DATA-EVEN)
    '''
    
    key: str = 'DATA-EVEN'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class DataEvenDate(BaseStructure):
    '''Store, validate and format the DATE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Date
    > The `DatePeriod` covered by the entire source; the period during which this
    > source recorded events.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Date#period
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DATE Structure](https://gedcom.io/terms/v7/DATA-EVEN-DATE)
    '''
    
    key: str = 'DATA-EVEN-DATE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Date(BaseStructure):
    '''Store, validate and format the DATE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Date
    > The principal date of the subject of the superstructure. The payload is a
    > `DateValue`.
    > 
    > When the superstructure is an event, the principal date indicates when the
    > event took place.
    > 
    > When the superstructure is an attribute, the principal date indicates when the
    > attribute was observed, asserted, or applied. A date period might put bounds on
    > the attributes applicability, but other date forms assume that the attribute
    > may have also applied on other dates too.
    > 
    > When the superstructure is a `https://gedcom.io/terms/v7/SOUR-DATA`, the
    > principal date indicates when the data was entered into the source; or, for a
    > source like a website that changes over time, a date on which the source
    > contained the data.
    > 
    > See `DATE_VALUE` for more details.
    > 
    > A date, optionally with a time and/or a phrase. If there is a `TIME`, it
    > asserts that the event happened at a specific time on a single day. `TIME`
    > should not be used with `DatePeriod` but may be used with other date types.
    > 
    > <div class="note">
    > 
    > There is currently no provision for approximate times or time phrases. Time
    > phrases are expected to be added in version 7.1.
    > 
    > </div>
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
    | https://gedcom.io/terms/v7/TIME            | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Date
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DATE Structure](https://gedcom.io/terms/v7/DATE)
    '''
    
    key: str = 'DATE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class DateExact(BaseStructure):
    '''Store, validate and format the DATE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Date
    > The principal date of the subject of the superstructure. The payload is a
    > `DateExact`.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/TIME            | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Date#exact
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DATE Structure](https://gedcom.io/terms/v7/DATE-exact)
    '''
    
    key: str = 'DATE-exact'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Deat(BaseStructure):
    '''Store, validate and format the DEAT structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Death
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > death
    > Mortal life terminates.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DEAT Structure](https://gedcom.io/terms/v7/DEAT)
    '''
    
    key: str = 'DEAT'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Desi(BaseStructure):
    '''Store, validate and format the DESI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Descendant Interest
    > Indicates an interest in research to identify additional descendants of
    > this individual. See also `ANCI`.
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-SUBM>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DESI Structure](https://gedcom.io/terms/v7/DESI)
    '''
    
    key: str = 'DESI'
        
    def __init__(self, value: SubmitterXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Dest(BaseStructure):
    '''Store, validate and format the DEST structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Destination
    > An identifier for the system expected to receive this document. See
    > `HEAD`.`SOUR` for guidance on choosing identifiers.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DEST Structure](https://gedcom.io/terms/v7/DEST)
    '''
    
    key: str = 'DEST'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Div(BaseStructure):
    '''Store, validate and format the DIV structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Divorce
    > A [Family Event]. See also `FAMILY_EVENT_STRUCTURE`.
    > divorce
    > Dissolving a marriage through civil action.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DIV Structure](https://gedcom.io/terms/v7/DIV)
    '''
    
    key: str = 'DIV'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Divf(BaseStructure):
    '''Store, validate and format the DIVF structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Divorce filing
    > A [Family Event]. See also `FAMILY_EVENT_STRUCTURE`.
    > divorce filed
    > Filing for a divorce by a spouse.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DIVF Structure](https://gedcom.io/terms/v7/DIVF)
    '''
    
    key: str = 'DIVF'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Dscr(BaseStructure):
    '''Store, validate and format the DSCR structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Description
    > An [Individual Attribute]. See also `INDIVIDUAL_ATTRIBUTE_STRUCTURE`.
    > physical description
    > The physical characteristics of a person.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DSCR Structure](https://gedcom.io/terms/v7/DSCR)
    '''
    
    key: str = 'DSCR'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Educ(BaseStructure):
    '''Store, validate and format the EDUC structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Education
    > An [Individual Attribute]. See also `INDIVIDUAL_ATTRIBUTE_STRUCTURE`.
    > education
    > Indicator of a level of education attained.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM EDUC Structure](https://gedcom.io/terms/v7/EDUC)
    '''
    
    key: str = 'EDUC'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Email(BaseStructure):
    '''Store, validate and format the EMAIL structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Email
    > An electronic mail address, as defined by any relevant standard such as [RFC
    > 3696], [RFC 5321], or [RFC 5322].
    > 
    > If an invalid email address is present upon import, it should be preserved
    > as-is on export.
    > 
    > <div class="note">
    > 
    > The version 5.5.1 specification contained a typo where this tag was sometimes
    > written `EMAI` and sometimes written `EMAIL`. `EMAIL` should be used in version
    > 7.0 and later.
    > 
    > </div>
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM EMAIL Structure](https://gedcom.io/terms/v7/EMAIL)
    '''
    
    key: str = 'EMAIL'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Emig(BaseStructure):
    '''Store, validate and format the EMIG structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Emigration
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > emigration
    > Leaving one's homeland with the intent of residing elsewhere.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM EMIG Structure](https://gedcom.io/terms/v7/EMIG)
    '''
    
    key: str = 'EMIG'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Endl(BaseStructure):
    '''Store, validate and format the ENDL structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Endowment, Latter-Day Saint
    > A [Latter-Day Saint Ordinance]. See also `LDS_INDIVIDUAL_ORDINANCE`.
    > endowment
    > A religious event where an endowment ordinance for an individual was
    > performed by priesthood authority in a temple of The Church of Jesus Christ
    > of Latter-day Saints.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TEMP            | Many     | No       |
    | https://gedcom.io/terms/v7/ord-STAT        | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ENDL Structure](https://gedcom.io/terms/v7/ENDL)
    '''
    
    key: str = 'ENDL'
        
    def __init__(self, subs: Any = None) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Enga(BaseStructure):
    '''Store, validate and format the ENGA structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Engagement
    > A [Family Event]. See also `FAMILY_EVENT_STRUCTURE`.
    > engagement
    > Recording or announcing an agreement between 2 people to become married.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ENGA Structure](https://gedcom.io/terms/v7/ENGA)
    '''
    
    key: str = 'ENGA'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Exid(BaseStructure):
    '''Store, validate and format the EXID structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > External Identifier
    > An identifier for the subject of the superstructure. The identifier is
    > maintained by some external authority; the authority owning the identifier is
    > provided in the TYPE substructure; see `EXID`.`TYPE` for more details.
    > 
    > Depending on the maintaining authority, an `EXID` may be a unique identifier
    > for the subject, an identifier for 1 of several views of the subject, or an
    > identifier for the externally-maintained copy of the same information as is
    > contained in this structure. However, unlike `UID` and `REFN`, `EXID` does not
    > identify a structure; structures with the same `EXID` may have originated
    > independently rather than by edits from the same starting point.
    > 
    > `EXID` identifiers are expected to be unique. Once assigned, an `EXID`
    > identifier should never be re-used for any other purpose.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/EXID-TYPE       | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM EXID Structure](https://gedcom.io/terms/v7/EXID)
    '''
    
    key: str = 'EXID'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class ExidType(BaseStructure):
    '''Store, validate and format the TYPE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Type
    > The authority issuing the `EXID`, represented as a URI. It is recommended that
    > this be a URL.
    > 
    > If the authority maintains stable URLs for each identifier it issues, it is
    > recommended that the `TYPE` payload be selected such that appending the `EXID`
    > payload to it yields that URL. However, this is not required and a different
    > URI for the set of issued identifiers may be used instead.
    > 
    > Registered URIs are listed in the [exid-types registry], where fields are
    > defined using the [YAML file format].
    > 
    > Additional type URIs can be registered by filing a [GitHub pull request].
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TYPE Structure](https://gedcom.io/terms/v7/EXID-TYPE)
    '''
    
    key: str = 'EXID-TYPE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class FamCens(BaseStructure):
    '''Store, validate and format the CENS structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Census
    > An [Family Event].
    > census
    > Periodic count of the population for a designated locality, such as a
    > national or state census.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CENS Structure](https://gedcom.io/terms/v7/FAM-CENS)
    '''
    
    key: str = 'FAM-CENS'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class FamEven(BaseStructure):
    '''Store, validate and format the EVEN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Event
    > See `https://gedcom.io/terms/v7/INDI-EVEN`.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM EVEN Structure](https://gedcom.io/terms/v7/FAM-EVEN)
    '''
    
    key: str = 'FAM-EVEN'
        
    def __init__(self, value: str, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class FamFact(BaseStructure):
    '''Store, validate and format the FACT structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Fact
    > See `https://gedcom.io/terms/v7/INDI-FACT`.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM FACT Structure](https://gedcom.io/terms/v7/FAM-FACT)
    '''
    
    key: str = 'FAM-FACT'
        
    def __init__(self, value: str, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class FamHusb(BaseStructure):
    '''Store, validate and format the HUSB structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Husband
    > This is a partner in a `FAM` record. See `FAMILY_RECORD` for more details.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-INDI>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM HUSB Structure](https://gedcom.io/terms/v7/FAM-HUSB)
    '''
    
    key: str = 'FAM-HUSB'
        
    def __init__(self, value: IndividualXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class FamNchi(BaseStructure):
    '''Store, validate and format the NCHI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Number of children
    > A [Family Attribute]. See also `FAMILY_ATTRIBUTE_STRUCTURE`.
    > number of children
    > The number of children that belong to this family.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#nonNegativeInteger
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM NCHI Structure](https://gedcom.io/terms/v7/FAM-NCHI)
    '''
    
    key: str = 'FAM-NCHI'
        
    def __init__(self, value: int, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class FamResi(BaseStructure):
    '''Store, validate and format the RESI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Residence
    > A [Family Attribute]. See also `FAMILY_ATTRIBUTE_STRUCTURE`.
    > 
    > See `https://gedcom.io/terms/v7/INDI-RESI` for comments on the use of payload
    > strings in `RESI` structures.
    > 
    > residence
    > An address or place of residence where a family resided.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM RESI Structure](https://gedcom.io/terms/v7/FAM-RESI)
    '''
    
    key: str = 'FAM-RESI'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class FamWife(BaseStructure):
    '''Store, validate and format the WIFE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Wife
    > A partner in a `FAM` record. See `FAMILY_RECORD` for more details.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-INDI>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM WIFE Structure](https://gedcom.io/terms/v7/FAM-WIFE)
    '''
    
    key: str = 'FAM-WIFE'
        
    def __init__(self, value: IndividualXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Famc(BaseStructure):
    '''Store, validate and format the FAMC structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Family child
    > The family with which this individual event is associated.
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-FAM>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM FAMC Structure](https://gedcom.io/terms/v7/FAMC)
    '''
    
    key: str = 'FAMC'
        
    def __init__(self, value: FamilyXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class FamcAdop(BaseStructure):
    '''Store, validate and format the ADOP structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Adoption
    > An enumerated value from set `https://gedcom.io/terms/v7/enumset-ADOP`
    > indicating which parent(s) in the family adopted this individual.
        
    Enumerations:
    - 'HUSB': https://gedcom.io/terms/v7/enum-ADOP-HUSB
        > Adopted by the `HUSB` of the `FAM` pointed to by `FAMC`.
    - 'WIFE': https://gedcom.io/terms/v7/enum-ADOP-WIFE
        > Adopted by the `WIFE` of the `FAM` pointed to by `FAMC`.
    - 'BOTH': https://gedcom.io/terms/v7/enum-BOTH
        > Adopted by both `HUSB` and `WIFE` of the `FAM` pointed to by `FAMC`
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Enum
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ADOP Structure](https://gedcom.io/terms/v7/FAMC-ADOP)
    '''
    
    key: str = 'FAMC-ADOP'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class FamcStat(BaseStructure):
    '''Store, validate and format the STAT structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Status
    > An enumerated value from set `https://gedcom.io/terms/v7/enumset-FAMC-STAT`
    > assessing of the state or condition of a researcher's belief in a family
    > connection.
        
    Enumerations:
    - 'CHALLENGED': https://gedcom.io/terms/v7/enum-CHALLENGED
        > Linking this child to this family is suspect, but the linkage has been
        > neither proven nor disproven.
    - 'DISPROVEN': https://gedcom.io/terms/v7/enum-DISPROVEN
        > There has been a claim by some that this child belongs to this family, but
        > the linkage has been disproven.
    - 'PROVEN': https://gedcom.io/terms/v7/enum-PROVEN
        > Linking this child to this family has been proven.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Enum
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM STAT Structure](https://gedcom.io/terms/v7/FAMC-STAT)
    '''
    
    key: str = 'FAMC-STAT'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Fams(BaseStructure):
    '''Store, validate and format the FAMS structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Family spouse
    > The family in which an individual appears as a partner. See `FAMILY_RECORD`
    > for more details.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-FAM>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM FAMS Structure](https://gedcom.io/terms/v7/FAMS)
    '''
    
    key: str = 'FAMS'
        
    def __init__(self, value: FamilyXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Fax(BaseStructure):
    '''Store, validate and format the FAX structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Facsimile
    > A fax telephone number appropriate for sending data facsimiles. See `PHON`
    > for additional comments on telephone numbers.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM FAX Structure](https://gedcom.io/terms/v7/FAX)
    '''
    
    key: str = 'FAX'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Fcom(BaseStructure):
    '''Store, validate and format the FCOM structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > First communion
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > first communion
    > The first act of sharing in the Lord's supper as part of church worship.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM FCOM Structure](https://gedcom.io/terms/v7/FCOM)
    '''
    
    key: str = 'FCOM'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class File(BaseStructure):
    '''Store, validate and format the FILE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > File reference
    > A reference to an external file. See the [File Path datatype] for more details.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/FILE-TRAN       | Many     | No       |
    | https://gedcom.io/terms/v7/FORM            | Many     | No       |
    | https://gedcom.io/terms/v7/TITL            | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-FilePath
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM FILE Structure](https://gedcom.io/terms/v7/FILE)
    '''
    
    key: str = 'FILE'
        
    def __init__(self, value: str, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class FileTran(BaseStructure):
    '''Store, validate and format the TRAN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Translation
    > A type of `TRAN` for external media files. Each
    > `https://gedcom.io/terms/v7/NOTE-TRAN` must have a `FORM` substructure. See
    > also `FILE` and the [File Path datatype].
    > 
    > <div class="example">
    > 
    > If an mp3 audio file has been transcoded as an ogg file and a timestamped
    > transcript has been extracted as a WebVTT file, the resulting set of files
    > might be presented as follows:
    > 
    > ```gedcom
    > 0 @EX@ OBJE
    > 1 FILE media/original.mp3
    > 2 FORM audio/mp3
    > 2 TRAN media/derived.oga
    > 3 FORM audio/ogg
    > 2 TRAN media/transcript.vtt
    > 3 FORM text/vtt
    > ```
    > 
    > </div>
    > 
    > Note that `FILE`.`TRAN` refers to translation to a different digital format,
    > not to translation to a different human language. Files that differ in the
    > human language of their content should each be given their own `FILE`
    > structure.
    > 
    > A representation of the superstructure's data in a different format.
    > 
    > In some situations it is desirable to provide the same semantic content in
    > multiple formats. Where this is desirable, a `TRAN` substructure is used, where
    > the specific format is given in its language tag substructure, media type
    > substructure, or both.
    > 
    > Different `TRAN` structures are used in different contexts to fully capture the
    > structure of the information being presented in multiple formats. In all cases,
    > a `TRAN` structure's payload and substructures should provide only information
    > also contained in the `TRAN` structures' superstructure, but provide it in a
    > new language, script, or media type.
    > 
    > Each `TRAN` substructure must have either a language tag or a media type or
    > both. Each `TRAN` structure must differ from its superstructure and from every
    > other `TRAN` substructure of its superstructure in either its language tag or
    > its media type or both.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/FORM            | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-FilePath
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TRAN Structure](https://gedcom.io/terms/v7/FILE-TRAN)
    '''
    
    key: str = 'FILE-TRAN'
        
    def __init__(self, value: str, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class Form(BaseStructure):
    '''Store, validate and format the FORM structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Format
    > The [media type] of the file referenced by the superstructure.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/MEDI            | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/ns/dcat#mediaType
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM FORM Structure](https://gedcom.io/terms/v7/FORM)
    '''
    
    key: str = 'FORM'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Gedc(BaseStructure):
    '''Store, validate and format the GEDC structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > GEDCOM
    > A container for information about the entire document.
    > 
    > It is recommended that applications write `GEDC` with its required substructure
    > `https://gedcom.io/terms/v7/GEDC-VERS` as the first substructure of `HEAD`.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/GEDC-VERS       | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM GEDC Structure](https://gedcom.io/terms/v7/GEDC)
    '''
    
    key: str = 'GEDC'
        
    def __init__(self, subs: Any) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class GedcVers(BaseStructure):
    '''Store, validate and format the VERS structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Version
    > The version number of the official specification that this document's data
    > conforms to. This must include the major and minor version (for example,
    > "`7.0`"); it may include the patch as well (for example, "`7.0.1`"), but
    > doing so is not required. See [A Guide to Version Numbers] for more details
    > about version numbers.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM VERS Structure](https://gedcom.io/terms/v7/GEDC-VERS)
    '''
    
    key: str = 'GEDC-VERS'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Givn(BaseStructure):
    '''Store, validate and format the GIVN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Given name
    > A given or earned name used for official identification of a person.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM GIVN Structure](https://gedcom.io/terms/v7/GIVN)
    '''
    
    key: str = 'GIVN'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Grad(BaseStructure):
    '''Store, validate and format the GRAD structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Graduation
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > graduation
    > Awarding educational diplomas or degrees to individuals.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM GRAD Structure](https://gedcom.io/terms/v7/GRAD)
    '''
    
    key: str = 'GRAD'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Head(BaseStructure):
    '''Store, validate and format the HEAD structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Header
    > A pseudo-structure for storing metadata about the document. See [The Header
    > and Trailer] for more details.
    > The header pseudo-structure provides metadata about the entire dataset. A few
    > substructures of note:
    > 
    > - `GEDC` identifies the specification that this document conforms to. It is
    >   recommended that `GEDC` be the first substructure of the header.
    > - `SCHMA` gives the meaning of extension tags; see [Extensions] for more
    >   details.
    > - `SOUR` describes the originating software.
    >   - `CORP` describes the corporation creating the software.
    >   - `HEAD`.`SOUR`.`DATA` describes a larger database, electronic data source,
    >     or digital repository this data is extracted from.
    > - `LANG` and `PLAC` give a default value for the rest of the document.
    > 
    > <div class="deprecation">
    > 
    > `HEAD`.`SOUR`.`DATA` is now deprecated and applications should use
    > `HEAD`.`SOUR`.`NAME` instead.
    > 
    > </div>
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/COPR            | Many     | No       |
    | https://gedcom.io/terms/v7/DEST            | Many     | No       |
    | https://gedcom.io/terms/v7/GEDC            | Many     | No       |
    | https://gedcom.io/terms/v7/HEAD-DATE       | Many     | No       |
    | https://gedcom.io/terms/v7/HEAD-LANG       | Many     | No       |
    | https://gedcom.io/terms/v7/HEAD-PLAC       | Many     | No       |
    | https://gedcom.io/terms/v7/HEAD-SOUR       | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/SCHMA           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SUBM            | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM HEAD Structure](https://gedcom.io/terms/v7/HEAD)
    '''
    
    key: str = 'HEAD'
        
    def __init__(self, subs: Any) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class HeadDate(BaseStructure):
    '''Store, validate and format the DATE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Date
    > The `DateExact` that this document was created.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/TIME            | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Date#exact
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DATE Structure](https://gedcom.io/terms/v7/HEAD-DATE)
    '''
    
    key: str = 'HEAD-DATE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class HeadLang(BaseStructure):
    '''Store, validate and format the LANG structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Language
    > A default language which may be used to interpret any `Text`-typed payloads
    > that lack a specific language tag from a `https://gedcom.io/terms/v7/LANG`
    > structure. An application may choose to use a different default based on its
    > knowledge of the language preferences of the user.
    > 
    > The payload of the `LANG` structure is a language tag, as defined by [BCP 47].
    > 
    > <div class="note">
    > 
    > Some algorithms on text are language-specific. Examples include sorting
    > sequences, name comparison and phonetic name matching algorithms,
    > spell-checking, computer-synthesized speech, Braille transcription, and
    > language translation. When the language of the text is given through a
    > `https://gedcom.io/terms/v7/LANG`, that should be used. When
    > `https://gedcom.io/terms/v7/LANG` is not available,
    > `https://gedcom.io/terms/v7/HEAD-LANG` provides the file creator's suggested
    > default language. For some language-specific algorithms, the user's preferred
    > language may be a more appropriate default than the file's default language.
    > User language preferences can be found in a variety of platform-specific
    > places, such as the default language from operating system settings, user
    > locales, Input Method Editors (IMEs), etc.
    > 
    > </div>
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#Language
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM LANG Structure](https://gedcom.io/terms/v7/HEAD-LANG)
    '''
    
    key: str = 'HEAD-LANG'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class HeadPlac(BaseStructure):
    '''Store, validate and format the PLAC structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Place
    > This is a placeholder for providing a default `PLAC`.`FORM`, and must not
    > have a payload.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/HEAD-PLAC-FORM  | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM PLAC Structure](https://gedcom.io/terms/v7/HEAD-PLAC)
    '''
    
    key: str = 'HEAD-PLAC'
        
    def __init__(self, subs: Any) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class HeadPlacForm(BaseStructure):
    '''Store, validate and format the FORM structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Format
    > Any `PLAC` with no [`FORM`] shall be treated as if it has this [`FORM`].
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-List#Text
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM FORM Structure](https://gedcom.io/terms/v7/HEAD-PLAC-FORM)
    '''
    
    key: str = 'HEAD-PLAC-FORM'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class HeadSourData(BaseStructure):
    '''Store, validate and format the DATA structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Data
    > The database, electronic data source, or digital repository from which this
    > dataset was exported. The payload is the name of the database, electronic
    > data source, or digital repository, with substructures providing additional
    > details about it (not about the export).
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/COPR            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE-exact      | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DATA Structure](https://gedcom.io/terms/v7/HEAD-SOUR-DATA)
    '''
    
    key: str = 'HEAD-SOUR-DATA'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Height(BaseStructure):
    '''Store, validate and format the HEIGHT structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Height in pixels
    > How many pixels to display vertically for the image. See `CROP` for more
    > details.
    > 
    > <div class="note">
    > 
    > `HEIGHT` is a number of pixels. The correct tag for the height of an individual
    > is the `DSCR` attribute.
    > 
    > <div class="example">
    > 
    > ```gedcom
    > 0 @I45@ INDI
    > 1 DSCR brown eyes, 5ft 10in, 198 pounds
    > ```
    > 
    > </div>
    > 
    > </div>
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#nonNegativeInteger
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM HEIGHT Structure](https://gedcom.io/terms/v7/HEIGHT)
    '''
    
    key: str = 'HEIGHT'
        
    def __init__(self, value: int, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Husb(BaseStructure):
    '''Store, validate and format the HUSB structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Husband
    > A container for information relevant to the subject of the superstructure
    > specific to the individual described by the associated `FAM`'s `HUSB`
    > substructure.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM HUSB Structure](https://gedcom.io/terms/v7/HUSB)
    '''
    
    key: str = 'HUSB'
        
    def __init__(self, subs: Any) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Idno(BaseStructure):
    '''Store, validate and format the IDNO structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Identification number
    > An [Individual Attribute]. See also `INDIVIDUAL_ATTRIBUTE_STRUCTURE`.
    > identifying number
    > A number or other string assigned to identify a person within some
    > significant external system. It must have a `TYPE` substructure to define
    > what kind of identification number is being provided.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM IDNO Structure](https://gedcom.io/terms/v7/IDNO)
    '''
    
    key: str = 'IDNO'
        
    def __init__(self, value: str, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class Immi(BaseStructure):
    '''Store, validate and format the IMMI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Immigration
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > immigration
    > Entering into a new locality with the intent of residing there.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM IMMI Structure](https://gedcom.io/terms/v7/IMMI)
    '''
    
    key: str = 'IMMI'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class IndiCens(BaseStructure):
    '''Store, validate and format the CENS structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Census
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > census
    > Periodic count of the population for a designated locality, such as a
    > national or state census.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM CENS Structure](https://gedcom.io/terms/v7/INDI-CENS)
    '''
    
    key: str = 'INDI-CENS'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class IndiEven(BaseStructure):
    '''Store, validate and format the EVEN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Event
    > An event: a noteworthy happening related to an individual or family. If a
    > specific event type exists, it should be used instead of a generic `EVEN`
    > structure. Each `EVEN` must be classified by a subordinate use of the `TYPE`
    > tag and may be further described in the structure's payload.
    > 
    > <div class="example">
    > 
    > A person that signed a lease for land dated October 2, 1837 and a lease for
    > mining equipment dated November 4, 1837 would be written as:
    > 
    > ```gedcom
    > 0 @I1@ INDI
    > 1 EVEN
    > 2 TYPE Land Lease
    > 2 DATE 2 OCT 1837
    > 1 EVEN Mining equipment
    > 2 TYPE Equipment Lease
    > 2 DATE 4 NOV 1837
    > ```
    > 
    > </div>
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM EVEN Structure](https://gedcom.io/terms/v7/INDI-EVEN)
    '''
    
    key: str = 'INDI-EVEN'
        
    def __init__(self, value: str, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class IndiFact(BaseStructure):
    '''Store, validate and format the FACT structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Fact
    > A noteworthy attribute or fact concerning an individual or family. If a
    > specific attribute type exists, it should be used instead of a generic `FACT`
    > structure. Each `FACT` must be classified by a subordinate use of the `TYPE`
    > tag and may be further described in the structure's payload.
    > 
    > <div class="example">
    > 
    > If the attribute being defined was 1 of the person's skills, such as
    > woodworking, the `FACT` tag would have the value of "Woodworking", followed by
    > a subordinate `TYPE` tag with the value "Skills".
    > 
    > ```gedcom
    > 0 @I1@ INDI
    > 1 FACT Woodworking
    > 2 TYPE Skills
    > ```
    > 
    > </div>
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM FACT Structure](https://gedcom.io/terms/v7/INDI-FACT)
    '''
    
    key: str = 'INDI-FACT'
        
    def __init__(self, value: str, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class IndiFamc(BaseStructure):
    '''Store, validate and format the FAMC structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Family child
    > The family in which an individual appears as a child. It is also used with
    > a `https://gedcom.io/terms/v7/FAMC-STAT` substructure to show individuals
    > who are not children of the family. See `FAMILY_RECORD` for more details.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/FAMC-STAT       | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/PEDI            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-FAM>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM FAMC Structure](https://gedcom.io/terms/v7/INDI-FAMC)
    '''
    
    key: str = 'INDI-FAMC'
        
    def __init__(self, value: FamilyXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class IndiName(BaseStructure):
    '''Store, validate and format the NAME structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Name
    > A `PERSONAL_NAME_STRUCTURE` with parts, translations, sources, and so forth.
    > Names of individuals are represented in the manner the name is normally spoken,
    > with the family name, surname, or nearest cultural parallel thereunto separated
    > by slashes (U+002F `/`). Based on the dynamic nature or unknown compositions of
    > naming conventions, it is difficult to provide a more detailed name piece
    > structure to handle every case. The `PERSONAL_NAME_PIECES` are provided
    > optionally for systems that cannot operate effectively with less structured
    > information. The Personal Name payload shall be seen as the primary name
    > representation, with name pieces as optional auxiliary information; in
    > particular it is recommended that all name parts in `PERSONAL_NAME_PIECES`
    > appear within the `PersonalName` payload in some form, possibly adjusted for
    > gender-specific suffixes or the like. It is permitted for the payload to
    > contain information not present in any name piece substructure.
    > 
    > The name may be translated or transliterated into different languages or
    > scripts using the `TRAN` substructure. It is recommended, but not required,
    > that if the name pieces are used, the same pieces are used in each translation
    > and transliteration.
    > 
    > A `TYPE` is used to specify the particular variation that this name is. For
    > example; it could indicate that this name is a name taken at immigration or
    > that it could be an ‘also known as’ name. See
    > `https://gedcom.io/terms/v7/enumset-NAME-TYPE` for more details.
    > 
    > <div class="note">
    > 
    > Alternative approaches to representing names are being considered for future
    > versions of this specification.
    > 
    > </div>
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/GIVN            | Many     | No       |
    | https://gedcom.io/terms/v7/NAME-TRAN       | Many     | No       |
    | https://gedcom.io/terms/v7/NAME-TYPE       | Many     | No       |
    | https://gedcom.io/terms/v7/NICK            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/NPFX            | Many     | No       |
    | https://gedcom.io/terms/v7/NSFX            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/SPFX            | Many     | No       |
    | https://gedcom.io/terms/v7/SURN            | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Name
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM NAME Structure](https://gedcom.io/terms/v7/INDI-NAME)
    '''
    
    key: str = 'INDI-NAME'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class IndiNchi(BaseStructure):
    '''Store, validate and format the NCHI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Number of children
    > An [Individual Attribute]. See also `INDIVIDUAL_ATTRIBUTE_STRUCTURE`.
    > number of children
    > The number of children that this person is known to be the parent of (all
    > marriages).
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#nonNegativeInteger
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM NCHI Structure](https://gedcom.io/terms/v7/INDI-NCHI)
    '''
    
    key: str = 'INDI-NCHI'
        
    def __init__(self, value: int, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class IndiReli(BaseStructure):
    '''Store, validate and format the RELI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Religion
    > An [Individual Attribute]. See also `INDIVIDUAL_ATTRIBUTE_STRUCTURE`.
    > religion
    > A religious denomination to which a person is affiliated or for which a
    > record applies.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM RELI Structure](https://gedcom.io/terms/v7/INDI-RELI)
    '''
    
    key: str = 'INDI-RELI'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class IndiTitl(BaseStructure):
    '''Store, validate and format the TITL structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Title
    > An [Individual Attribute]. See also `INDIVIDUAL_ATTRIBUTE_STRUCTURE`.
    > title
    > A formal designation used by an individual in connection with positions of
    > royalty or other social status, such as Grand Duke.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TITL Structure](https://gedcom.io/terms/v7/INDI-TITL)
    '''
    
    key: str = 'INDI-TITL'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Inil(BaseStructure):
    '''Store, validate and format the INIL structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Initiatory, Latter-Day Saint
    > A [Latter-Day Saint Ordinance]. See also `LDS_INDIVIDUAL_ORDINANCE`.
    > Previously, GEDCOM versions 3.0 through 5.3 called this `WAC`; it was not
    > part of 5.4 through 5.5.1. FamilySearch GEDCOM 7.0 reintroduced it with the
    > name `INIL` for consistency with `BAPL`, `CONL`, and `ENDL`.
    > initiatory
    > A religious event where an initiatory ordinance for an individual was
    > performed by priesthood authority in a temple of The Church of Jesus Christ
    > of Latter-day Saints.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TEMP            | Many     | No       |
    | https://gedcom.io/terms/v7/ord-STAT        | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM INIL Structure](https://gedcom.io/terms/v7/INIL)
    '''
    
    key: str = 'INIL'
        
    def __init__(self, subs: Any = None) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Lang(BaseStructure):
    '''Store, validate and format the LANG structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Language
    > The primary human language of the superstructure. The primary language in which
    > the `Text`-typed payloads of the superstructure and its substructures appear.
    > 
    > The payload of the `LANG` structure is a language tag, as defined by [BCP 47].
    > A [registry of component subtags] is maintained publicly by the IANA.
    > 
    > In the absence of a `LANG` structure, the language is assumed to be
    > unspecified; that may also be recorded explicitly with language tag `und`
    > (meaning "undetermined"). See `https://gedcom.io/terms/v7/HEAD-LANG` for
    > information about applying language-specific algorithms to text in an
    > unspecified language.
    > 
    > If the text is primarily in one language with a few parts in a different
    > language, it is recommended that a language tag identifying the primary
    > language be used. If no one language is primary, the language tag `mul`
    > (meaning "multiple") may be used, but most language-specific algorithms will
    > treat `mul` the same way they do `und`.
    > 
    > <div class="note">
    > 
    > Conversations are ongoing about adding part-of-payload language tagging in a
    > future version of the specification to provide more fidelity for multilingual
    > text.
    > 
    > </div>
    > 
    > If the text is not in any human language and should not be treated as lingual
    > content, the language tag `zxx` (meaning "no linguistic content" or "not
    > applicable") may be used. An example of `zxx` text might be a diagram
    > approximated using characters for their shape, not their meaning.
    > 
    > <div class="note">
    > 
    > This specification does not permit `LANG` in every place where human language
    > text might appear. Conversations are ongoing about adding it in more places in
    > a future version of the specification. Using the current specification,
    > additional language tagging can be accomplished using a [documented extension
    > tag] by including the following in the header:
    > 
    > ```gedcom
    > 1 SCHEMA
    > 2 TAG _LANG https://gedcom.io/terms/v7/LANG
    > ```
    > 
    > and using the extension tag like so:
    > 
    > ```gedcom
    > 2 DATE 31 AUG 2018
    > 3 PHRASE 2018年8月31日
    > 4 _LANG cmn
    > ```
    > 
    > </div>
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#Language
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM LANG Structure](https://gedcom.io/terms/v7/LANG)
    '''
    
    key: str = 'LANG'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Lati(BaseStructure):
    '''Store, validate and format the LATI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Latitude
    > A latitudinal coordinate. The payload is either `N` (for a coordinate north of
    > the equator) or `S` (for a coordinate south of the equator) followed by a
    > decimal number of degrees. Minutes and seconds are not used and should be
    > converted to fractional degrees prior to encoding.
    > 
    > <div class="example">
    > 
    > 18 degrees, 9 minutes, and 3.4 seconds North would be formatted as
    > `N18.150944`.
    > 
    > </div>
    > 

    Examples:
        The following example shows how to enter the latitude (Lati))
        coordinates into a Map structure to produce the GEDCOM example
        mentioned in the GEDCOM Specification section.
        >>> from genedata.structure import Lati, Long, Map
        >>> m = Map([Lati('N18.150944'), Long('E168.150944')])
        >>> print(m.ged())
        1 MAP
        2 LATI N18.150944
        2 LONG E168.150944
        <BLANKLINE>
        
        Since it may be difficult to convert from degrees, minutes
        and seconds to a floating point value, the `Input` class provides
        a utility to do so for Lati.  A similar one exists for Long.
        >>> from genedata.structure import Input
        >>> m = Map(
        ...     [
        ...         Lati(Input.lati(18, 9, 3.4)), 
        ...         Long('E168.150944'),
        ...     ]
        ... )
        >>> print(m.ged())
        1 MAP
        2 LATI N18.150944
        2 LONG E168.150944
        <BLANKLINE>
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM LATI Structure](https://gedcom.io/terms/v7/LATI)
    '''
    
    key: str = 'LATI'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Left(BaseStructure):
    '''Store, validate and format the LEFT structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Left crop width
    > Left is a number of pixels to not display from the left side of the image.
    > See `CROP` for more details.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#nonNegativeInteger
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM LEFT Structure](https://gedcom.io/terms/v7/LEFT)
    '''
    
    key: str = 'LEFT'
        
    def __init__(self, value: int, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Long(BaseStructure):
    '''Store, validate and format the LONG structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Longitude
    > A longitudinal coordinate. The payload is either `E` (for a coordinate east of
    > the prime meridian) or `W` (for a coordinate west of the prime meridian)
    > followed by a decimal number of degrees. Minutes and seconds are not used and
    > should be converted to fractional degrees prior to encoding.
    > 
    > <div class="example">
    > 
    > 168 degrees, 9 minutes, and 3.4 seconds East would be formatted as
    > `E168.150944`.
    > 
    > </div>
    > 

    Examples:
        The following example howss how to enter the longitude (Long)
        coordinates into a map structure to produce the GEDCOM output
        mentioned in the GEDCOM Specification.
        >>> from genedata.structure import Lati, Long, Map
        >>> m = Map([Lati('N18.150944'), Long('E168.150944')])
        >>> print(m.ged())
        1 MAP
        2 LATI N18.150944
        2 LONG E168.150944
        <BLANKLINE>
        
        Since it may be difficult to convert from degrees, minutes
        and seconds to a floating point value, the `Input` class provides
        a utility to do so for Long.  A similar one exists for Lati.
        >>> from genedata.structure import Input
        >>> m = Map(
        ...     [
        ...         Lati('N18.150944'), 
        ...         Long(Input.long(168, 9, 3.4)),
        ...     ]
        ... )
        >>> print(m.ged())
        1 MAP
        2 LATI N18.150944
        2 LONG E168.150944
        <BLANKLINE>
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM LONG Structure](https://gedcom.io/terms/v7/LONG)
    '''
    
    key: str = 'LONG'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Map(BaseStructure):
    '''Store, validate and format the MAP structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Map
    > A representative point for a location, as defined by `LATI` and `LONG`
    > substructures.
    > 
    > Note that `MAP` provides neither a notion of accuracy (for example, the `MAP`
    > for a birth event may be some distance from the point where the birth occurred)
    > nor a notion of region size (for example, the `MAP` for a place "Belarus" may
    > be anywhere within that nation's 200,000 square kilometer area).
    > 

    Examples:
        The following example illustrates how to enter latitude (Lati) and longitude (Long)
        coordinates into a map structure to produce the GEDCOM output.
        >>> from genedata.structure import Input, Lati, Long, Map
        >>> m = Map([Lati('N18.150944'), Long('E168.150944')])
        >>> print(m.ged())
        1 MAP
        2 LATI N18.150944
        2 LONG E168.150944
        <BLANKLINE>
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/LATI            | Many     | No       |
    | https://gedcom.io/terms/v7/LONG            | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM MAP Structure](https://gedcom.io/terms/v7/MAP)
    '''
    
    key: str = 'MAP'
        
    def __init__(self, subs: Any) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Marb(BaseStructure):
    '''Store, validate and format the MARB structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Marriage banns
    > A [Family Event]. See also `FAMILY_EVENT_STRUCTURE`.
    > marriage bann
    > Official public notice given that 2 people intend to marry.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM MARB Structure](https://gedcom.io/terms/v7/MARB)
    '''
    
    key: str = 'MARB'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Marc(BaseStructure):
    '''Store, validate and format the MARC structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Marriage contract
    > A [Family Event]. See also `FAMILY_EVENT_STRUCTURE`.
    > marriage contract
    > Recording a formal agreement of marriage, including the prenuptial
    > agreement in which marriage partners reach agreement about the property
    > rights of 1 or both, securing property to their children.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM MARC Structure](https://gedcom.io/terms/v7/MARC)
    '''
    
    key: str = 'MARC'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Marl(BaseStructure):
    '''Store, validate and format the MARL structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Marriage license
    > A [Family Event]. See also `FAMILY_EVENT_STRUCTURE`.
    > marriage license
    > Obtaining a legal license to marry.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM MARL Structure](https://gedcom.io/terms/v7/MARL)
    '''
    
    key: str = 'MARL'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Marr(BaseStructure):
    '''Store, validate and format the MARR structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Marriage
    > A [Family Event]. See also `FAMILY_EVENT_STRUCTURE`.
    > marriage
    > A legal, common-law, or customary event such as a wedding or marriage
    > ceremony that joins 2 partners to create or extend a family unit.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM MARR Structure](https://gedcom.io/terms/v7/MARR)
    '''
    
    key: str = 'MARR'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Mars(BaseStructure):
    '''Store, validate and format the MARS structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Marriage settlement
    > A [Family Event]. See also `FAMILY_EVENT_STRUCTURE`.
    > marriage settlement
    > Creating an agreement between 2 people contemplating marriage, at which
    > time they agree to release or modify property rights that would otherwise
    > arise from the marriage.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/HUSB            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WIFE            | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM MARS Structure](https://gedcom.io/terms/v7/MARS)
    '''
    
    key: str = 'MARS'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Medi(BaseStructure):
    '''Store, validate and format the MEDI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Medium
    > An enumerated value from set `https://gedcom.io/terms/v7/enumset-MEDI`
    > providing information about the media or the medium in which information is
    > stored.
    > 
    > When `MEDI` is a substructure of a `https://gedcom.io/terms/v7/CALN`, it is
    > recommended that its payload describes the medium directly found at that call
    > number rather than a medium from which it was derived.
    > 
    > <div class="example">
    > 
    > Consider an asset in a repository that is a digital scan of a book of compiled
    > newspapers; for this asset, the `CALN`.`MEDI` is recommended to be `ELECTRONIC`
    > rather than `BOOK` or `NEWSPAPER`.
    > 
    > </div>
    > 
    > When `MEDI` is a substructure of a `https://gedcom.io/terms/v7/FORM`, it is
    > recommended that its payload describes the medium from which it was derived.
    > 
    > <div class="example">
    > 
    > Consider a digital photo in a multimedia record; for this asset, the
    > `FORM`.`MEDI` is recommended to be `PHOTO` rather than `ELECTRONIC`.
    > 
    > </div>
    > 

    Examples:
        This example shows a successful run of the Medi structure using
        the enumeration value 'AUDIO'.
        >>> from genedata.structure import Medi
        >>> m = Medi('AUDIO')
        >>> print(m.ged(2))
        2 MEDI AUDIO
        <BLANKLINE>

        This example shows the code that is generated to produce the same result as above.
        >>> print(m.code())
        <BLANKLINE>
        Medi('AUDIO')
        
    Enumerations:
    - 'AUDIO': https://gedcom.io/terms/v7/enum-AUDIO
        > An audio recording
    - 'BOOK': https://gedcom.io/terms/v7/enum-BOOK
        > A bound book
    - 'CARD': https://gedcom.io/terms/v7/enum-CARD
        > A card or file entry
    - 'ELECTRONIC': https://gedcom.io/terms/v7/enum-ELECTRONIC
        > A digital artifact
    - 'FICHE': https://gedcom.io/terms/v7/enum-FICHE
        > Microfiche
    - 'FILM': https://gedcom.io/terms/v7/enum-FILM
        > Microfilm
    - 'MAGAZINE': https://gedcom.io/terms/v7/enum-MAGAZINE
        > Printed periodical
    - 'MANUSCRIPT': https://gedcom.io/terms/v7/enum-MANUSCRIPT
        > Written pages
    - 'MAP': https://gedcom.io/terms/v7/enum-MAP
        > Cartographic map
    - 'NEWSPAPER': https://gedcom.io/terms/v7/enum-NEWSPAPER
        > Printed newspaper
    - 'OTHER': https://gedcom.io/terms/v7/enum-OTHER
        > A value not listed here; should have a `PHRASE` substructure
    - 'PHOTO': https://gedcom.io/terms/v7/enum-PHOTO
        > Photograph
    - 'TOMBSTONE': https://gedcom.io/terms/v7/enum-TOMBSTONE
        > Burial marker or related memorial
    - 'VIDEO': https://gedcom.io/terms/v7/enum-VIDEO
        > Motion picture recording
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Enum
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM MEDI Structure](https://gedcom.io/terms/v7/MEDI)
    '''
    
    key: str = 'MEDI'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Mime(BaseStructure):
    '''Store, validate and format the MIME structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Media type
    > Indicates the [media type] of the payload of the superstructure.
    > 
    > As of version 7.0, only 2 media types are supported by this structure:
    > 
    > - `text/plain` shall be presented to the user as-is, preserving all spacing,
    >   line breaks, and so forth.
    > 
    > - `text/html` uses HTML tags to provide presentation information. Applications
    >   should support at least the following:
    > 
    >   - `p` and `br` elements for paragraphing and line breaks.
    >   - `b`, `i`, `u`, and `s` elements for bold, italic, underlined, and
    >     strike-through text (or corresponding display in other locales; see [HTML
    >     §4.5] for more).
    >   - `sup` and `sub` elements for super- and sub-script.
    >   - The 3 XML entities that appear in text: `&amp;`, `&lt;` `&gt;`. Note that
    >     `&quote;` and `&apos;` are only needed in attributes. Other entities should
    >     be represented as their respective Unicode characters instead.
    > 
    >   Supporting more of HTML is encouraged. Unsupported tags should be ignored
    >   during display.
    > 
    > <div class="note">
    > 
    > Applications are welcome to support more XML entities or HTML character
    > references in their user interface. However, exporting must only use the core
    > XML entities, translating any other entities into their corresponding Unicode
    > characters.
    > 
    > </div>
    > 
    > <div class="note">
    > 
    > Applications are welcome to support additional HTML elements, but they should
    > ensure that content is meaningful if those extra elements are ignored and only
    > their content text is displayed.
    > 
    > </div>
    > 
    > <div class="note">
    > 
    > Media types are also used by external files, as described under `FORM`.
    > External file media types are not limited to `text/plain` and `text/html`.
    > 
    > </div>
    > 
    > If needed, `text/html` can be converted to `text/plain` using the following
    > steps:
    > 
    > 1. Replace any sequence of 1 or more spaces, tabs, and line breaks with a
    >    single space
    > 2. Case-insensitively replace each `<p`...`>`, `</p`...`>`, and `<br`...`>`
    >    with a line break
    > 3. Remove all other `<`...`>` tags
    > 4. Replace each `&lt;` with `<` and `&gt;` with `>`
    > 5. Replace each `&amp;` with `&`
    > 
        
    Args:
        value: A value of data type http://www.w3.org/ns/dcat#mediaType
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM MIME Structure](https://gedcom.io/terms/v7/MIME)
    '''
    
    key: str = 'MIME'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Name(BaseStructure):
    '''Store, validate and format the NAME structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Name
    > The name of the superstructure's subject, represented as a simple string.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM NAME Structure](https://gedcom.io/terms/v7/NAME)
    '''
    
    key: str = 'NAME'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class NameTran(BaseStructure):
    '''Store, validate and format the TRAN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Translation
    > A type of `TRAN` substructure specific to [Personal Names]. Each `NAME`.`TRAN`
    > must have a `LANG` substructure. See also `INDI`.`NAME`.
    > 
    > <div class="example">
    > 
    > The following presents a name in Mandarin, transliterated using Pinyin
    > 
    > ```gedcom
    > 1 NAME /孔/德庸
    > 2 GIVN 德庸
    > 2 SURN 孔
    > 2 TRAN /Kǒng/ Déyōng
    > 3 GIVN Déyōng
    > 3 SURN Kǒng
    > 3 LANG zh-pinyin
    > ```
    > 
    > </div>
    > 
    > A representation of the superstructure's data in a different format.
    > 
    > In some situations it is desirable to provide the same semantic content in
    > multiple formats. Where this is desirable, a `TRAN` substructure is used, where
    > the specific format is given in its language tag substructure, media type
    > substructure, or both.
    > 
    > Different `TRAN` structures are used in different contexts to fully capture the
    > structure of the information being presented in multiple formats. In all cases,
    > a `TRAN` structure's payload and substructures should provide only information
    > also contained in the `TRAN` structures' superstructure, but provide it in a
    > new language, script, or media type.
    > 
    > Each `TRAN` substructure must have either a language tag or a media type or
    > both. Each `TRAN` structure must differ from its superstructure and from every
    > other `TRAN` substructure of its superstructure in either its language tag or
    > its media type or both.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/GIVN            | Many     | No       |
    | https://gedcom.io/terms/v7/LANG            | Many     | No       |
    | https://gedcom.io/terms/v7/NICK            | Many     | No       |
    | https://gedcom.io/terms/v7/NPFX            | Many     | No       |
    | https://gedcom.io/terms/v7/NSFX            | Many     | No       |
    | https://gedcom.io/terms/v7/SPFX            | Many     | No       |
    | https://gedcom.io/terms/v7/SURN            | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Name
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TRAN Structure](https://gedcom.io/terms/v7/NAME-TRAN)
    '''
    
    key: str = 'NAME-TRAN'
        
    def __init__(self, value: str, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class NameType(BaseStructure):
    '''Store, validate and format the TYPE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Type
    > An enumerated value from set `https://gedcom.io/terms/v7/enumset-NAME-TYPE`
    > indicating the type of the name.
        
    Enumerations:
    - 'AKA': https://gedcom.io/terms/v7/enum-AKA
        > Also known as, alias, etc.
    - 'BIRTH': https://gedcom.io/terms/v7/enum-BIRTH
        > Associated with birth, such as a birth name or birth parents.
    - 'IMMIGRANT': https://gedcom.io/terms/v7/enum-IMMIGRANT
        > Name assumed at the time of immigration.
    - 'MAIDEN': https://gedcom.io/terms/v7/enum-MAIDEN
        > Maiden name, name before first marriage.
    - 'MARRIED': https://gedcom.io/terms/v7/enum-MARRIED
        > Married name, assumed as part of marriage.
    - 'OTHER': https://gedcom.io/terms/v7/enum-OTHER
        > A value not listed here; should have a `PHRASE` substructure
    - 'PROFESSIONAL': https://gedcom.io/terms/v7/enum-PROFESSIONAL
        > Name used professionally (pen, screen, stage name).
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Enum
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TYPE Structure](https://gedcom.io/terms/v7/NAME-TYPE)
    '''
    
    key: str = 'NAME-TYPE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Nati(BaseStructure):
    '''Store, validate and format the NATI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Nationality
    > An [Individual Attribute]. See also `INDIVIDUAL_ATTRIBUTE_STRUCTURE`.
    > nationality
    > An individual's national heritage or origin, or other folk, house, kindred,
    > lineage, or tribal interest.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM NATI Structure](https://gedcom.io/terms/v7/NATI)
    '''
    
    key: str = 'NATI'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Natu(BaseStructure):
    '''Store, validate and format the NATU structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Naturalization
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > naturalization
    > Obtaining citizenship.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM NATU Structure](https://gedcom.io/terms/v7/NATU)
    '''
    
    key: str = 'NATU'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Nick(BaseStructure):
    '''Store, validate and format the NICK structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Nickname
    > A descriptive or familiar name that is used instead of, or in addition to,
    > one’s official or legal name.
    > 
    > <div class="note">
    > 
    > The label "nickname" and description text of this structure were introduced
    > with version 5.5 in 1996, but are understood differently by different users.
    > Some use `NICK` only for names that would be inappropriate in formal settings.
    > Some use it for pseudonyms regardless of where they are used. Some use it for
    > any variant of a name that is not the one used on legal documents. Because all
    > of these uses, and likely others as well, are common in existing data, no
    > further clarification of the meaning of the `NICK` structure is possible
    > without contradicting some existing data.
    > 
    > </div>
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM NICK Structure](https://gedcom.io/terms/v7/NICK)
    '''
    
    key: str = 'NICK'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Nmr(BaseStructure):
    '''Store, validate and format the NMR structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Number of marriages
    > An [Individual Attribute]. See also `INDIVIDUAL_ATTRIBUTE_STRUCTURE`.
    > number of marriages
    > The number of times this person has participated in a family as a spouse or
    > parent.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#nonNegativeInteger
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM NMR Structure](https://gedcom.io/terms/v7/NMR)
    '''
    
    key: str = 'NMR'
        
    def __init__(self, value: int, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class NoDate(BaseStructure):
    '''Store, validate and format the DATE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Date
    > The `DatePeriod` during which the event did not occur or the attribute did
    > not apply.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Date#period
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DATE Structure](https://gedcom.io/terms/v7/NO-DATE)
    '''
    
    key: str = 'NO-DATE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Note(BaseStructure):
    '''Store, validate and format the NOTE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Note
    > A `NOTE_STRUCTURE`, containing additional information provided by the submitter
    > for understanding the enclosing data.
    > 
    > When a substructure of `HEAD`, it should describe the contents of the document
    > in terms of "ancestors or descendants of" so that the person receiving the data
    > knows what genealogical information the document contains.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/LANG            | Many     | No       |
    | https://gedcom.io/terms/v7/MIME            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE-TRAN       | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM NOTE Structure](https://gedcom.io/terms/v7/NOTE)
    '''
    
    key: str = 'NOTE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class NoteTran(BaseStructure):
    '''Store, validate and format the TRAN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Translation
    > A type of `TRAN` for unstructured human-readable text, such as is found in
    > `NOTE` and `SNOTE` payloads. Each `https://gedcom.io/terms/v7/NOTE-TRAN` must
    > have either a `LANG` substructure or a `MIME` substructure or both. If either
    > is missing, it is assumed to have the same value as the superstructure. See
    > also `NOTE` and `SNOTE`.
    > 
    > <div class="example">
    > 
    > The following presents the same note in HTML-format English; in plain-text with
    > the same language as the superstructure (English); and in Spanish with the same
    > media type as the superstructure (HTML).
    > 
    > ```gedcom
    > 1 NAME Arete /Hernandez/
    > 2 NOTE Named after Arete from <i>The Odyssey</i>
    > 3 LANG en
    > 3 MIME text/html
    > 3 TRAN Named after Arete from "The Odyssey"
    > 4 MIME text/plain
    > 3 TRAN Nombrada en honor a Arete de <i>La Odisea</i>
    > 4 LANG es
    > ```
    > 
    > </div>
    > 
    > It is recommended that text given in `text/html` should only be translated into
    > `text/plain` if the resulting text is different from the text created by the
    > HTML-to-text conversion process defined in `https://gedcom.io/terms/v7/MIME`.
    > 
    > A representation of the superstructure's data in a different format.
    > 
    > In some situations it is desirable to provide the same semantic content in
    > multiple formats. Where this is desirable, a `TRAN` substructure is used, where
    > the specific format is given in its language tag substructure, media type
    > substructure, or both.
    > 
    > Different `TRAN` structures are used in different contexts to fully capture the
    > structure of the information being presented in multiple formats. In all cases,
    > a `TRAN` structure's payload and substructures should provide only information
    > also contained in the `TRAN` structures' superstructure, but provide it in a
    > new language, script, or media type.
    > 
    > Each `TRAN` substructure must have either a language tag or a media type or
    > both. Each `TRAN` structure must differ from its superstructure and from every
    > other `TRAN` substructure of its superstructure in either its language tag or
    > its media type or both.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/LANG            | Many     | No       |
    | https://gedcom.io/terms/v7/MIME            | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TRAN Structure](https://gedcom.io/terms/v7/NOTE-TRAN)
    '''
    
    key: str = 'NOTE-TRAN'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Npfx(BaseStructure):
    '''Store, validate and format the NPFX structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Name prefix
    > Text that appears on a name line before the given and surname parts of a name.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM NPFX Structure](https://gedcom.io/terms/v7/NPFX)
    '''
    
    key: str = 'NPFX'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Nsfx(BaseStructure):
    '''Store, validate and format the NSFX structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Name suffix
    > Text which appears on a name line after or behind the given and surname
    > parts of a name.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM NSFX Structure](https://gedcom.io/terms/v7/NSFX)
    '''
    
    key: str = 'NSFX'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Obje(BaseStructure):
    '''Store, validate and format the OBJE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Object
    > See `MULTIMEDIA_LINK`.
    > Links the superstructure to the `MULTIMEDIA_RECORD` with the given pointer.
    > 
    > The optional `CROP` substructure indicates that a subregion of an image
    > represents or applies to the superstructure.
    > 
    > The optional `TITL` substructure supersedes any `OBJE.FILE.TITL` substructures
    > included in the `MULTIMEDIA_RECORD`.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/CROP            | Many     | No       |
    | https://gedcom.io/terms/v7/TITL            | Many     | No       |
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-OBJE>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM OBJE Structure](https://gedcom.io/terms/v7/OBJE)
    '''
    
    key: str = 'OBJE'
        
    def __init__(self, value: MultimediaXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Occu(BaseStructure):
    '''Store, validate and format the OCCU structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Occupation
    > An [Individual Attribute]. See also `INDIVIDUAL_ATTRIBUTE_STRUCTURE`.
    > occupation
    > The type of work or profession of an individual.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM OCCU Structure](https://gedcom.io/terms/v7/OCCU)
    '''
    
    key: str = 'OCCU'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class OrdStat(BaseStructure):
    '''Store, validate and format the STAT structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Status
    > An enumerated value from set `https://gedcom.io/terms/v7/enumset-ord-STAT`
    > assessing of the state or condition of an ordinance.

    Examples:
        This example shows a successful run of the OrdStat structure using
        the enumeration value 'BIC'.
        >>> from genedata.structure import OrdStat
        >>> m = OrdStat('BIC')
        >>> print(m.ged(1))
        1 STAT BIC
        <BLANKLINE>

        This example shows the code that is generated to produce the same result as above.
        >>> print(m.code())
        <BLANKLINE>
        OrdStat('BIC')
        
    Enumerations:
    - 'BIC': https://gedcom.io/terms/v7/enum-BIC
        > Applies to: `SLGC`
    - 'CANCELED': https://gedcom.io/terms/v7/enum-CANCELED
        > Applies to: `SLGS`
    - 'CHILD': https://gedcom.io/terms/v7/enum-CHILD
        > Applies to: All but `SLGC`
    - 'COMPLETED': https://gedcom.io/terms/v7/enum-COMPLETED
        > Applies to: All
    - 'DNS_CAN': https://gedcom.io/terms/v7/enum-DNS_CAN
        > Applies to: `SLGS`
    - 'DNS': https://gedcom.io/terms/v7/enum-DNS
        > Applies to: `SLGC`, `SLGS`
    - 'EXCLUDED': https://gedcom.io/terms/v7/enum-EXCLUDED
        > Applies to: All
    - 'INFANT': https://gedcom.io/terms/v7/enum-INFANT
        > Applies to: All but `SLGC`
    - 'PRE_1970': https://gedcom.io/terms/v7/enum-PRE_1970
        > Applies to: All
    - 'STILLBORN': https://gedcom.io/terms/v7/enum-STILLBORN
        > Applies to: All
    - 'SUBMITTED': https://gedcom.io/terms/v7/enum-SUBMITTED
        > Applies to: All
    - 'UNCLEARED': https://gedcom.io/terms/v7/enum-UNCLEARED
        > Applies to: All
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/DATE-exact      | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Enum
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM STAT Structure](https://gedcom.io/terms/v7/ord-STAT)
    '''
    
    key: str = 'ord-STAT'
        
    def __init__(self, value: str, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class Ordn(BaseStructure):
    '''Store, validate and format the ORDN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Ordination
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > ordination
    > Receiving authority to act in religious matters.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ORDN Structure](https://gedcom.io/terms/v7/ORDN)
    '''
    
    key: str = 'ORDN'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Page(BaseStructure):
    '''Store, validate and format the PAGE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Page
    > A specific location within the information referenced. For a published work,
    > this could include the volume of a multi-volume work and the page number or
    > numbers. For a periodical, it could include volume, issue, and page numbers.
    > For a newspaper, it could include a date, page number, and column number. For
    > an unpublished source or microfilmed works, this could be a film or sheet
    > number, page number, or frame number. A census record might have an enumerating
    > district, page number, line number, dwelling number, and family number.
    > 
    > It is recommended that the data in this field be formatted comma-separated with
    > label: value pairs
    > 
    > <div class="example">
    > 
    > ```gedcom
    > 2 SOUR @S1@
    > 3 PAGE Film: 1234567, Frame: 344, Line: 28
    > ```
    > 
    > </div>
    > 
    > If the superstructure's pointer is `@VOID@` then there is no information
    > referenced and the `PAGE` may describe the entire source.
    > 
    > <div class="example">
    > 
    > ```gedcom
    > 1 DSCR Tall enough his head touched the ceiling
    > 2 SOUR @VOID@
    > 3 PAGE His grand-daughter Lydia told me this in 1980
    > ```
    > 
    > </div>
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM PAGE Structure](https://gedcom.io/terms/v7/PAGE)
    '''
    
    key: str = 'PAGE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Pedi(BaseStructure):
    '''Store, validate and format the PEDI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Pedigree
    > An enumerated value from set `https://gedcom.io/terms/v7/enumset-PEDI`
    > indicating the type of child-to-family relationship represented by the
    > superstructure.

    Examples:
        This example shows a successful run of the Pedi structure using
        the enumeration value 'ADOPTED'.
        >>> from genedata.structure import Pedi
        >>> m = Pedi('ADOPTED')
        >>> print(m.ged(1))
        1 PEDI ADOPTED
        <BLANKLINE>

        This example shows the code that is generated to produce the same result as above.
        >>> print(m.code())
        <BLANKLINE>
        Pedi('ADOPTED')
        
    Enumerations:
    - 'ADOPTED': https://gedcom.io/terms/v7/enum-ADOPTED
        > Adoptive parents
    - 'BIRTH': https://gedcom.io/terms/v7/enum-BIRTH
        > Associated with birth, such as a birth name or birth parents.
    - 'FOSTER': https://gedcom.io/terms/v7/enum-FOSTER
        > The child was included in a foster or guardian family
    - 'OTHER': https://gedcom.io/terms/v7/enum-OTHER
        > A value not listed here; should have a `PHRASE` substructure
    - 'SEALING': https://gedcom.io/terms/v7/enum-SEALING
        > The child was sealed to parents other than birth parents
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Enum
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM PEDI Structure](https://gedcom.io/terms/v7/PEDI)
    '''
    
    key: str = 'PEDI'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Phon(BaseStructure):
    '''Store, validate and format the PHON structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Phone
    > A telephone number. Telephone numbers have many regional variations and can
    > contain non-digit characters. Users should be encouraged to use
    > internationalized telephone numbers rather than local versions. As a starting
    > point for this recommendation, there are international standards that use a
    > "'+'" shorthand for the international prefix (for example, in place of "011" in
    > the US or "00" in the UK). Examples are `+1 (555) 555-1234` (US) or
    > `+44 20 1234 1234` (UK).
    > 
    > See ITU standards [E.123] and [E.164] for more information.
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM PHON Structure](https://gedcom.io/terms/v7/PHON)
    '''
    
    key: str = 'PHON'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Phrase(BaseStructure):
    '''Store, validate and format the PHRASE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Phrase
    > Textual information that cannot be expressed in the superstructure due to the
    > limitations of its data type. A `PHRASE` may restate information contained in
    > the superstructure, but doing so is not recommended unless it is needed for
    > clarity.
    > 
    > <div class="example">
    > 
    > A date interpreted from the phrase "The Feast of St John" might be
    > 
    > ```gedcom
    > 2 DATE 24 JUN 1852
    > 3 PHRASE During the feast of St John
    > ```
    > 
    > </div>
    > 
    > <div class="example">
    > 
    > A record using `1648/9` to indicate a change in new year might become
    > 
    > ```gedcom
    > 2 DATE 30 JAN 1649
    > 3 PHRASE 30th of January, 1648/9
    > ```
    > 
    > </div>
    > 
    > <div class="example">
    > 
    > A record using `1648/9` to indicate uncertainty in the year might become
    > 
    > ```gedcom
    > 2 DATE BET 1648 AND 1649
    > 3 PHRASE 1648/9
    > ```
    > 
    > </div>
    > 
    > <div class="example">
    > 
    > A record using `Q1 1867` to indicate an event occurred sometime within the
    > first quarter of 1867 might become
    > 
    > ```gedcom
    > 2 DATE BET 1 JAN 1867 AND 31 MAR 1867
    > 3 PHRASE Q1 1867
    > ```
    > 
    > </div>
    > 
    > <div class="example">
    > 
    > A record defining the Maid of Honor in a marriage might become
    > 
    > ```gedcom
    > 1 MARR
    > 2 ASSO @I2@
    > 3 ROLE OTHER
    > 4 PHRASE Maid of Honor
    > ```
    > 
    > </div>
    > 
    > <div class="example">
    > 
    > A name given to a foundling orphan might be
    > 
    > ```gedcom
    > 1 NAME Mary //
    > 2 GIVN Mary
    > 2 TYPE OTHER
    > 3 PHRASE given by orphanage
    > ```
    > 
    > </div>
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM PHRASE Structure](https://gedcom.io/terms/v7/PHRASE)
    '''
    
    key: str = 'PHRASE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Plac(BaseStructure):
    '''Store, validate and format the PLAC structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Place
    > The principal place in which the superstructure's subject occurred, represented
    > as a [List] of jurisdictional entities in a sequence from the lowest to the
    > highest jurisdiction, where "jurisdiction" includes units in a political,
    > ecclesiastical, and geographical hierarchies and may include units of any size,
    > such as a continent, "at sea", or a specific building, farm, or cemetery. As
    > with other lists, the jurisdictions are separated by commas. Any jurisdiction's
    > name that is missing is still accounted for by an empty string in the list.
    > 
    > The type of each jurisdiction is given in the `PLAC`.`FORM` substructure, if
    > present, or in the `HEAD`.`PLAC`.`FORM` structure. If neither is present, the
    > jurisdictional types are unspecified beyond the lowest-to-highest order noted
    > above.
    > 
    > <div class="deprecation">
    > 
    > Having an `EXID` without an `EXID`.`TYPE` substructure is deprecated. The
    > meaning of an `EXID` depends on its `EXID`.`TYPE`. The cardinality of
    > `EXID`.`TYPE` will be changed to `{1:1}` in version 8.0.
    > 
    > </div>
    > 
    > A place, which can be represented in several ways:
    > 
    > - The payload contains a comma-separated list of region names, ordered from
    >   smallest to largest. The specific meaning of each element is given by the
    >   `FORM` substructure, or in the `HEAD`.`PLAC`.`FORM` if there is no `FORM`
    >   substructure. If neither `FORM` exists, the meaning of the elements are not
    >   defined in this specification beyond being names of jurisdictions of some
    >   kind, ordered from smallest to largest.
    > 
    >   <div class="note">
    >     Some applications and users have defaulted to assuming a `FORM` of "City, County, State, Country",
    >     and some applications even ignore any `FORM` substructures and treat payloads with a smaller number of
    >     elements as if they had additional blank elements at the end.
    >     </div>
    > 
    >   Elements should be left blank if they are unknown, do not apply to the
    >   location, or are too specific for the region in question.
    > 
    >   <div class="example">
    >     A record describing births throughout Oneida county could be recorded as
    > 
    >   ```gedcom
    >   0 @S1@ SOUR
    >   1 DATA
    >   2 EVEN BIRT
    >   3 PLAC , Oneida, Idaho, USA
    >   4 FORM City, County, State, Country
    >   ```
    > 
    >   </div>
    > 
    > - The payload may be translated or transliterated into different languages or
    >   scripts using the `TRAN` substructure. It should use the same `FORM` as the
    >   payload.
    > 
    > - Global coordinates may be presented in the `MAP` substructure
    > 
    > <div class="note">
    > 
    > This specification does not support places where a region name contains a
    > comma. An alternative system for representing locations is likely to be added
    > in a later version.
    > 
    > </div>
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/EXID            | Many     | No       |
    | https://gedcom.io/terms/v7/LANG            | Many     | No       |
    | https://gedcom.io/terms/v7/MAP             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC-FORM       | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC-TRAN       | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-List#Text
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM PLAC Structure](https://gedcom.io/terms/v7/PLAC)
    '''
    
    key: str = 'PLAC'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class PlacForm(BaseStructure):
    '''Store, validate and format the FORM structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Format
    > A comma-separated list of jurisdictional titles, which has the same number of
    > elements and in the same order as the `PLAC` structure. As with `PLAC`, this
    > shall be ordered from lowest to highest jurisdiction.
    > 
    > <div class="example">
    > 
    > The following represents Baltimore, a city that is not within a county.
    > 
    > ```gedcom
    > 2 PLAC Baltimore, , Maryland, USA
    > 3 FORM City, County, State, Country
    > ```
    > 
    > </div>
    > 
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-List#Text
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM FORM Structure](https://gedcom.io/terms/v7/PLAC-FORM)
    '''
    
    key: str = 'PLAC-FORM'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class PlacTran(BaseStructure):
    '''Store, validate and format the TRAN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Translation
    > A type of `TRAN` substructure specific to places. Each `PLAC`.`TRAN` must have
    > a `LANG` substructure. See also `PLAC`.
    > 
    > <div class="example">
    > 
    > The following presents a place in Japanese with a romaji transliteration and
    > English translation
    > 
    > ```gedcom
    > 2 PLAC 千代田, 東京, 日本
    > 3 FORM 区, 都, 国
    > 3 LANG ja
    > 3 TRAN Chiyoda, Tokyo, Nihon
    > 4 LANG ja-Latn
    > 3 TRAN Chiyoda, Tokyo, Japan
    > 4 LANG en
    > ```
    > 
    > </div>
    > 
    > A representation of the superstructure's data in a different format.
    > 
    > In some situations it is desirable to provide the same semantic content in
    > multiple formats. Where this is desirable, a `TRAN` substructure is used, where
    > the specific format is given in its language tag substructure, media type
    > substructure, or both.
    > 
    > Different `TRAN` structures are used in different contexts to fully capture the
    > structure of the information being presented in multiple formats. In all cases,
    > a `TRAN` structure's payload and substructures should provide only information
    > also contained in the `TRAN` structures' superstructure, but provide it in a
    > new language, script, or media type.
    > 
    > Each `TRAN` substructure must have either a language tag or a media type or
    > both. Each `TRAN` structure must differ from its superstructure and from every
    > other `TRAN` substructure of its superstructure in either its language tag or
    > its media type or both.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/LANG            | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-List#Text
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TRAN Structure](https://gedcom.io/terms/v7/PLAC-TRAN)
    '''
    
    key: str = 'PLAC-TRAN'
        
    def __init__(self, value: str, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class Post(BaseStructure):
    '''Store, validate and format the POST structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Postal code
    > A code used by a postal service to identify an area to facilitate mail
    > handling. See `ADDRESS_STRUCTURE` for more details.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM POST Structure](https://gedcom.io/terms/v7/POST)
    '''
    
    key: str = 'POST'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Prob(BaseStructure):
    '''Store, validate and format the PROB structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Probate
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > probate
    > Judicial determination of the validity of a will. It may indicate several
    > related court activities over several dates.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM PROB Structure](https://gedcom.io/terms/v7/PROB)
    '''
    
    key: str = 'PROB'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Publ(BaseStructure):
    '''Store, validate and format the PUBL structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Publication
    > When and where the record was created. For published works, this includes
    > information such as the city of publication, name of the publisher, and year of
    > publication.
    > 
    > For an unpublished work, it includes the date the record was created and the
    > place where it was created, such as the county and state of residence of a
    > person making a declaration for a pension or the city and state of residence of
    > the writer of a letter.
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM PUBL Structure](https://gedcom.io/terms/v7/PUBL)
    '''
    
    key: str = 'PUBL'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Quay(BaseStructure):
    '''Store, validate and format the QUAY structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Quality of data
    > An enumerated value from set `https://gedcom.io/terms/v7/enumset-QUAY`
    > indicating the credibility of a piece of information, based on its
    > supporting evidence. Some systems use this feature to rank multiple
    > conflicting opinions for display of most likely information first. It is
    > not intended to eliminate the receivers' need to evaluate the evidence for
    > themselves.

    Examples:
        This example shows a successful run of the Quay structure using
        the enumeration value '0'.
        >>> from genedata.structure import Quay
        >>> m = Quay('0')
        >>> print(m.ged(1))
        1 QUAY 0
        <BLANKLINE>

        This example shows the code that is generated to produce the same result as above.
        >>> print(m.code())
        <BLANKLINE>
        Quay('0')
        
    Enumerations:
    - '0': https://gedcom.io/terms/v7/enum-0
        > Unreliable evidence or estimated data
    - '1': https://gedcom.io/terms/v7/enum-1
        > Questionable reliability of evidence (interviews, census, oral genealogies,
        > or potential for bias, such as an autobiography)
    - '2': https://gedcom.io/terms/v7/enum-2
        > Secondary evidence, data officially recorded sometime after the event
    - '3': https://gedcom.io/terms/v7/enum-3
        > Direct and primary evidence used, or by dominance of the evidence
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Enum
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM QUAY Structure](https://gedcom.io/terms/v7/QUAY)
    '''
    
    key: str = 'QUAY'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class RecordFam(BaseStructure):
    '''Store, validate and format the FAM structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Family record
    > See `FAMILY_RECORD`
    > 
    > <div class="note">
    > 
    > The common case is that each couple has one `FAM` record, but that is not
    > always the case.
    > 
    > A couple that separates and then gets together again can be represented either
    > as a single `FAM` with multiple events (`MARR`, `DIV`, etc.) or as a separate
    > `FAM` for each time together. Some user interfaces may display these two in
    > different ways and the two admit different semantics in sourcing. A single
    > `FAM` with two `MARR` with distinct dates might also represent uncertainty
    > about dates and a pair of `FAM` with same spouses might also be the result of
    > merging multiple files.
    > 
    > Implementers should support both representations, and should choose between
    > them based on user input or other context beyond that provided in the datasets
    > themselves.
    > 
    > </div>
    > 
    > The `FAM` record was originally structured to represent families where a male
    > `HUSB` (husband or father) and female `WIFE` (wife or mother) produce `CHIL`
    > (children). The `FAM` record may also be used for cultural parallels to this,
    > including nuclear families, marriage, cohabitation, fostering, adoption, and so
    > on, regardless of the gender of the partners. Sex, gender, titles, and roles of
    > partners should not be inferred based on the partner that the `HUSB` or `WIFE`
    > structure points to.
    > 
    > The individuals pointed to by the `HUSB` and `WIFE` are collectively referred
    > to as "partners", "parents" or "spouses".
    > 
    > Some displays may be unable to display more than 2 partners. Displays may use
    > `HUSB` and `WIFE` as layout hints, for example, by consistently displaying the
    > `HUSB` on the same side of the `WIFE` in a tree view. Family structures with
    > more than 2 partners may either use several `FAM` records or use
    > `ASSOCIATION_STRUCTURE`s to indicate additional partners. `ASSO` should not be
    > used for relationships that can be expressed using `HUSB`, `WIFE`, or `CHIL`
    > instead.
    > 
    > <div class="note">
    > 
    > The `FAM` record will be revised in a future version to more fully express the
    > diversity of human family relationships.
    > 
    > </div>
    > 
    > The order of the `CHIL` (children) pointers within a `FAM` (family) structure
    > should be chronological by birth; this is an exception to the usual "most
    > preferred value first" rule. A `CHIL` with a `voidPtr` indicates a placeholder
    > for an unknown child in this birth order.
    > 
    > If a `FAM` record uses `HUSB` or `WIFE` to point to an `INDI` record, the
    > `INDI` record must use `FAMS` to point to the `FAM` record. If a `FAM` record
    > uses `CHIL` to point to an `INDI` record, the `INDI` record must use a `FAMC`
    > to point to the `FAM` record.
    > 
    > An `INDI` record should not have multiple `FAMS` substructures pointing to the
    > same `FAM`.
    > 
    > A `FAM` record should not have multiple `CHIL` substructures pointing to the
    > same `INDI`; doing so implies a nonsensical birth order. An `INDI` record may
    > have multiple `FAMC` substructures pointing to the same `FAM`, but doing so is
    > not recommended.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ANUL            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CHAN            | Many     | No       |
    | https://gedcom.io/terms/v7/CHIL            | Many     | No       |
    | https://gedcom.io/terms/v7/CREA            | Many     | No       |
    | https://gedcom.io/terms/v7/DIV             | Many     | No       |
    | https://gedcom.io/terms/v7/DIVF            | Many     | No       |
    | https://gedcom.io/terms/v7/ENGA            | Many     | No       |
    | https://gedcom.io/terms/v7/EXID            | Many     | No       |
    | https://gedcom.io/terms/v7/FAM-CENS        | Many     | No       |
    | https://gedcom.io/terms/v7/FAM-EVEN        | Many     | No       |
    | https://gedcom.io/terms/v7/FAM-FACT        | Many     | No       |
    | https://gedcom.io/terms/v7/FAM-HUSB        | Many     | No       |
    | https://gedcom.io/terms/v7/FAM-NCHI        | Many     | No       |
    | https://gedcom.io/terms/v7/FAM-RESI        | Many     | No       |
    | https://gedcom.io/terms/v7/FAM-WIFE        | Many     | No       |
    | https://gedcom.io/terms/v7/MARB            | Many     | No       |
    | https://gedcom.io/terms/v7/MARC            | Many     | No       |
    | https://gedcom.io/terms/v7/MARL            | Many     | No       |
    | https://gedcom.io/terms/v7/MARR            | Many     | No       |
    | https://gedcom.io/terms/v7/MARS            | Many     | No       |
    | https://gedcom.io/terms/v7/NO              | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/REFN            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SLGS            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/SUBM            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
        
    Args:
        value: A value of data type FamilyXref
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM FAM Structure](https://gedcom.io/terms/v7/record-FAM)
    '''
    
    key: str = 'record-FAM'
        
    def __init__(self, value: FamilyXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class RecordIndi(BaseStructure):
    '''Store, validate and format the INDI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Individual
    > See `INDIVIDUAL_RECORD`.
    > The individual record is a compilation of facts or hypothesized facts about an
    > individual. These facts may come from multiple sources. Source citations and
    > notes allow documentation of the source where each of the facts were
    > discovered.
    > 
    > A single individual may have facts distributed across multiple individual
    > records, connected by `ALIA` (alias, in the computing sense not the pseudonym
    > sense) pointers. See `ALIA` for more details.
    > 
    > Individual records are linked to Family records by use of bi-directional
    > pointers. Details about those links are stored as substructures of the pointers
    > in the individual record.
    > 
    > Other associations or relationships are represented by the `ASSO` (association)
    > tag. The person's relation or associate is the person being pointed to. The
    > association or relationship is stated by the value on the subordinate `ROLE`
    > line. `ASSO` should not be used for relationships that can be expressed using
    > `FAMS` or `FAMC` instead.
    > 
    > <div class="example">
    > 
    > The following example refers to 2 individuals, `@I1@` and `@I2@`, where `@I2@`
    > is a godparent of `@I1@`:
    > 
    > ```gedcom
    > 0 @I1@ INDI
    > 1 ASSO @I2@
    > 2 ROLE GODP
    > ```
    > 
    > </div>
    > 
    > Events stored as facts within an `INDI` record may also have `FAMC` or `ASSO`
    > tags to indicate families and individuals that participated in those events.
    > For example, a `FAMC` pointer subordinate to an adoption event indicates a
    > relationship to family by adoption; biological parents can be shown by a `FAMC`
    > pointer subordinate to the birth event; the eulogist at a funeral can be shown
    > by an `ASSO` pointer subordinate to the burial event; and so on. A subordinate
    > `FAMC` pointer is allowed to refer to a family where the individual does not
    > appear as a child.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADOP            | Many     | No       |
    | https://gedcom.io/terms/v7/ALIA            | Many     | No       |
    | https://gedcom.io/terms/v7/ANCI            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/BAPL            | Many     | No       |
    | https://gedcom.io/terms/v7/BAPM            | Many     | No       |
    | https://gedcom.io/terms/v7/BARM            | Many     | No       |
    | https://gedcom.io/terms/v7/BASM            | Many     | No       |
    | https://gedcom.io/terms/v7/BIRT            | Many     | No       |
    | https://gedcom.io/terms/v7/BLES            | Many     | No       |
    | https://gedcom.io/terms/v7/BURI            | Many     | No       |
    | https://gedcom.io/terms/v7/CAST            | Many     | No       |
    | https://gedcom.io/terms/v7/CHAN            | Many     | No       |
    | https://gedcom.io/terms/v7/CHR             | Many     | No       |
    | https://gedcom.io/terms/v7/CHRA            | Many     | No       |
    | https://gedcom.io/terms/v7/CONF            | Many     | No       |
    | https://gedcom.io/terms/v7/CONL            | Many     | No       |
    | https://gedcom.io/terms/v7/CREA            | Many     | No       |
    | https://gedcom.io/terms/v7/CREM            | Many     | No       |
    | https://gedcom.io/terms/v7/DEAT            | Many     | No       |
    | https://gedcom.io/terms/v7/DESI            | Many     | No       |
    | https://gedcom.io/terms/v7/DSCR            | Many     | No       |
    | https://gedcom.io/terms/v7/EDUC            | Many     | No       |
    | https://gedcom.io/terms/v7/EMIG            | Many     | No       |
    | https://gedcom.io/terms/v7/ENDL            | Many     | No       |
    | https://gedcom.io/terms/v7/EXID            | Many     | No       |
    | https://gedcom.io/terms/v7/FAMS            | Many     | No       |
    | https://gedcom.io/terms/v7/FCOM            | Many     | No       |
    | https://gedcom.io/terms/v7/GRAD            | Many     | No       |
    | https://gedcom.io/terms/v7/IDNO            | Many     | No       |
    | https://gedcom.io/terms/v7/IMMI            | Many     | No       |
    | https://gedcom.io/terms/v7/INDI-CENS       | Many     | No       |
    | https://gedcom.io/terms/v7/INDI-EVEN       | Many     | No       |
    | https://gedcom.io/terms/v7/INDI-FACT       | Many     | No       |
    | https://gedcom.io/terms/v7/INDI-FAMC       | Many     | No       |
    | https://gedcom.io/terms/v7/INDI-NAME       | Many     | No       |
    | https://gedcom.io/terms/v7/INDI-NCHI       | Many     | No       |
    | https://gedcom.io/terms/v7/INDI-RELI       | Many     | No       |
    | https://gedcom.io/terms/v7/INDI-RESI       | Many     | No       |
    | https://gedcom.io/terms/v7/INDI-TITL       | Many     | No       |
    | https://gedcom.io/terms/v7/INIL            | Many     | No       |
    | https://gedcom.io/terms/v7/NATI            | Many     | No       |
    | https://gedcom.io/terms/v7/NATU            | Many     | No       |
    | https://gedcom.io/terms/v7/NMR             | Many     | No       |
    | https://gedcom.io/terms/v7/NO              | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/OCCU            | Many     | No       |
    | https://gedcom.io/terms/v7/ORDN            | Many     | No       |
    | https://gedcom.io/terms/v7/PROB            | Many     | No       |
    | https://gedcom.io/terms/v7/PROP            | Many     | No       |
    | https://gedcom.io/terms/v7/REFN            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/RETI            | Many     | No       |
    | https://gedcom.io/terms/v7/SEX             | Many     | No       |
    | https://gedcom.io/terms/v7/SLGC            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/SSN             | Many     | No       |
    | https://gedcom.io/terms/v7/SUBM            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WILL            | Many     | No       |
        
    Args:
        value: A value of data type IndividualXref
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM INDI Structure](https://gedcom.io/terms/v7/record-INDI)
    '''
    
    key: str = 'record-INDI'
        
    def __init__(self, value: IndividualXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class RecordObje(BaseStructure):
    '''Store, validate and format the OBJE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Object
    > See `MULTIMEDIA_RECORD`.
    > The multimedia record refers to 1 or more external digital files, and may
    > provide some additional information about the files and the media they encode.
    > 
    > The file reference can occur more than once to group multiple files together.
    > Grouped files should each pertain to the same context. For example, a sound
    > clip and a photo both of the same event might be grouped in a single `OBJE`.
    > 
    > The change and creation dates should be for the `OBJE` record itself, not the
    > underlying files.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/CHAN            | Many     | No       |
    | https://gedcom.io/terms/v7/CREA            | Many     | No       |
    | https://gedcom.io/terms/v7/EXID            | Many     | No       |
    | https://gedcom.io/terms/v7/FILE            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/REFN            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
        
    Args:
        value: A value of data type MultimediaXref
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM OBJE Structure](https://gedcom.io/terms/v7/record-OBJE)
    '''
    
    key: str = 'record-OBJE'
        
    def __init__(self, value: MultimediaXref, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class RecordRepo(BaseStructure):
    '''Store, validate and format the REPO structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Repository
    > See `REPOSITORY_RECORD`.
    > The repository record provides information about an institution or person that
    > has a collection of sources. Informal repositories include the owner of an
    > unpublished work or of a rare published source, or a keeper of personal
    > collections. An example would be the owner of a family Bible containing
    > unpublished family genealogical entries.
    > 
    > Layered repositories, such as an archive containing copies of a subset of
    > records from another archive or archives that have moved or been bought by
    > other archives, are not modeled in this version of the specification. It is
    > expected they will be added in a later version. Until such time, it is
    > recommended that the repository record store current contact information, if
    > known.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/CHAN            | Many     | No       |
    | https://gedcom.io/terms/v7/CREA            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/EXID            | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NAME            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/REFN            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type RepositoryXref
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM REPO Structure](https://gedcom.io/terms/v7/record-REPO)
    '''
    
    key: str = 'record-REPO'
        
    def __init__(self, value: RepositoryXref, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class RecordSnote(BaseStructure):
    '''Store, validate and format the SNOTE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Shared note
    > A note that is shared by multiple structures. See `SHARED_NOTE_RECORD` for
    > more details.
    > A catch-all location for information that does not fully fit within other
    > structures. It may include research notes, additional context, alternative
    > interpretations, reasoning, and so forth.
    > 
    > A shared note record may be pointed to by multiple other structures. Shared
    > notes should only be used if editing the note in one place should edit it in
    > all other places or if the note itself requires an `IDENTIFIER_STRUCTURE`. If
    > each instance of the note may be edited separately and no identifier is needed,
    > a `NOTE` should be used instead.
    > 
    > Each [`SNOTE`.`TRAN`] must have either a `MIME` or `LANG` substructure or
    > both.
    > 
    > <div class="example">
    > 
    > The origin of a name might be a reasonable shared note, while the reason a
    > particular person was given that name may make more sense as a non-shared note.
    > 
    > ```gedcom
    > 0 @GORDON@ SNOTE "Gordon" is a traditional Scottish surname.
    > 1 CONT It became a given name in honor of Charles George Gordon.
    > 0 @I1@ INDI
    > 1 NAME Gordon /Jones/
    > 2 NOTE Named after the astronaut Gordon Cooper
    > 2 SNOTE @GORDON@
    > ```
    > 
    > </div>
    > 
    > <div class="note">
    > 
    > The ability to have multiple structures share a single note using pointers was
    > introduced in version 5.0 in 1991. However, as of 2021 relatively few
    > applications have a user interface that presents shared notes as such to users.
    > It is recommended that `SNOTE` be avoided when `NOTE` will suffice.
    > 
    > </div>
    > 
    > A `SHARED_NOTE_RECORD` may contain a pointer to a `SOURCE_RECORD` and vice
    > versa. Applications must not create datasets where these mutual pointers form a
    > cycle. Applications should also ensure they can handle invalid files with such
    > cycles in a safe manner.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/CHAN            | Many     | No       |
    | https://gedcom.io/terms/v7/CREA            | Many     | No       |
    | https://gedcom.io/terms/v7/EXID            | Many     | No       |
    | https://gedcom.io/terms/v7/LANG            | Many     | No       |
    | https://gedcom.io/terms/v7/MIME            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE-TRAN       | Many     | No       |
    | https://gedcom.io/terms/v7/REFN            | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
        
    Args:
        value: A value of data type SharedNoteXref
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SNOTE Structure](https://gedcom.io/terms/v7/record-SNOTE)
    '''
    
    key: str = 'record-SNOTE'
        
    def __init__(self, value: SharedNoteXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class RecordSour(BaseStructure):
    '''Store, validate and format the SOUR structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Source
    > A description of an entire source. See `SOURCE_RECORD` for more details.
    > A source record describes an entire source. A source may also point to `REPO`s
    > to describe repositories or archives where the source document may be found.
    > The part of a source relevant to a specific fact, such as a specific page or
    > entry, is indicated in a `SOURCE_CITATION` that points to the source record.
    > 
    > <div class="note">
    > 
    > This sourcing model is known to be insufficient for some use cases and may be
    > refined in a future version of this specification.
    > 
    > </div>
    > 
    > A `SOURCE_RECORD` may contain a pointer to a `SHARED_NOTE_RECORD` and vice
    > versa. Applications must not create datasets where these mutual pointers form a
    > cycle. Applications should also ensure they can handle invalid files with such
    > cycles in a safe manner.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ABBR            | Many     | No       |
    | https://gedcom.io/terms/v7/AUTH            | Many     | No       |
    | https://gedcom.io/terms/v7/CHAN            | Many     | No       |
    | https://gedcom.io/terms/v7/CREA            | Many     | No       |
    | https://gedcom.io/terms/v7/DATA            | Many     | No       |
    | https://gedcom.io/terms/v7/EXID            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PUBL            | Many     | No       |
    | https://gedcom.io/terms/v7/REFN            | Many     | No       |
    | https://gedcom.io/terms/v7/REPO            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/TEXT            | Many     | No       |
    | https://gedcom.io/terms/v7/TITL            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
        
    Args:
        value: A value of data type SourceXref
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SOUR Structure](https://gedcom.io/terms/v7/record-SOUR)
    '''
    
    key: str = 'record-SOUR'
        
    def __init__(self, value: SourceXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class RecordSubm(BaseStructure):
    '''Store, validate and format the SUBM structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Submitter
    > A description of a contributor of information to the document. See
    > `SUBMITTER_RECORD` for more details.
    > The submitter record identifies an individual or organization that
    > contributed information contained in the dataset. All records in the
    > document are assumed to be contributed by the submitter referenced in the
    > `HEAD`, unless a `SUBM` structure inside a specific record points at a
    > different submitter record.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/CHAN            | Many     | No       |
    | https://gedcom.io/terms/v7/CREA            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/EXID            | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NAME            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/REFN            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SUBM-LANG       | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type SubmitterXref
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SUBM Structure](https://gedcom.io/terms/v7/record-SUBM)
    '''
    
    key: str = 'record-SUBM'
        
    def __init__(self, value: SubmitterXref, subs: Any) -> None:
        super().__init__(value, subs, self.key)
    

class Refn(BaseStructure):
    '''Store, validate and format the REFN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Reference
    > A user-defined number or text that the submitter uses to identify the
    > superstructure. For instance, it may be a record number within the submitter's
    > automated or manual system, or it may be a page and position number on a
    > pedigree chart.
    > 
    > This is metadata about the structure itself, not data about its subject.
    > Multiple structures describing different aspects of the same subject must not
    > have the same `REFN` value.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM REFN Structure](https://gedcom.io/terms/v7/REFN)
    '''
    
    key: str = 'REFN'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Reli(BaseStructure):
    '''Store, validate and format the RELI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Religion
    > A religious denomination associated with the event or attribute described
    > by the superstructure.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM RELI Structure](https://gedcom.io/terms/v7/RELI)
    '''
    
    key: str = 'RELI'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Repo(BaseStructure):
    '''Store, validate and format the REPO structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Repository
    > See `SOURCE_REPOSITORY_CITATION`.
    > This structure is used within a source record to point to a name and
    > address record of the holder of the source document. Formal and informal
    > repository name and addresses are stored in the `REPOSITORY_RECORD`. More
    > formal repositories, such as the Family History Library, should show a call
    > number of the source at that repository. The call number of that source
    > should be recorded using a `CALN` substructure.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/CALN            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-REPO>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM REPO Structure](https://gedcom.io/terms/v7/REPO)
    '''
    
    key: str = 'REPO'
        
    def __init__(self, value: RepositoryXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Resn(BaseStructure):
    '''Store, validate and format the RESN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Restriction
    > A [List] of enumerated values from set
    > `https://gedcom.io/terms/v7/enumset-RESN` signifying access to information may
    > be denied or otherwise restricted.
    > 
    > The `RESN` structure is provided to assist software in filtering data that
    > should not be exported or otherwise used in a particular context. It is
    > recommended that tools provide an interface to allow users to filter data on
    > export such that certain `RESN` structure payload entries result in the `RESN`
    > structure and its superstructure being removed from the export. Such removal
    > must abide by some constraints: see [Removing data] for more details.
    > 
    > This is metadata about the structure itself, not data about its subject.
    > 

    Examples:
        This example shows a successful run of the Resn structure using
        the enumeration value 'CONFIDENTIAL'.
        >>> from genedata.structure import Resn
        >>> m = Resn('CONFIDENTIAL')
        >>> print(m.ged(1))
        1 RESN CONFIDENTIAL
        <BLANKLINE>

        This example shows the code that is generated to produce the same result as above.
        >>> print(m.code())
        <BLANKLINE>
        Resn('CONFIDENTIAL')
        
    Enumerations:
    - 'CONFIDENTIAL': https://gedcom.io/terms/v7/enum-CONFIDENTIAL
        > This data was marked as confidential by the user.
    - 'LOCKED': https://gedcom.io/terms/v7/enum-LOCKED
        > Some systems may ignore changes to this data.
    - 'PRIVACY': https://gedcom.io/terms/v7/enum-PRIVACY
        > This data is not to be shared outside of a trusted circle, generally
        > because it contains information about living individuals. This definition
        > is known to admit multiple interpretations, so use of the `PRIVACY`
        > restriction notice is not recommended.
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-List#Enum
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM RESN Structure](https://gedcom.io/terms/v7/RESN)
    '''
    
    key: str = 'RESN'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Reti(BaseStructure):
    '''Store, validate and format the RETI structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Retirement
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > retirement
    > Exiting an occupational relationship with an employer after a qualifying
    > time period.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM RETI Structure](https://gedcom.io/terms/v7/RETI)
    '''
    
    key: str = 'RETI'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Role(BaseStructure):
    '''Store, validate and format the ROLE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Role
    > An enumerated value from set `https://gedcom.io/terms/v7/enumset-ROLE`
    > indicating what role this person played in an event or person's life.
    > 
    > <div class="example">
    > 
    > The following indicates a child's birth record as the source of the mother's
    > name:
    > 
    > ```gedcom
    > 0 @I1@ INDI
    > 1 NAME Mary //
    > 2 SOUR @S1@
    > 3 EVEN BIRT
    > 4 ROLE MOTH
    > ```
    > 
    > </div>
    > 
    > <div class="example">
    > 
    > The following indicates that a person's best friend was a witness at their
    > baptism:
    > 
    > ```gedcom
    > 0 @I2@ INDI
    > 1 ASSO @I3@
    > 2 ROLE FRIEND
    > 3 PHRASE best friend
    > 1 BAPM
    > 2 ASSO @I3@
    > 3 ROLE WITN
    > ```
    > 
    > </div>
    > 

    Examples:
        This example shows a successful run of the Role structure using
        the enumeration value 'CHIL'.
        >>> from genedata.structure import Role
        >>> m = Role('CHIL')
        >>> print(m.ged(1))
        1 ROLE CHIL
        <BLANKLINE>

        This example shows the code that is generated to produce the same result as above.
        >>> print(m.code())
        <BLANKLINE>
        Role('CHIL')
        
    Enumerations:
    - 'CHIL': https://gedcom.io/terms/v7/enum-CHIL
        > Child
    - 'CLERGY': https://gedcom.io/terms/v7/enum-CLERGY
        > Religious official in event; implies `OFFICIATOR`
    - 'FATH': https://gedcom.io/terms/v7/enum-FATH
        > Father; implies `PARENT`
    - 'FRIEND': https://gedcom.io/terms/v7/enum-FRIEND
        > Friend
    - 'GODP': https://gedcom.io/terms/v7/enum-GODP
        > Godparent or related role in other religions
    - 'HUSB': https://gedcom.io/terms/v7/enum-HUSB
        > Husband; implies `SPOU`
    - 'MOTH': https://gedcom.io/terms/v7/enum-MOTH
        > Mother; implies `PARENT`
    - 'MULTIPLE': https://gedcom.io/terms/v7/enum-MULTIPLE
        > A sibling from the same pregnancy (twin, triplet, quadruplet, and so on). A
        > `PHRASE` can be used to specify the kind of multiple birth.
    - 'NGHBR': https://gedcom.io/terms/v7/enum-NGHBR
        > Neighbor
    - 'OFFICIATOR': https://gedcom.io/terms/v7/enum-OFFICIATOR
        > Officiator of the event
    - 'OTHER': https://gedcom.io/terms/v7/enum-OTHER
        > A value not listed here; should have a `PHRASE` substructure
    - 'PARENT': https://gedcom.io/terms/v7/enum-PARENT
        > Parent
    - 'SPOU': https://gedcom.io/terms/v7/enum-SPOU
        > Spouse
    - 'WIFE': https://gedcom.io/terms/v7/enum-WIFE
        > Wife; implies `SPOU`
    - 'WITN': https://gedcom.io/terms/v7/enum-WITN
        > Witness
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Enum
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM ROLE Structure](https://gedcom.io/terms/v7/ROLE)
    '''
    
    key: str = 'ROLE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Schma(BaseStructure):
    '''Store, validate and format the SCHMA structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Extension schema
    > A container for storing meta-information about the extension tags used in
    > this document. See [Extensions] for more details.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/TAG             | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SCHMA Structure](https://gedcom.io/terms/v7/SCHMA)
    '''
    
    key: str = 'SCHMA'
        
    def __init__(self, subs: Any = None) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Sdate(BaseStructure):
    '''Store, validate and format the SDATE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Sort date
    > A date to be used as a sorting hint. It is intended for use when the actual
    > date is unknown, but the display order may be dependent on date.
    > 
    > If both a `DATE` and `SDATE` are present in the same structure, the `SDATE`
    > should be used for sorting and positioning while the `DATE` should be displayed
    > as the date of the structure.
    > 
    > `SDATE` and its substructures (including `PHRASE`, `TIME`, and any extension
    > structures) should be used only as sorting hints, not to convey historical
    > meaning.
    > 
    > It is recommended to use a payload that matches
    > `[[day D] month D] year [D epoch]`. Other DateValue forms may have unreliable
    > effects on sorting. Including a month and day is encouraged to help different
    > applications sort dates the same way, as the relative ordering of dates with
    > different levels of precision is not well defined.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
    | https://gedcom.io/terms/v7/TIME            | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Date
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SDATE Structure](https://gedcom.io/terms/v7/SDATE)
    '''
    
    key: str = 'SDATE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Sex(BaseStructure):
    '''Store, validate and format the SEX structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Sex
    > An enumerated value from set `https://gedcom.io/terms/v7/enumset-SEX` that
    > indicates the sex of the individual at birth.

    Examples:
        This example shows a successful run of the Sex structure using
        the enumeration value 'F'.
        >>> from genedata.structure import Sex
        >>> m = Sex('F')
        >>> print(m.ged(1))
        1 SEX F
        <BLANKLINE>

        This example shows the code that is generated to produce the same result as above.
        >>> print(m.code())
        <BLANKLINE>
        Sex('F')
        
    Enumerations:
    - 'F': https://gedcom.io/terms/v7/enum-F
        > Female
    - 'M': https://gedcom.io/terms/v7/enum-M
        > Male
    - 'U': https://gedcom.io/terms/v7/enum-U
        > Cannot be determined from available sources
    - 'X': https://gedcom.io/terms/v7/enum-X
        > Does not fit the typical definition of only Male or only Female
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Enum
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SEX Structure](https://gedcom.io/terms/v7/SEX)
    '''
    
    key: str = 'SEX'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Slgc(BaseStructure):
    '''Store, validate and format the SLGC structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Sealing, child
    > A [Latter-Day Saint Ordinance]. See also `LDS_INDIVIDUAL_ORDINANCE`.
    > sealing child
    > A religious event pertaining to the sealing of a child to his or her
    > parents in a temple ceremony of The Church of Jesus Christ of Latter-day
    > Saints.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/FAMC            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TEMP            | Many     | No       |
    | https://gedcom.io/terms/v7/ord-STAT        | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SLGC Structure](https://gedcom.io/terms/v7/SLGC)
    '''
    
    key: str = 'SLGC'
        
    def __init__(self, subs: Any) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Slgs(BaseStructure):
    '''Store, validate and format the SLGS structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Sealing, spouse
    > A [Latter-Day Saint Ordinance]. See also `LDS_SPOUSE_SEALING`.
    > Ordinances performed by members of The Church of Jesus Christ of Latter-day
    > Saints; see [Latter-day Saint Ordinances] for descriptions of each
    > ordinance type.
    > sealing spouse
    > A religious event pertaining to the sealing of a husband and wife in a
    > temple ceremony of The Church of Jesus Christ of Latter-day Saints. (See
    > also [`MARR`])
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TEMP            | Many     | No       |
    | https://gedcom.io/terms/v7/ord-STAT        | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SLGS Structure](https://gedcom.io/terms/v7/SLGS)
    '''
    
    key: str = 'SLGS'
        
    def __init__(self, subs: Any = None) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Snote(BaseStructure):
    '''Store, validate and format the SNOTE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Shared note
    > A pointer to a note that is shared by multiple structures. See
    > `NOTE_STRUCTURE` for more details.
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-SNOTE>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SNOTE Structure](https://gedcom.io/terms/v7/SNOTE)
    '''
    
    key: str = 'SNOTE'
        
    def __init__(self, value: SharedNoteXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Sour(BaseStructure):
    '''Store, validate and format the SOUR structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Source
    > A description of the relevant part of a source to support the
    > superstructure's data. See `SOURCE_CITATION` for more details.
    > A citation indicating that the pointed-to source record supports the claims
    > made in the superstructure. Substructures provide additional information about
    > how that source applies to the subject of the citation's superstructure:
    > 
    > - `PAGE`: where in the source the relevant material can be found.
    > - `DATA`: the relevant data from the source.
    > - `EVEN`: what event the relevant material was recording.
    > - `QUAY`: an estimation of the reliability of the source in regard to these
    >   claims.
    > - `MULTIMEDIA_LINK`: digital copies of the cited part of the source
    > 
    > It is recommended that every `SOURCE_CITATION` point to a `SOURCE_RECORD`.
    > However, a `voidPtr` can be used with the citation text in a `PAGE`
    > substructure. The `PAGE` is defined to express a "specific location within the
    > information referenced;" with a `voidPtr` there is no information referenced,
    > so the `PAGE` may describe the entire source.
    > 
    > A `SOURCE_CITATION` can contain a `NOTE_STRUCTURE`, which in turn can contain a
    > `SOURCE_CITATION`, allowing potentially unbounded nesting of structures.
    > Because each dataset is finite, this nesting is also guaranteed to be finite.
    > 
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PAGE            | Many     | No       |
    | https://gedcom.io/terms/v7/QUAY            | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR-DATA       | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR-EVEN       | Many     | No       |
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-SOUR>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SOUR Structure](https://gedcom.io/terms/v7/SOUR)
    '''
    
    key: str = 'SOUR'
        
    def __init__(self, value: SourceXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class SourData(BaseStructure):
    '''Store, validate and format the DATA structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Data
    > See `https://gedcom.io/terms/v7/DATA`.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/TEXT            | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM DATA Structure](https://gedcom.io/terms/v7/SOUR-DATA)
    '''
    
    key: str = 'SOUR-DATA'
        
    def __init__(self, subs: Any = None) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class SourEven(BaseStructure):
    '''Store, validate and format the EVEN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Event
    > An enumerated value from set `https://gedcom.io/terms/v7/enumset-EVENATTR`
    > indicating the type of event or attribute which was responsible for the
    > source entry being recorded. For example, if the entry was created to
    > record a birth of a child, then the type would be `BIRT` regardless of the
    > assertions made from that record, such as the mother's name or mother's
    > birth date.
        
    Enumerations:
    - 'CENS': https://gedcom.io/terms/v7/enum-CENS
        > A census event; either `https://gedcom.io/terms/v7/INDI-CENS` or
        > `https://gedcom.io/terms/v7/FAM-CENS`
    - 'EVEN': https://gedcom.io/terms/v7/enum-EVEN
        > A generic event; either `https://gedcom.io/terms/v7/INDI-EVEN` or
        > `https://gedcom.io/terms/v7/FAM-EVEN`
    - 'FACT': https://gedcom.io/terms/v7/enum-FACT
        > A generic attribute; either `https://gedcom.io/terms/v7/INDI-FACT` or
        > `https://gedcom.io/terms/v7/FAM-FACT`
    - 'NCHI': https://gedcom.io/terms/v7/enum-NCHI
        > A count of children; either `https://gedcom.io/terms/v7/INDI-NCHI` or
        > `https://gedcom.io/terms/v7/FAM-NCHI`
    - 'RESI': https://gedcom.io/terms/v7/enum-RESI
        > A residence attribute; either `https://gedcom.io/terms/v7/INDI-RESI` or
        > `https://gedcom.io/terms/v7/FAM-RESI`
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/PHRASE          | Many     | No       |
    | https://gedcom.io/terms/v7/ROLE            | Many     | No       |
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Enum
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM EVEN Structure](https://gedcom.io/terms/v7/SOUR-EVEN)
    '''
    
    key: str = 'SOUR-EVEN'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Spfx(BaseStructure):
    '''Store, validate and format the SPFX structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Surname prefix
    > A name piece used as a non-indexing pre-part of a surname.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SPFX Structure](https://gedcom.io/terms/v7/SPFX)
    '''
    
    key: str = 'SPFX'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Ssn(BaseStructure):
    '''Store, validate and format the SSN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Social security number
    > An [Individual Attribute]. See also `INDIVIDUAL_ATTRIBUTE_STRUCTURE`.
    > social security number
    > A number assigned by the United States Social Security Administration, used
    > for tax identification purposes. It is a type of `IDNO`.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SSN Structure](https://gedcom.io/terms/v7/SSN)
    '''
    
    key: str = 'SSN'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Stae(BaseStructure):
    '''Store, validate and format the STAE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > State
    > A geographical division of a larger jurisdictional area, such as a state
    > within the United States of America. See `ADDRESS_STRUCTURE` for more
    > details.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM STAE Structure](https://gedcom.io/terms/v7/STAE)
    '''
    
    key: str = 'STAE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Subm(BaseStructure):
    '''Store, validate and format the SUBM structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Submitter
    > A contributor of information in the substructure. This is metadata about
    > the structure itself, not data about its subject.
        
    Args:
        value: A value of data type @<https://gedcom.io/terms/v7/record-SUBM>@
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SUBM Structure](https://gedcom.io/terms/v7/SUBM)
    '''
    
    key: str = 'SUBM'
        
    def __init__(self, value: SubmitterXref, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class SubmLang(BaseStructure):
    '''Store, validate and format the LANG structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Language
    > A language the subject of that record understands.
    > 
    > The payload of the `LANG` structure is a language tag, as defined by [BCP 47].
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#Language
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM LANG Structure](https://gedcom.io/terms/v7/SUBM-LANG)
    '''
    
    key: str = 'SUBM-LANG'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Surn(BaseStructure):
    '''Store, validate and format the SURN structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Surname
    > A family name passed on or used by members of a family.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM SURN Structure](https://gedcom.io/terms/v7/SURN)
    '''
    
    key: str = 'SURN'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Tag(BaseStructure):
    '''Store, validate and format the TAG structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Extension tag
    > Information relating to a single extension tag as used in this document.
    > See [Extensions] for more details.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TAG Structure](https://gedcom.io/terms/v7/TAG)
    '''
    
    key: str = 'TAG'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Temp(BaseStructure):
    '''Store, validate and format the TEMP structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Temple
    > The name of a temple of The Church of Jesus Christ of Latter-day Saints.
    > Previous versions recommended using a set of abbreviations for temple
    > names, but the list of abbreviations is no longer published by the Church
    > and using abbreviations is no longer recommended.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TEMP Structure](https://gedcom.io/terms/v7/TEMP)
    '''
    
    key: str = 'TEMP'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Text(BaseStructure):
    '''Store, validate and format the TEXT structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Text from Source
    > A verbatim copy of any description contained within the source. This
    > indicates notes or text that are actually contained in the source document,
    > not the submitter's opinion about the source. This should be, from the
    > evidence point of view, "what the original record keeper said" as opposed
    > to the researcher's interpretation.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/LANG            | Many     | No       |
    | https://gedcom.io/terms/v7/MIME            | Many     | No       |
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TEXT Structure](https://gedcom.io/terms/v7/TEXT)
    '''
    
    key: str = 'TEXT'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Time(BaseStructure):
    '''Store, validate and format the TIME structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Time
    > A `Time` value in a 24-hour clock format.
        
    Args:
        value: A value of data type https://gedcom.io/terms/v7/type-Time
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TIME Structure](https://gedcom.io/terms/v7/TIME)
    '''
    
    key: str = 'TIME'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Titl(BaseStructure):
    '''Store, validate and format the TITL structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Title
    > The title, formal or informal, of the superstructure.
    > 
    > A published work, such as a book, might have a title plus the title of the
    > series of which the book is a part. A magazine article would have a title plus
    > the title of the magazine that published the article.
    > 
    > For an unpublished work, including most digital files, titles should be
    > descriptive and appropriate to the work.
    > 
    > <div class="example">
    > 
    > <p></p>
    > 
    > - The `TITL` of a letter might include the date, the sender, and the receiver.
    > - The `TITL` of a transaction between a buyer and seller might have their names
    >   and the transaction date.
    > - The `TITL` of a family Bible containing genealogical information might have
    >   past and present owners and a physical description of the book.
    > - The `TITL` of a personal interview would cite the informant and interviewer.
    > 
    > </div>
    > 
    > Some sources may have a citation text that cannot readily be represented using
    > the `SOURCE_RECORD` substructures `AUTH`, `PUBL`, `REPO`, and so on. In such
    > cases, the entire citation text may be presented as the payload of the
    > `SOUR`.`TITL`.
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TITL Structure](https://gedcom.io/terms/v7/TITL)
    '''
    
    key: str = 'TITL'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Top(BaseStructure):
    '''Store, validate and format the TOP structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Top crop width
    > A number of pixels to not display from the top side of the image. See
    > `CROP` for more details.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#nonNegativeInteger
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TOP Structure](https://gedcom.io/terms/v7/TOP)
    '''
    
    key: str = 'TOP'
        
    def __init__(self, value: int, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Trlr(BaseStructure):
    '''Store, validate and format the TRLR structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Trailer
    > A pseudo-structure marking the end of a dataset. See [The Header and
    > Trailer] for more details.
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TRLR Structure](https://gedcom.io/terms/v7/TRLR)
    '''
    
    key: str = 'TRLR'
        
    def __init__(self, subs: Any = None) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Type(BaseStructure):
    '''Store, validate and format the TYPE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Type
    > A descriptive word or phrase used to further classify the superstructure.
    > 
    > When both a `NOTE` and free-text `TYPE` are permitted as substructures of the
    > same structure, the displaying systems should always display the `TYPE` value
    > when they display the data from the associated structure; `NOTE` will typically
    > be visible only in a detailed view.
    > 
    > `TYPE` must be used whenever the generic `EVEN`, `FACT` and `IDNO` tags are
    > used. It may also be used for any other event or attribute.
    > 
    > Using the subordinate `TYPE` classification method provides a further
    > classification of the superstructure but does not change its basic meaning.
    > 
    > <div class="example">
    > 
    > A `ORDN` with a `TYPE` could clarify what kind of ordination was performed:
    > 
    > ```gedcom
    > 0 @I1@ INDI
    > 1 ORDN
    > 2 TYPE Bishop
    > ```
    > 
    > This classifies the entry as an ordination as a bishop, which is still a
    > ordination event. The event could be further clarified with `RELI`, `DATE`, and
    > other substructures.
    > 
    > Other descriptor values might include, for example,
    > 
    > - "Stillborn" as a qualifier to `BIRT` (birth)
    > - "Civil" as a qualifier to `MARR` (marriage)
    > - "College" as a qualifier to `GRAD` (graduation)
    > - "Oral" as a qualifier to `WILL`
    > 
    > See also `FACT` and `EVEN` for additional examples.
    > 
    > </div>
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM TYPE Structure](https://gedcom.io/terms/v7/TYPE)
    '''
    
    key: str = 'TYPE'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Uid(BaseStructure):
    '''Store, validate and format the UID structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Unique Identifier
    > A globally-unique identifier of the superstructure, to be preserved across
    > edits. If a globally-unique identifier for the record already exists, it should
    > be used without modification, not even whitespace or letter case normalization.
    > New globally unique identifiers should be created and formatted as described in
    > [RFC 4122].
    > 
    > This is metadata about the structure itself, not data about its subject.
    > Multiple structures describing different aspects of the same subject would have
    > different `UID` values.
    > 
    > Because the `UID` identifies a structure, it can facilitate inter-tool
    > collaboration by distinguishing between a structure being edited and a new
    > structure being created. If an application allows structures to be edited in a
    > way that completely changes their meaning (e.g., changing all the contents of
    > an `INDI` record to have it describe a completely different person) then any
    > `UID`s should also be changed.
    > 
    > <div class="note">
    > 
    > Some systems used a 16-byte UUID with a custom 2-byte checksum for a total of
    > 18 bytes:
    > 
    > - checksum byte 1 = (sum of (byte~*i*~) for *i* 1 through 16) mod 256
    > - checksum byte 2 = (sum of ((16 − *i*) × (byte~*i*~)) for *i* 1 through 16)
    >   mod 256
    > 
    > Use of checksums for UIDs is discouraged except in cases where error-prone
    > input is expected and an appropriate action to take in case of an error is
    > known.
    > 
    > </div>
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM UID Structure](https://gedcom.io/terms/v7/UID)
    '''
    
    key: str = 'UID'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Vers(BaseStructure):
    '''Store, validate and format the VERS structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Version
    > An identifier that represents the version level assigned to the associated
    > product. It is defined and changed by the creators of the product.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM VERS Structure](https://gedcom.io/terms/v7/VERS)
    '''
    
    key: str = 'VERS'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Width(BaseStructure):
    '''Store, validate and format the WIDTH structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Width in pixels
    > How many pixels to display horizontally for the image. See `CROP` for more
    > details.
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#nonNegativeInteger
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM WIDTH Structure](https://gedcom.io/terms/v7/WIDTH)
    '''
    
    key: str = 'WIDTH'
        
    def __init__(self, value: int, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Wife(BaseStructure):
    '''Store, validate and format the WIFE structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Wife
    > A container for information relevant to the subject of the superstructure
    > specific to the individual described by the associated `FAM`'s `WIFE`
    > substructure.
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
        
    Args:
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM WIFE Structure](https://gedcom.io/terms/v7/WIFE)
    '''
    
    key: str = 'WIFE'
        
    def __init__(self, subs: Any) -> None:
        super().__init__(Default.EMPTY, subs, self.key)
    

class Will(BaseStructure):
    '''Store, validate and format the WILL structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Will
    > An [Individual Event]. See also `INDIVIDUAL_EVENT_STRUCTURE`.
    > will
    > A legal document treated as an event, by which a person disposes of his or
    > her estate. It takes effect after death. The event date is the date the
    > will was signed while the person was alive. (See also `PROB`)
        
    Substructures:
    |               Specification                | Quantity | Required |
    | ------------------------------------------ | -------- | -------- |
    | https://gedcom.io/terms/v7/ADDR            | Many     | No       |
    | https://gedcom.io/terms/v7/AGE             | Many     | No       |
    | https://gedcom.io/terms/v7/AGNC            | Many     | No       |
    | https://gedcom.io/terms/v7/ASSO            | Many     | No       |
    | https://gedcom.io/terms/v7/CAUS            | Many     | No       |
    | https://gedcom.io/terms/v7/DATE            | Many     | No       |
    | https://gedcom.io/terms/v7/EMAIL           | Many     | No       |
    | https://gedcom.io/terms/v7/FAX             | Many     | No       |
    | https://gedcom.io/terms/v7/NOTE            | Many     | No       |
    | https://gedcom.io/terms/v7/OBJE            | Many     | No       |
    | https://gedcom.io/terms/v7/PHON            | Many     | No       |
    | https://gedcom.io/terms/v7/PLAC            | Many     | No       |
    | https://gedcom.io/terms/v7/RELI            | Many     | No       |
    | https://gedcom.io/terms/v7/RESN            | Many     | No       |
    | https://gedcom.io/terms/v7/SDATE           | Many     | No       |
    | https://gedcom.io/terms/v7/SNOTE           | Many     | No       |
    | https://gedcom.io/terms/v7/SOUR            | Many     | No       |
    | https://gedcom.io/terms/v7/TYPE            | Many     | No       |
    | https://gedcom.io/terms/v7/UID             | Many     | No       |
    | https://gedcom.io/terms/v7/WWW             | Many     | No       |
        
    Args:
        value: A value of data type Y|<NULL>
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM WILL Structure](https://gedcom.io/terms/v7/WILL)
    '''
    
    key: str = 'WILL'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    

class Www(BaseStructure):
    '''Store, validate and format the WWW structure. Generated by `Construct.generate_class`.
    
    GEDCOM Specification:
    > Web address
    > A URL or other locator for a World Wide Web page of the subject of the
    > superstructure, as defined by any relevant standard such as [whatwg/url], [RFC
    > 3986], [RFC 3987], and so forth.
    > 
    > Like other substructures, the `WWW` structure provides details about the
    > subject of its superstructure. For example, a `MARR`.`WWW` is a world wide web
    > page of the marriage event, not the personal website of the couple or an entry
    > in an online database serving as a source documenting the marriage. However,
    > the meaning of `WWW` was only implicit when it was introduced in version 5.5.1
    > and many files were created that use `WWW` to store a more tangentially-related
    > web address, so applications are recommended to interpret the `WWW` structure's
    > meaning cautiously.
    > 
    > If an invalid or no longer existing web address is present upon import, it
    > should be preserved as-is on export.
    > 
        
    Args:
        value: A value of data type http://www.w3.org/2001/XMLSchema#string
        subs: A permitted substructure, an extension or list of permitted substructures or extensions.
        
    References:
    - [GEDCOM WWW Structure](https://gedcom.io/terms/v7/WWW)
    '''
    
    key: str = 'WWW'
        
    def __init__(self, value: str, subs: Any = None) -> None:
        super().__init__(value, subs, self.key)
    